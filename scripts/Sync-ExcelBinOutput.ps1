# This script uses quicktype to generate serde_json compatible Rust structs from
# GenshinData's ExcelBinOutput folder JSON files.
# Quicktype tool for reference: https://github.com/quicktype

$gameDataPath = $env:GAME_DATA_PATH
if (!$gameDataPath) {
    Write-Output "Please specify the game resources path containing the ExcelBinOutput folder via the GAME_DATA_PATH environment variable!"
    exit
}
$logicalCoreCount = (Get-CimInstance Win32_ComputerSystem).NumberOfLogicalProcessors

Get-ChildItem -Path "$gameDataPath\ExcelBinOutput\" -Filter *.json |
ForEach-Object -Parallel {
    $fileName = [System.IO.Path]::GetFileNameWithoutExtension($_)
    $outFile = ".\genshindata-rs\src\excelbinoutput\$fileName.rs"
    Write-Host "Running quicktype on $($_.FullName)" -ForegroundColor green
    quicktype $_.FullName `
        -t $fileName `
        -l rs `
        -o $outFile `
        --density normal `
        --visibility public `
        --derive-debug `
        --edition-2018 `
        --no-leading-comments `
        --no-maps `
        --quiet `
        --telemetry disable
    $quicktypeContents = Get-Content -Raw -Path $outFile
    $typeNameRegex = "use serde::{Serialize, Deserialize};(?:`n.*?)+pub type ([a-zA-Z0-9]+) =.*?;"
    [void]($quicktypeContents -match $typeNameRegex)
    $typeName = $matches[1]

    @"
// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
$($quicktypeContents.Trim())

pub fn load() -> Result<$typeName, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "$fileName.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
"@ | Out-File $outFile
} -ThrottleLimit $logicalCoreCount

# Run Sync-ExcelBinOutput-Mod
. "$PSScriptRoot\Sync-ExcelBinOutput-Mod.ps1"
