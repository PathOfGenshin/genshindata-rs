// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityGachaStageExcelConfigData = Vec<ActivityGachaStageExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityGachaStageExcelConfigDatum {
    #[serde(rename = "stageId")]
    pub stage_id: i64,

    #[serde(rename = "HPFNPFCHCEM")]
    pub hpfnpfchcem: i64,

    #[serde(rename = "DGNCBDIHIOC")]
    pub dgncbdihioc: Option<bool>,

    #[serde(rename = "type")]
    pub activity_gacha_stage_excel_config_datum_type: String,

    #[serde(rename = "groupIdList")]
    pub group_id_list: Vec<i64>,

    #[serde(rename = "MHDFBBMJLAM")]
    pub mhdfbbmjlam: Vec<i64>,

    #[serde(rename = "NFIDIGENCKG")]
    pub nfidigenckg: Vec<i64>,

    #[serde(rename = "CBLHJLJOAAP")]
    pub cblhjljoaap: Vec<i64>,

    #[serde(rename = "condID")]
    pub cond_id: Option<i64>,

    #[serde(rename = "watcherID")]
    pub watcher_id: Option<i64>,

    #[serde(rename = "EFIOCIIFCCP")]
    pub efiociifccp: Option<i64>,

    #[serde(rename = "EDJFDLEDPKN")]
    pub edjfdledpkn: Option<bool>,
}

pub fn load() -> Result<ActivityGachaStageExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityGachaStageExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
