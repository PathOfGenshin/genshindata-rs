// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type MechanicusGearLevelUpExcelConfigData = Vec<MechanicusGearLevelUpExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct MechanicusGearLevelUpExcelConfigDatum {
    #[serde(rename = "ID")]
    pub id: i64,

    #[serde(rename = "gearID")]
    pub gear_id: i64,

    #[serde(rename = "gearLevel")]
    pub gear_level: i64,

    #[serde(rename = "gearNameTextMapHash")]
    pub gear_name_text_map_hash: i64,

    #[serde(rename = "gearShortNameTextMapHash")]
    pub gear_short_name_text_map_hash: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "gearIconPath")]
    pub gear_icon_path: String,

    #[serde(rename = "attack")]
    pub attack: Option<i64>,

    #[serde(rename = "attackSpeed")]
    pub attack_speed: Option<i64>,

    #[serde(rename = "attackRange")]
    pub attack_range: Option<i64>,

    #[serde(rename = "buildCost")]
    pub build_cost: i64,

    #[serde(rename = "demolitionRefund")]
    pub demolition_refund: i64,

    #[serde(rename = "globalValueParam")]
    pub global_value_param: Vec<GlobalValueParam>,

    #[serde(rename = "effectList")]
    pub effect_list: Vec<i64>,

    #[serde(rename = "gearLevelUpMoney")]
    pub gear_level_up_money: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct GlobalValueParam {
    #[serde(rename = "key")]
    pub key: Key,

    #[serde(rename = "value")]
    pub value: Option<f64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Key {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "SGV_TDLevel")]
    SgvTdLevel,
}

pub fn load() -> Result<MechanicusGearLevelUpExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "MechanicusGearLevelUpExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
