// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type DungeonPassExcelConfigData = Vec<DungeonPassExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct DungeonPassExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "conds")]
    pub conds: Vec<Cond>,

    #[serde(rename = "logicType")]
    pub logic_type: Option<LogicType>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Cond {
    #[serde(rename = "condType")]
    pub cond_type: Option<CondType>,

    #[serde(rename = "param")]
    pub param: Vec<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum CondType {
    #[serde(rename = "DUNGEON_COND_END_MULTISTAGE_PLAY")]
    DungeonCondEndMultistagePlay,

    #[serde(rename = "DUNGEON_COND_FINISH_CHALLENGE")]
    DungeonCondFinishChallenge,

    #[serde(rename = "DUNGEON_COND_FINISH_QUEST")]
    DungeonCondFinishQuest,

    #[serde(rename = "DUNGEON_COND_IN_TIME")]
    DungeonCondInTime,

    #[serde(rename = "DUNGEON_COND_KILL_GROUP_MONSTER")]
    DungeonCondKillGroupMonster,

    #[serde(rename = "DUNGEON_COND_KILL_MONSTER")]
    DungeonCondKillMonster,

    #[serde(rename = "DUNGEON_COND_KILL_MONSTER_COUNT")]
    DungeonCondKillMonsterCount,

    #[serde(rename = "DUNGEON_COND_KILL_TYPE_MONSTER")]
    DungeonCondKillTypeMonster,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum LogicType {
    #[serde(rename = "LOGIC_AND")]
    LogicAnd,

    #[serde(rename = "LOGIC_OR")]
    LogicOr,
}

pub fn load() -> Result<DungeonPassExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "DungeonPassExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
