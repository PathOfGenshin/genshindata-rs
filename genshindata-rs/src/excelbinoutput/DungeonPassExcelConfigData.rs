/// This file was automatically generated by quicktype
/// DO NOT MANUALLY EDIT THIS FILE!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type DungeonPassExcelConfigData = Vec<DungeonPassExcelConfigDatum>;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct DungeonPassExcelConfigDatum {
    pub id: i64,
    pub conds: Vec<Cond>,
    pub logic_type: Option<LogicType>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Cond {
    pub cond_type: Option<CondType>,
    pub param: Vec<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum CondType {
    #[serde(rename = "DUNGEON_COND_END_MULTISTAGE_PLAY")]
    DungeonCondEndMultistagePlay,
    #[serde(rename = "DUNGEON_COND_FINISH_CHALLENGE")]
    DungeonCondFinishChallenge,
    #[serde(rename = "DUNGEON_COND_FINISH_QUEST")]
    DungeonCondFinishQuest,
    #[serde(rename = "DUNGEON_COND_IN_TIME")]
    DungeonCondInTime,
    #[serde(rename = "DUNGEON_COND_KILL_GROUP_MONSTER")]
    DungeonCondKillGroupMonster,
    #[serde(rename = "DUNGEON_COND_KILL_MONSTER")]
    DungeonCondKillMonster,
    #[serde(rename = "DUNGEON_COND_KILL_MONSTER_COUNT")]
    DungeonCondKillMonsterCount,
    #[serde(rename = "DUNGEON_COND_KILL_TYPE_MONSTER")]
    DungeonCondKillTypeMonster,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum LogicType {
    #[serde(rename = "LOGIC_AND")]
    LogicAnd,
    #[serde(rename = "LOGIC_OR")]
    LogicOr,
}
