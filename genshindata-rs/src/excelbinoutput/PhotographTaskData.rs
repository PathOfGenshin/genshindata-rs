// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type PhotographTaskData = Vec<PhotographTaskDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct PhotographTaskDatum {
    #[serde(rename = "taskId")]
    pub task_id: i64,

    #[serde(rename = "sceneID")]
    pub scene_id: i64,

    #[serde(rename = "centerX")]
    pub center_x: f64,

    #[serde(rename = "centerY")]
    pub center_y: f64,

    #[serde(rename = "centerZ")]
    pub center_z: f64,

    #[serde(rename = "radius")]
    pub radius: f64,

    #[serde(rename = "targetGadgetID")]
    pub target_gadget_id: Vec<String>,

    #[serde(rename = "endTime")]
    pub end_time: f64,

    #[serde(rename = "questid")]
    pub questid: i64,

    #[serde(rename = "finishTipsTextMapHash")]
    pub finish_tips_text_map_hash: i64,

    #[serde(rename = "startTipsTextMapHash")]
    pub start_tips_text_map_hash: i64,

    #[serde(rename = "startTime")]
    pub start_time: Option<f64>,

    #[serde(rename = "IEMBKHGBOFN")]
    pub iembkhgbofn: Option<Iembkhgbofn>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Iembkhgbofn {
    #[serde(rename = "PHOTOGRAPH_TASK_TYPE_INTERACTION")]
    PhotographTaskTypeInteraction,
}

pub fn load() -> Result<PhotographTaskData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "PhotographTaskData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
