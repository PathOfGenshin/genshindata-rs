// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ChapterExcelConfigData = Vec<ChapterExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ChapterExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "beginQuestId")]
    pub begin_quest_id: Option<i64>,

    #[serde(rename = "endQuestId")]
    pub end_quest_id: Option<i64>,

    #[serde(rename = "needBeginTimeStr")]
    pub need_begin_time_str: String,

    #[serde(rename = "chapterNumTextMapHash")]
    pub chapter_num_text_map_hash: i64,

    #[serde(rename = "chapterTitleTextMapHash")]
    pub chapter_title_text_map_hash: i64,

    #[serde(rename = "chapterIcon")]
    pub chapter_icon: String,

    #[serde(rename = "chapterImageHash")]
    pub chapter_image_hash: Option<i64>,

    #[serde(rename = "chapterImageTitleTextMapHash")]
    pub chapter_image_title_text_map_hash: i64,

    #[serde(rename = "chapterSerialNumberIcon")]
    pub chapter_serial_number_icon: ChapterSerialNumberIcon,

    #[serde(rename = "needPlayerLevel")]
    pub need_player_level: Option<i64>,

    #[serde(rename = "activityId")]
    pub activity_id: Option<i64>,

    #[serde(rename = "inActivityNeedPlayerLevel")]
    pub in_activity_need_player_level: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum ChapterSerialNumberIcon {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "UI_QuestType_Chapter_1")]
    UiQuestTypeChapter1,

    #[serde(rename = "UI_QuestType_Chapter_2")]
    UiQuestTypeChapter2,

    #[serde(rename = "UI_QuestType_Chapter_3")]
    UiQuestTypeChapter3,

    #[serde(rename = "UI_QuestType_Chapter_4")]
    UiQuestTypeChapter4,

    #[serde(rename = "UI_QuestType_Chapter_5")]
    UiQuestTypeChapter5,

    #[serde(rename = "UI_QuestType_Chapter_6")]
    UiQuestTypeChapter6,
}

pub fn load() -> Result<ChapterExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ChapterExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
