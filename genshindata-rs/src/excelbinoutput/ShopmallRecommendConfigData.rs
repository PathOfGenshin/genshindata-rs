// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ShopmallRecommendConfigData = Vec<ShopmallRecommendConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ShopmallRecommendConfigDatum {
    #[serde(rename = "Id")]
    pub id: i64,

    #[serde(rename = "subTabId")]
    pub sub_tab_id: i64,

    #[serde(rename = "shopType")]
    pub shop_type: String,

    #[serde(rename = "condVec")]
    pub cond_vec: Vec<Option<serde_json::Value>>,

    #[serde(rename = "configIdVec")]
    pub config_id_vec: Vec<i64>,

    #[serde(rename = "goodsIdVec")]
    pub goods_id_vec: Vec<GoodsIdVec>,

    #[serde(rename = "order")]
    pub order: i64,

    #[serde(rename = "oneCardIconName")]
    pub one_card_icon_name: String,

    #[serde(rename = "colShowIconName")]
    pub col_show_icon_name: Vec<Option<serde_json::Value>>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct GoodsIdVec {
    #[serde(rename = "type")]
    pub goods_id_vec_type: Option<String>,

    #[serde(rename = "OGKLGOLOLOO")]
    pub ogklgololoo: String,

    #[serde(rename = "LOJDHOINDLE")]
    pub lojdhoindle: String,
}

pub fn load() -> Result<ShopmallRecommendConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ShopmallRecommendConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
