// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type GcgCardExcelConfigData = Vec<GcgCardExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GcgCardExcelConfigDatum {
    #[serde(rename = "NJDEBIACCGJ")]
    pub njdebiaccgj: i64,

    #[serde(rename = "PIGACPCFCPF")]
    pub pigacpcfcpf: String,

    #[serde(rename = "FLALADBPOPF")]
    pub flaladbpopf: Vec<i64>,

    #[serde(rename = "BFOPNIGLEMK")]
    pub bfopniglemk: Vec<Bfopniglemk>,

    #[serde(rename = "BHJGPGHNMPB")]
    pub bhjgpghnmpb: Option<i64>,

    #[serde(rename = "APGBHOCBDBF")]
    pub apgbhocbdbf: Vec<String>,

    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "cardType")]
    pub card_type: CardType,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "LDKBFGDBOKD")]
    pub ldkbfgdbokd: Vec<Ldkbfgdbokd>,

    #[serde(rename = "skillList")]
    pub skill_list: Vec<i64>,

    #[serde(rename = "PMEAKELAHJJ")]
    pub pmeakelahjj: Option<String>,

    #[serde(rename = "BBNNKHIKEEB")]
    pub bbnnkhikeeb: Option<Bbnnkhikeeb>,

    #[serde(rename = "MHICIIIBLCI")]
    pub mhiciiiblci: Option<Cmmfefpmgid>,

    #[serde(rename = "EJLBDGICGCA")]
    pub ejlbdgicgca: Option<Ejlbdgicgca>,

    #[serde(rename = "CMMFEFPMGID")]
    pub cmmfefpmgid: Option<Cmmfefpmgid>,

    #[serde(rename = "MJEFNLJLBIJ")]
    pub mjefnljlbij: Option<String>,

    #[serde(rename = "isHidden")]
    pub is_hidden: Option<bool>,

    #[serde(rename = "FANGCKEJDOL")]
    pub fangckejdol: Option<bool>,

    #[serde(rename = "LEHHGAJEOEE")]
    pub lehhgajeoee: Option<i64>,

    #[serde(rename = "GDCDJNEBLAB")]
    pub gdcdjneblab: Option<i64>,

    #[serde(rename = "LHGFAPKCEGE")]
    pub lhgfapkcege: Option<Cmmfefpmgid>,

    #[serde(rename = "DOKABCHGHHO")]
    pub dokabchghho: Option<i64>,

    #[serde(rename = "OFJHNOJLJOG")]
    pub ofjhnojljog: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Bfopniglemk {
    #[serde(rename = "CFKKLOGFHBH")]
    pub cfkklogfhbh: Option<Cfkklogfhbh>,

    #[serde(rename = "count")]
    pub count: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Bbnnkhikeeb {
    #[serde(rename = "GCG_PERSIST_EFFECT_EXPECTO_PATRONUM")]
    GcgPersistEffectExpectoPatronum,

    #[serde(rename = "GCG_PERSIST_EFFECT_IMPERTURBABLE_CHARM")]
    GcgPersistEffectImperturbableCharm,

    #[serde(rename = "GCG_PERSIST_EFFECT_PROTEGO")]
    GcgPersistEffectProtego,

    #[serde(rename = "GCG_PERSIST_EFFECT_STUPEFY")]
    GcgPersistEffectStupefy,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Cfkklogfhbh {
    #[serde(rename = "GCG_COST_DICE_ANEMO")]
    GcgCostDiceAnemo,

    #[serde(rename = "GCG_COST_DICE_CRYO")]
    GcgCostDiceCryo,

    #[serde(rename = "GCG_COST_DICE_DENDRO")]
    GcgCostDiceDendro,

    #[serde(rename = "GCG_COST_DICE_ELECTRO")]
    GcgCostDiceElectro,

    #[serde(rename = "GCG_COST_DICE_GEO")]
    GcgCostDiceGeo,

    #[serde(rename = "GCG_COST_DICE_HYDRO")]
    GcgCostDiceHydro,

    #[serde(rename = "GCG_COST_DICE_PYRO")]
    GcgCostDicePyro,

    #[serde(rename = "GCG_COST_DICE_SAME")]
    GcgCostDiceSame,

    #[serde(rename = "GCG_COST_DICE_VOID")]
    GcgCostDiceVoid,

    #[serde(rename = "GCG_COST_ENERGY")]
    GcgCostEnergy,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum CardType {
    #[serde(rename = "GCG_CARD_ASSIST")]
    GcgCardAssist,

    #[serde(rename = "GCG_CARD_EVENT")]
    GcgCardEvent,

    #[serde(rename = "GCG_CARD_MODIFY")]
    GcgCardModify,

    #[serde(rename = "GCG_CARD_ONSTAGE")]
    GcgCardOnstage,

    #[serde(rename = "GCG_CARD_STATE")]
    GcgCardState,

    #[serde(rename = "GCG_CARD_SUMMON")]
    GcgCardSummon,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Cmmfefpmgid {
    #[serde(rename = "GCG_TOKEN_COUNTER")]
    GcgTokenCounter,

    #[serde(rename = "GCG_TOKEN_LIFE")]
    GcgTokenLife,

    #[serde(rename = "GCG_TOKEN_ROUND_COUNT")]
    GcgTokenRoundCount,

    #[serde(rename = "GCG_TOKEN_SHIELD")]
    GcgTokenShield,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Ejlbdgicgca {
    #[serde(rename = "GCG_TOKEN_ICON_BARRIER_SHIELD")]
    GcgTokenIconBarrierShield,

    #[serde(rename = "GCG_TOKEN_ICON_CLOCK")]
    GcgTokenIconClock,

    #[serde(rename = "GCG_TOKEN_ICON_HOURGLASS")]
    GcgTokenIconHourglass,

    #[serde(rename = "GCG_TOKEN_ICON_NORMAL_SHIELD")]
    GcgTokenIconNormalShield,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Ldkbfgdbokd {
    #[serde(rename = "GCG_TAG_ALLY")]
    GcgTagAlly,

    #[serde(rename = "GCG_TAG_ARTIFACT")]
    GcgTagArtifact,

    #[serde(rename = "GCG_TAG_DENDRO_PRODUCE")]
    GcgTagDendroProduce,

    #[serde(rename = "GCG_TAG_FOOD")]
    GcgTagFood,

    #[serde(rename = "GCG_TAG_FORBIDDEN_ATTACK")]
    GcgTagForbiddenAttack,

    #[serde(rename = "GCG_TAG_IMMUNE_FREEZING")]
    GcgTagImmuneFreezing,

    #[serde(rename = "GCG_TAG_ITEM")]
    GcgTagItem,

    #[serde(rename = "GCG_TAG_NONE")]
    GcgTagNone,

    #[serde(rename = "GCG_TAG_PLACE")]
    GcgTagPlace,

    #[serde(rename = "GCG_TAG_RESONANCE")]
    GcgTagResonance,

    #[serde(rename = "GCG_TAG_SHEILD")]
    GcgTagSheild,

    #[serde(rename = "GCG_TAG_SLOWLY")]
    GcgTagSlowly,

    #[serde(rename = "GCG_TAG_TALENT")]
    GcgTagTalent,

    #[serde(rename = "GCG_TAG_WEAPON")]
    GcgTagWeapon,

    #[serde(rename = "GCG_TAG_WEAPON_BOW")]
    GcgTagWeaponBow,

    #[serde(rename = "GCG_TAG_WEAPON_CATALYST")]
    GcgTagWeaponCatalyst,

    #[serde(rename = "GCG_TAG_WEAPON_CLAYMORE")]
    GcgTagWeaponClaymore,

    #[serde(rename = "GCG_TAG_WEAPON_POLE")]
    GcgTagWeaponPole,

    #[serde(rename = "GCG_TAG_WEAPON_SWORD")]
    GcgTagWeaponSword,
}

pub fn load() -> Result<GcgCardExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GCGCardExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
