// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ReputationEntranceExcelConfigData = Vec<ReputationEntranceExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ReputationEntranceExcelConfigDatum {
    #[serde(rename = "textId")]
    pub text_id: i64,

    #[serde(rename = "entranceId")]
    pub entrance_id: String,

    #[serde(rename = "cityId")]
    pub city_id: i64,

    #[serde(rename = "goodsIdVec")]
    pub goods_id_vec: Vec<GoodsIdVec>,

    #[serde(rename = "condNameVec")]
    pub cond_name_vec: Vec<i64>,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "titleTextMapHash")]
    pub title_text_map_hash: i64,

    #[serde(rename = "explainTitleTextMapHash")]
    pub explain_title_text_map_hash: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "iconName")]
    pub icon_name: String,

    #[serde(rename = "order")]
    pub order: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct GoodsIdVec {
    #[serde(rename = "type")]
    pub goods_id_vec_type: Option<Type>,

    #[serde(rename = "param1")]
    pub param1: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "REPUTATION_ENTRANCE_COND_QUEST")]
    ReputationEntranceCondQuest,

    #[serde(rename = "REPUTATION_ENTRANCE_COND_REPUTATION_LEVEL")]
    ReputationEntranceCondReputationLevel,
}

pub fn load() -> Result<ReputationEntranceExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ReputationEntranceExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
