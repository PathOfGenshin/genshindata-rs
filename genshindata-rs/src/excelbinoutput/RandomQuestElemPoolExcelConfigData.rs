// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type RandomQuestElemPoolExcelConfigData = Vec<RandomQuestElemPoolExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct RandomQuestElemPoolExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "poolId")]
    pub pool_id: i64,

    #[serde(rename = "weight")]
    pub weight: i64,

    #[serde(rename = "sampleList")]
    pub sample_list: Vec<SampleList>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SampleList {
    #[serde(rename = "type")]
    pub sample_list_type: Type,

    #[serde(rename = "content")]
    pub content: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "{GivingCondID1}")]
    GivingCondId1,

    #[serde(rename = "{GivingCondID2}")]
    GivingCondId2,

    #[serde(rename = "{GivingCondID3}")]
    GivingCondId3,

    #[serde(rename = "{GivingID}")]
    GivingId,

    #[serde(rename = "{MonsterLevel}")]
    MonsterLevel,

    #[serde(rename = "{NPCPos}")]
    NpcPos,

    #[serde(rename = "{PatternID}")]
    PatternId,

    #[serde(rename = "{PhotoID}")]
    PhotoId,

    #[serde(rename = "{PlayerLevel}")]
    PlayerLevel,

    #[serde(rename = "{QuestGatherID}")]
    QuestGatherId,

    #[serde(rename = "{QuestGatherID2}")]
    QuestGatherId2,

    #[serde(rename = "{QuestGatherNum}")]
    QuestGatherNum,

    #[serde(rename = "{QuestGlabalVarID}")]
    QuestGlabalVarId,

    #[serde(rename = "{QuestNpcID}")]
    QuestNpcId,

    #[serde(rename = "{QuestNpcID2}")]
    QuestNpcId2,

    #[serde(rename = "{QuestNpcID3}")]
    QuestNpcId3,

    #[serde(rename = "{QuestRescuePos}")]
    QuestRescuePos,

    #[serde(rename = "{QuestRescuePos1}")]
    QuestRescuePos1,

    #[serde(rename = "{QuestRescuePos2}")]
    QuestRescuePos2,
}

pub fn load() -> Result<RandomQuestElemPoolExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "RandomQuestElemPoolExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
