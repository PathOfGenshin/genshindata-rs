// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityGachaRobotExcelConfigData = Vec<ActivityGachaRobotExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityGachaRobotExcelConfigDatum {
    #[serde(rename = "BMPEPAJOMID")]
    pub bmpepajomid: i64,

    #[serde(rename = "JCJEDLODLAD")]
    pub jcjedlodlad: Vec<i64>,

    #[serde(rename = "GIPCKFBNJBE")]
    pub gipckfbnjbe: Vec<i64>,

    #[serde(rename = "LPLHBEJOLMO")]
    pub lplhbejolmo: Vec<i64>,

    #[serde(rename = "type")]
    pub activity_gacha_robot_excel_config_datum_type: Type,

    #[serde(rename = "IBKGOOODANA")]
    pub ibkgooodana: i64,

    #[serde(rename = "materialId")]
    pub material_id: i64,

    #[serde(rename = "modelPath")]
    pub model_path: String,

    #[serde(rename = "ACMGNHMCAAP")]
    pub acmgnhmcaap: i64,

    #[serde(rename = "AKLEKAPPACC")]
    pub aklekappacc: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "MIONEBLJLMI")]
    pub mionebljlmi: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "ROBOT_TYPE_HIDDEN")]
    RobotTypeHidden,

    #[serde(rename = "ROBOT_TYPE_NORMAL")]
    RobotTypeNormal,
}

pub fn load() -> Result<ActivityGachaRobotExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityGachaRobotExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
