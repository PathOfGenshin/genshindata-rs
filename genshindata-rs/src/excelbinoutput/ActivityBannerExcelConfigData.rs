// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityBannerExcelConfigData = Vec<ActivityBannerExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityBannerExcelConfigDatum {
    #[serde(rename = "activityId")]
    pub activity_id: i64,

    #[serde(rename = "BMNALBAMHHL")]
    pub bmnalbamhhl: Option<Bmnalbamhhl>,

    #[serde(rename = "rewardPreviewId")]
    pub reward_preview_id: Option<i64>,

    #[serde(rename = "PPIAMBMPHEN")]
    pub ppiambmphen: String,

    #[serde(rename = "prefabPath")]
    pub prefab_path: String,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "PDCCILKOACA")]
    pub pdccilkoaca: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Bmnalbamhhl {
    #[serde(rename = "ACTIVITY_BANNER_MONSTER")]
    ActivityBannerMonster,
}

pub fn load() -> Result<ActivityBannerExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityBannerExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
