// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type ActivitySummerTimeRaceExcelConfigData = Vec<ActivitySummerTimeRaceExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivitySummerTimeRaceExcelConfigDatum {
    #[serde(rename = "Id")]
    pub id: i64,

    #[serde(rename = "IHGLEBJPIBC")]
    pub ihglebjpibc: Vec<i64>,

    #[serde(rename = "MOGCPAAMOBG")]
    pub mogcpaamobg: Vec<f64>,

    #[serde(rename = "BPMOIEPEJKE")]
    pub bpmoiepejke: Vec<i64>,

    #[serde(rename = "levelTitleTextMapHash")]
    pub level_title_text_map_hash: i64,

    #[serde(rename = "LAPBBGEDIJM")]
    pub lapbbgedijm: i64,

    #[serde(rename = "PJJMFLFKCEE")]
    pub pjjmflfkcee: i64,

    #[serde(rename = "FENHCBCMCDE")]
    pub fenhcbcmcde: i64,

    #[serde(rename = "MDJFKBCPMBO")]
    pub mdjfkbcpmbo: i64,

    #[serde(rename = "DJKMHDMFPKL")]
    pub djkmhdmfpkl: i64,
}

pub fn load() -> Result<ActivitySummerTimeRaceExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivitySummerTimeRaceExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
