// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type LanV3ShadowLevelExcelConfigData = Vec<LanV3ShadowLevelExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct LanV3ShadowLevelExcelConfigDatum {
    #[serde(rename = "levelId")]
    pub level_id: i64,

    #[serde(rename = "prefabPath")]
    pub prefab_path: String,

    #[serde(rename = "BGKCNDHGMBF")]
    pub bgkcndhgmbf: String,

    #[serde(rename = "watcherId")]
    pub watcher_id: i64,

    #[serde(rename = "titleTextMapHash")]
    pub title_text_map_hash: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "JDLBLCFOIIA")]
    pub jdlblcfoiia: i64,

    #[serde(rename = "KHBFPNEBEIA")]
    pub khbfpnebeia: i64,

    #[serde(rename = "GBMPGCHBKFG")]
    pub gbmpgchbkfg: i64,

    #[serde(rename = "DEPOMDCDPEG")]
    pub depomdcdpeg: Option<i64>,
}

pub fn load() -> Result<LanV3ShadowLevelExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "LanV3ShadowLevelExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
