// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type AvatarSkillDepotExcelConfigData = Vec<AvatarSkillDepotExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct AvatarSkillDepotExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "energySkill")]
    pub energy_skill: Option<i64>,

    #[serde(rename = "skills")]
    pub skills: Vec<i64>,

    #[serde(rename = "subSkills")]
    pub sub_skills: Vec<i64>,

    #[serde(rename = "extraAbilities")]
    pub extra_abilities: Vec<String>,

    #[serde(rename = "talents")]
    pub talents: Vec<i64>,

    #[serde(rename = "talentStarName")]
    pub talent_star_name: String,

    #[serde(rename = "inherentProudSkillOpens")]
    pub inherent_proud_skill_opens: Vec<InherentProudSkillOpen>,

    #[serde(rename = "skillDepotAbilityGroup")]
    pub skill_depot_ability_group: String,

    #[serde(rename = "leaderTalent")]
    pub leader_talent: Option<i64>,

    #[serde(rename = "attackModeSkill")]
    pub attack_mode_skill: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct InherentProudSkillOpen {
    #[serde(rename = "proudSkillGroupId")]
    pub proud_skill_group_id: Option<i64>,

    #[serde(rename = "needAvatarPromoteLevel")]
    pub need_avatar_promote_level: Option<i64>,
}

pub fn load() -> Result<AvatarSkillDepotExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "AvatarSkillDepotExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
