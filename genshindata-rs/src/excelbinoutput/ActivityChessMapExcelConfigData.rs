// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type ActivityChessMapExcelConfigData = Vec<ActivityChessMapExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityChessMapExcelConfigDatum {
    #[serde(rename = "DJNPKHHBNLD")]
    pub djnpkhhbnld: i64,

    #[serde(rename = "mapNameTextMapHash")]
    pub map_name_text_map_hash: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "unlockTipsTextMapHash")]
    pub unlock_tips_text_map_hash: i64,

    #[serde(rename = "mapIconPath")]
    pub map_icon_path: String,

    #[serde(rename = "buildGearLimit")]
    pub build_gear_limit: i64,

    #[serde(rename = "dungeonID")]
    pub dungeon_id: i64,

    #[serde(rename = "CIJIOEACOEF")]
    pub cijioeacoef: i64,

    #[serde(rename = "HAFOEGJLOAK")]
    pub hafoegjloak: i64,

    #[serde(rename = "CNJPDGPFOPB")]
    pub cnjpdgpfopb: Option<bool>,

    #[serde(rename = "show")]
    pub show: Option<bool>,

    #[serde(rename = "KMIPFOOLACH")]
    pub kmipfoolach: Vec<i64>,

    #[serde(rename = "NJPGOEPOHEP")]
    pub njpgoepohep: Vec<i64>,

    #[serde(rename = "JHIPDFHNBNC")]
    pub jhipdfhnbnc: Option<i64>,
}

pub fn load() -> Result<ActivityChessMapExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "ActivityChessMapExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
