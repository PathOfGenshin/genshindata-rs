// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityChessMapExcelConfigData = Vec<ActivityChessMapExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityChessMapExcelConfigDatum {
    #[serde(rename = "OEKFDENHBKH")]
    pub oekfdenhbkh: i64,

    #[serde(rename = "mapNameTextMapHash")]
    pub map_name_text_map_hash: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "unlockTipsTextMapHash")]
    pub unlock_tips_text_map_hash: i64,

    #[serde(rename = "mapIconPath")]
    pub map_icon_path: String,

    #[serde(rename = "buildGearLimit")]
    pub build_gear_limit: i64,

    #[serde(rename = "dungeonID")]
    pub dungeon_id: i64,

    #[serde(rename = "DIBNPBCMAJA")]
    pub dibnpbcmaja: i64,

    #[serde(rename = "BDHGNMNHEFG")]
    pub bdhgnmnhefg: i64,

    #[serde(rename = "MCHDJKCLPCI")]
    pub mchdjkclpci: Option<bool>,

    #[serde(rename = "show")]
    pub show: Option<bool>,

    #[serde(rename = "LGPIGLNLKJH")]
    pub lgpiglnlkjh: Vec<i64>,

    #[serde(rename = "HMHJHPKBNJL")]
    pub hmhjhpkbnjl: Vec<i64>,

    #[serde(rename = "OFNIFNDGKCC")]
    pub ofnifndgkcc: Option<i64>,
}

pub fn load() -> Result<ActivityChessMapExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityChessMapExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
