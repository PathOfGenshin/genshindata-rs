/// This file was automatically generated by quicktype
/// DO NOT MANUALLY EDIT THIS FILE!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityChessCardExcelConfigData = Vec<ActivityChessCardExcelConfigDatum>;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub struct ActivityChessCardExcelConfigDatum {
    pub id: i64,
    pub mchfdpohfop: i64,
    pub hmibimlfgac: Option<Hmibimlfgac>,
    pub dgbpbchpodn: i64,
    pub nodephijbho: i64,
    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,
    pub iolagofgkmi: i64,
    pub hfolkaenfih: i64,
    #[serde(rename = "descParamList")]
    pub desc_param_list: Vec<Vec<f64>>,
    pub bkeehbloimk: Vec<bool>,
    pub nencmbojbci: Option<Nencmbojbci>,
    pub dgeemlgcpji: Option<Dgeemlgcpji>,
    pub gegcfolembc: Option<f64>,
    #[serde(rename = "costPoints")]
    pub cost_points: Option<i64>,
    #[serde(rename = "cardType")]
    pub card_type: Option<CardType>,
    pub ekfcadolbkf: i64,
    pub aihopgfmnif: Aihopgfmnif,
    pub ngabckffmpp: i64,
    pub egcocpbbnem: Option<bool>,
    pub iffeklohgfc: Option<bool>,
    pub oaeidakmclc: Vec<Aihopgfmnif>,
    pub mhhjgkhdnco: Option<bool>,
    pub dpcafkceoij: Option<Dpcafkceoij>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub struct Aihopgfmnif {
    pub hdhmlblhgpd: Option<Hdhmlblhgpd>,
    pub immcbedmjko: Vec<i64>,
    pub cjckhiibanb: Option<String>,
    pub oelklimeing: String,
    pub pknkppgnbdb: Option<i64>,
    pub cgcegjkkcbo: Option<i64>,
    pub mpbhcihadcj: Option<i64>,
    pub bepfhhkahpg: Option<i64>,
    pub gojjfelobni: Option<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Hdhmlblhgpd {
    #[serde(rename = "CHESS_CARD_TARGET_ALL")]
    ChessCardTargetAll,
    #[serde(rename = "CHESS_CARD_TARGET_GADGETS")]
    ChessCardTargetGadgets,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum CardType {
    #[serde(rename = "CHESS_CARD_CHALLENGE")]
    ChessCardChallenge,
    #[serde(rename = "CHESS_CARD_MECHANISM")]
    ChessCardMechanism,
    #[serde(rename = "CHESS_CARD_STRENGTHEN")]
    ChessCardStrengthen,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Dgeemlgcpji {
    #[serde(rename = "CARD_NUMERICAL_BASE")]
    CardNumericalBase,
    #[serde(rename = "CARD_NUMERICAL_PERCENTAGE")]
    CardNumericalPercentage,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Dpcafkceoij {
    #[serde(rename = "CARD_QUALITY_GOOD")]
    CardQualityGood,
    #[serde(rename = "CARD_QUALITY_PERCECT")]
    CardQualityPercect,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Hmibimlfgac {
    #[serde(rename = "CARD_TAG_ELECTRIC")]
    CardTagElectric,
    #[serde(rename = "CARD_TAG_FIRE")]
    CardTagFire,
    #[serde(rename = "CARD_TAG_HELP")]
    CardTagHelp,
    #[serde(rename = "CARD_TAG_ICE")]
    CardTagIce,
    #[serde(rename = "CARD_TAG_OTHER")]
    CardTagOther,
    #[serde(rename = "CARD_TAG_PHYSICS")]
    CardTagPhysics,
    #[serde(rename = "CARD_TAG_WATER")]
    CardTagWater,
    #[serde(rename = "CARD_TAG_WIND")]
    CardTagWind,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Nencmbojbci {
    #[serde(rename = "CARD_NUMERICAL_ATTACK")]
    CardNumericalAttack,
    #[serde(rename = "CARD_NUMERICAL_ATTACK_INTERVAL")]
    CardNumericalAttackInterval,
    #[serde(rename = "CARD_NUMERICAL_ATTACK_RANGE")]
    CardNumericalAttackRange,
    #[serde(rename = "CARD_NUMERICAL_MASTERY")]
    CardNumericalMastery,
}
