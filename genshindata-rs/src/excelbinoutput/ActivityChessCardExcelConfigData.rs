/// This file was automatically generated by quicktype
/// DO NOT MANUALLY EDIT THIS FILE!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityChessCardExcelConfigData = Vec<ActivityChessCardExcelConfigDatum>;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub struct ActivityChessCardExcelConfigDatum {
    pub id: i64,
    pub mgmkcenceeg: i64,
    pub ghpnaophiom: Option<Ghpnaophiom>,
    pub eaohfldmbca: i64,
    pub cmkddmdpajj: i64,
    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,
    pub eoobhiegahd: i64,
    pub cifoeajhddn: i64,
    #[serde(rename = "descParamList")]
    pub desc_param_list: Vec<Vec<f64>>,
    pub gpajopcblje: Vec<bool>,
    pub jdgpjgeljef: Option<Jdgpjgeljef>,
    pub legmeiblggb: Option<Legmeiblggb>,
    pub ojoddliadlo: Option<f64>,
    #[serde(rename = "costPoints")]
    pub cost_points: Option<i64>,
    #[serde(rename = "cardType")]
    pub card_type: Option<CardType>,
    pub hcoebkhmcbp: i64,
    pub fkomjdohdjg: Fkomjdohdjg,
    pub dokkjnamfpm: i64,
    pub ikollfkcina: Option<bool>,
    pub omffdeckkck: Option<bool>,
    pub bkdejoahfpe: Vec<Fkomjdohdjg>,
    pub bjpmdechccb: Option<bool>,
    pub pelhiebdnfb: Option<Pelhiebdnfb>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub struct Fkomjdohdjg {
    pub eamjghojekb: Vec<i64>,
    pub llbkndabapd: String,
    pub ddnblgemfki: Option<String>,
    pub mgmhdbildpp: Option<i64>,
    pub fanfhflfdkh: Option<i64>,
    pub godnlelkdcn: Option<i64>,
    pub bgacfbbhapc: Option<i64>,
    pub bhgkldbcoko: Option<Bhgkldbcoko>,
    pub empfhhmopdm: Option<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Bhgkldbcoko {
    #[serde(rename = "CHESS_CARD_TARGET_ALL")]
    ChessCardTargetAll,
    #[serde(rename = "CHESS_CARD_TARGET_GADGETS")]
    ChessCardTargetGadgets,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum CardType {
    #[serde(rename = "CHESS_CARD_CHALLENGE")]
    ChessCardChallenge,
    #[serde(rename = "CHESS_CARD_MECHANISM")]
    ChessCardMechanism,
    #[serde(rename = "CHESS_CARD_STRENGTHEN")]
    ChessCardStrengthen,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Ghpnaophiom {
    #[serde(rename = "CARD_TAG_ELECTRIC")]
    CardTagElectric,
    #[serde(rename = "CARD_TAG_FIRE")]
    CardTagFire,
    #[serde(rename = "CARD_TAG_HELP")]
    CardTagHelp,
    #[serde(rename = "CARD_TAG_ICE")]
    CardTagIce,
    #[serde(rename = "CARD_TAG_OTHER")]
    CardTagOther,
    #[serde(rename = "CARD_TAG_PHYSICS")]
    CardTagPhysics,
    #[serde(rename = "CARD_TAG_WATER")]
    CardTagWater,
    #[serde(rename = "CARD_TAG_WIND")]
    CardTagWind,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Jdgpjgeljef {
    #[serde(rename = "CARD_NUMERICAL_ATTACK")]
    CardNumericalAttack,
    #[serde(rename = "CARD_NUMERICAL_ATTACK_INTERVAL")]
    CardNumericalAttackInterval,
    #[serde(rename = "CARD_NUMERICAL_ATTACK_RANGE")]
    CardNumericalAttackRange,
    #[serde(rename = "CARD_NUMERICAL_MASTERY")]
    CardNumericalMastery,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Legmeiblggb {
    #[serde(rename = "CARD_NUMERICAL_BASE")]
    CardNumericalBase,
    #[serde(rename = "CARD_NUMERICAL_PERCENTAGE")]
    CardNumericalPercentage,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Pelhiebdnfb {
    #[serde(rename = "CARD_QUALITY_GOOD")]
    CardQualityGood,
    #[serde(rename = "CARD_QUALITY_PERCECT")]
    CardQualityPercect,
}
