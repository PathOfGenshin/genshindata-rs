// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityChessCardExcelConfigData = Vec<ActivityChessCardExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityChessCardExcelConfigDatum {
    #[serde(rename = "ID")]
    pub id: i64,

    #[serde(rename = "ACAFKMHLFJJ")]
    pub acafkmhlfjj: i64,

    #[serde(rename = "JLIILFDPKNB")]
    pub jliilfdpknb: Option<Jliilfdpknb>,

    #[serde(rename = "DEEJIMDMAEI")]
    pub deejimdmaei: i64,

    #[serde(rename = "PCLCHHFMJFE")]
    pub pclchhfmjfe: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "BGGGDLFGFBL")]
    pub bgggdlfgfbl: i64,

    #[serde(rename = "BEBMCNMKGLD")]
    pub bebmcnmkgld: i64,

    #[serde(rename = "descParamList")]
    pub desc_param_list: Vec<Vec<f64>>,

    #[serde(rename = "LALPFMKPAGO")]
    pub lalpfmkpago: Vec<bool>,

    #[serde(rename = "OIPGKELHBLP")]
    pub oipgkelhblp: Option<Oipgkelhblp>,

    #[serde(rename = "OCEMCHLBDDI")]
    pub ocemchlbddi: Option<Ocemchlbddi>,

    #[serde(rename = "CEFBNJOLNNL")]
    pub cefbnjolnnl: Option<f64>,

    #[serde(rename = "costPoints")]
    pub cost_points: Option<i64>,

    #[serde(rename = "cardType")]
    pub card_type: Option<CardType>,

    #[serde(rename = "IGLMLHCCAOK")]
    pub iglmlhccaok: i64,

    #[serde(rename = "JFAIINEEPPJ")]
    pub jfaiineeppj: Jfaiineeppj,

    #[serde(rename = "EBHAGFKBOJF")]
    pub ebhagfkbojf: i64,

    #[serde(rename = "FCNDJCKDEEN")]
    pub fcndjckdeen: Option<bool>,

    #[serde(rename = "HIECLMNKDAB")]
    pub hieclmnkdab: Option<bool>,

    #[serde(rename = "LDIGFHGNIHO")]
    pub ldigfhgniho: Vec<Jfaiineeppj>,

    #[serde(rename = "KINEMCFFAFD")]
    pub kinemcffafd: Option<bool>,

    #[serde(rename = "DCJCAIDOOLA")]
    pub dcjcaidoola: Option<Dcjcaidoola>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Jfaiineeppj {
    #[serde(rename = "targetType")]
    pub target_type: Option<TargetType>,

    #[serde(rename = "targetParamList")]
    pub target_param_list: Vec<i64>,

    #[serde(rename = "effectType")]
    pub effect_type: Option<String>,

    #[serde(rename = "effectStrParam")]
    pub effect_str_param: String,

    #[serde(rename = "effectParam1")]
    pub effect_param1: Option<i64>,

    #[serde(rename = "OPCFJFOAIJD")]
    pub opcfjfoaijd: Option<i64>,

    #[serde(rename = "effectParam2")]
    pub effect_param2: Option<i64>,

    #[serde(rename = "effectParam3")]
    pub effect_param3: Option<i64>,

    #[serde(rename = "BJENHDMHFHK")]
    pub bjenhdmhfhk: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum CardType {
    #[serde(rename = "CHESS_CARD_CHALLENGE")]
    ChessCardChallenge,

    #[serde(rename = "CHESS_CARD_MECHANISM")]
    ChessCardMechanism,

    #[serde(rename = "CHESS_CARD_STRENGTHEN")]
    ChessCardStrengthen,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Dcjcaidoola {
    #[serde(rename = "CARD_QUALITY_GOOD")]
    CardQualityGood,

    #[serde(rename = "CARD_QUALITY_PERCECT")]
    CardQualityPercect,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum TargetType {
    #[serde(rename = "CHESS_CARD_TARGET_ALL")]
    ChessCardTargetAll,

    #[serde(rename = "CHESS_CARD_TARGET_GADGETS")]
    ChessCardTargetGadgets,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Jliilfdpknb {
    #[serde(rename = "CARD_TAG_ELECTRIC")]
    CardTagElectric,

    #[serde(rename = "CARD_TAG_FIRE")]
    CardTagFire,

    #[serde(rename = "CARD_TAG_HELP")]
    CardTagHelp,

    #[serde(rename = "CARD_TAG_ICE")]
    CardTagIce,

    #[serde(rename = "CARD_TAG_OTHER")]
    CardTagOther,

    #[serde(rename = "CARD_TAG_PHYSICS")]
    CardTagPhysics,

    #[serde(rename = "CARD_TAG_WATER")]
    CardTagWater,

    #[serde(rename = "CARD_TAG_WIND")]
    CardTagWind,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Ocemchlbddi {
    #[serde(rename = "CARD_NUMERICAL_BASE")]
    CardNumericalBase,

    #[serde(rename = "CARD_NUMERICAL_PERCENTAGE")]
    CardNumericalPercentage,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Oipgkelhblp {
    #[serde(rename = "CARD_NUMERICAL_ATTACK")]
    CardNumericalAttack,

    #[serde(rename = "CARD_NUMERICAL_ATTACK_INTERVAL")]
    CardNumericalAttackInterval,

    #[serde(rename = "CARD_NUMERICAL_ATTACK_RANGE")]
    CardNumericalAttackRange,

    #[serde(rename = "CARD_NUMERICAL_MASTERY")]
    CardNumericalMastery,
}

pub fn load() -> Result<ActivityChessCardExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityChessCardExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
