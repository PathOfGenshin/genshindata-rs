// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type ActivityChessCardExcelConfigData = Vec<ActivityChessCardExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityChessCardExcelConfigDatum {
    #[serde(rename = "ID")]
    pub id: i64,

    #[serde(rename = "ACBBDPHEFNI")]
    pub acbbdphefni: i64,

    #[serde(rename = "GBDFPKAKMMJ")]
    pub gbdfpkakmmj: Option<Gbdfpkakmmj>,

    #[serde(rename = "KMFBMKDHJAE")]
    pub kmfbmkdhjae: i64,

    #[serde(rename = "HPAHMDJDDKH")]
    pub hpahmdjddkh: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "PFBFJKBJHGG")]
    pub pfbfjkbjhgg: i64,

    #[serde(rename = "DDAKIONEAHP")]
    pub ddakioneahp: i64,

    #[serde(rename = "descParamList")]
    pub desc_param_list: Vec<Vec<f64>>,

    #[serde(rename = "JKOCFKIDHIM")]
    pub jkocfkidhim: Vec<bool>,

    #[serde(rename = "JJCOKBCJIOA")]
    pub jjcokbcjioa: Option<Jjcokbcjioa>,

    #[serde(rename = "LKACCELENFG")]
    pub lkaccelenfg: Option<Lkaccelenfg>,

    #[serde(rename = "FDHLMDDIHMC")]
    pub fdhlmddihmc: Option<f64>,

    #[serde(rename = "costPoints")]
    pub cost_points: Option<i64>,

    #[serde(rename = "cardType")]
    pub card_type: Option<CardType>,

    #[serde(rename = "HGFNCNJKPAH")]
    pub hgfncnjkpah: i64,

    #[serde(rename = "DJMHGOMGKDJ")]
    pub djmhgomgkdj: Djmhgomgkdj,

    #[serde(rename = "BDPEODEBLCD")]
    pub bdpeodeblcd: i64,

    #[serde(rename = "PMHEEKNCJIH")]
    pub pmheekncjih: Option<bool>,

    #[serde(rename = "EIKDGFDDNCE")]
    pub eikdgfddnce: Option<bool>,

    #[serde(rename = "MDKODMBOKIA")]
    pub mdkodmbokia: Vec<Djmhgomgkdj>,

    #[serde(rename = "LIDDOEFCBJA")]
    pub liddoefcbja: Option<bool>,

    #[serde(rename = "ONKHGINPMGB")]
    pub onkhginpmgb: Option<Onkhginpmgb>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Djmhgomgkdj {
    #[serde(rename = "targetType")]
    pub target_type: Option<TargetType>,

    #[serde(rename = "targetParamList")]
    pub target_param_list: Vec<i64>,

    #[serde(rename = "effectType")]
    pub effect_type: Option<String>,

    #[serde(rename = "effectStrParam")]
    pub effect_str_param: String,

    #[serde(rename = "effectParam1")]
    pub effect_param1: Option<i64>,

    #[serde(rename = "FOIPKPDIMFN")]
    pub foipkpdimfn: Option<i64>,

    #[serde(rename = "effectParam2")]
    pub effect_param2: Option<i64>,

    #[serde(rename = "effectParam3")]
    pub effect_param3: Option<i64>,

    #[serde(rename = "IELEGINAJML")]
    pub ieleginajml: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum CardType {
    #[serde(rename = "CHESS_CARD_CHALLENGE")]
    ChessCardChallenge,

    #[serde(rename = "CHESS_CARD_MECHANISM")]
    ChessCardMechanism,

    #[serde(rename = "CHESS_CARD_STRENGTHEN")]
    ChessCardStrengthen,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum TargetType {
    #[serde(rename = "CHESS_CARD_TARGET_ALL")]
    ChessCardTargetAll,

    #[serde(rename = "CHESS_CARD_TARGET_GADGETS")]
    ChessCardTargetGadgets,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Gbdfpkakmmj {
    #[serde(rename = "CARD_TAG_ELECTRIC")]
    CardTagElectric,

    #[serde(rename = "CARD_TAG_FIRE")]
    CardTagFire,

    #[serde(rename = "CARD_TAG_HELP")]
    CardTagHelp,

    #[serde(rename = "CARD_TAG_ICE")]
    CardTagIce,

    #[serde(rename = "CARD_TAG_OTHER")]
    CardTagOther,

    #[serde(rename = "CARD_TAG_PHYSICS")]
    CardTagPhysics,

    #[serde(rename = "CARD_TAG_WATER")]
    CardTagWater,

    #[serde(rename = "CARD_TAG_WIND")]
    CardTagWind,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Jjcokbcjioa {
    #[serde(rename = "CARD_NUMERICAL_ATTACK")]
    CardNumericalAttack,

    #[serde(rename = "CARD_NUMERICAL_ATTACK_INTERVAL")]
    CardNumericalAttackInterval,

    #[serde(rename = "CARD_NUMERICAL_ATTACK_RANGE")]
    CardNumericalAttackRange,

    #[serde(rename = "CARD_NUMERICAL_MASTERY")]
    CardNumericalMastery,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Lkaccelenfg {
    #[serde(rename = "CARD_NUMERICAL_BASE")]
    CardNumericalBase,

    #[serde(rename = "CARD_NUMERICAL_PERCENTAGE")]
    CardNumericalPercentage,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Onkhginpmgb {
    #[serde(rename = "CARD_QUALITY_GOOD")]
    CardQualityGood,

    #[serde(rename = "CARD_QUALITY_PERCECT")]
    CardQualityPercect,
}

pub fn load() -> Result<ActivityChessCardExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityChessCardExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
