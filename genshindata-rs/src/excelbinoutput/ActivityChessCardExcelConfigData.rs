/// This file was automatically generated by quicktype
/// DO NOT MANUALLY EDIT THIS FILE!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityChessCardExcelConfigData = Vec<ActivityChessCardExcelConfigDatum>;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct ActivityChessCardExcelConfigDatum {
    #[serde(rename = "ID")]
    pub id: i64,
    pub number: i64,
    pub tag: Option<Tag>,
    pub need_chess_level: i64,
    pub card_name_text_map_hash: i64,
    pub desc_text_map_hash: i64,
    pub extra_desc_text_map_hash: i64,
    pub extra_desc2_text_map_hash: i64,
    pub desc_param_list: Vec<Vec<f64>>,
    pub desc_param_superposition_list: Vec<bool>,
    pub card_numerical_modification_type: Option<CardNumericalModificationType>,
    pub card_numerical_modification_mode: Option<CardNumericalModificationMode>,
    pub card_numerical_modification_value: Option<f64>,
    pub cost_points: Option<i64>,
    pub card_type: Option<CardType>,
    pub card_count: i64,
    pub effect: Effect,
    pub curse_weight: i64,
    pub is_can_attach_curse: Option<bool>,
    pub is_show_on_pick: Option<bool>,
    pub extra_effect_list: Vec<Effect>,
    pub is_remove_on_pick: Option<bool>,
    pub card_quality_type: Option<CardQualityType>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum CardNumericalModificationMode {
    #[serde(rename = "CARD_NUMERICAL_BASE")]
    CardNumericalBase,
    #[serde(rename = "CARD_NUMERICAL_PERCENTAGE")]
    CardNumericalPercentage,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum CardNumericalModificationType {
    #[serde(rename = "CARD_NUMERICAL_ATTACK")]
    CardNumericalAttack,
    #[serde(rename = "CARD_NUMERICAL_ATTACK_INTERVAL")]
    CardNumericalAttackInterval,
    #[serde(rename = "CARD_NUMERICAL_ATTACK_RANGE")]
    CardNumericalAttackRange,
    #[serde(rename = "CARD_NUMERICAL_MASTERY")]
    CardNumericalMastery,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum CardQualityType {
    #[serde(rename = "CARD_QUALITY_GOOD")]
    CardQualityGood,
    #[serde(rename = "CARD_QUALITY_PERCECT")]
    CardQualityPercect,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum CardType {
    #[serde(rename = "CHESS_CARD_CHALLENGE")]
    ChessCardChallenge,
    #[serde(rename = "CHESS_CARD_MECHANISM")]
    ChessCardMechanism,
    #[serde(rename = "CHESS_CARD_STRENGTHEN")]
    ChessCardStrengthen,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Effect {
    pub target_type: Option<TargetType>,
    pub target_param_list: Vec<i64>,
    pub effect_type: Option<String>,
    pub effect_str_param: String,
    pub effect_param1: Option<i64>,
    pub active_rounds: Option<i64>,
    pub effect_param2: Option<i64>,
    pub effect_param3: Option<i64>,
    pub begin_round: Option<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum TargetType {
    #[serde(rename = "CHESS_CARD_TARGET_ALL")]
    ChessCardTargetAll,
    #[serde(rename = "CHESS_CARD_TARGET_GADGETS")]
    ChessCardTargetGadgets,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Tag {
    #[serde(rename = "CARD_TAG_ELECTRIC")]
    CardTagElectric,
    #[serde(rename = "CARD_TAG_FIRE")]
    CardTagFire,
    #[serde(rename = "CARD_TAG_HELP")]
    CardTagHelp,
    #[serde(rename = "CARD_TAG_ICE")]
    CardTagIce,
    #[serde(rename = "CARD_TAG_OTHER")]
    CardTagOther,
    #[serde(rename = "CARD_TAG_PHYSICS")]
    CardTagPhysics,
    #[serde(rename = "CARD_TAG_WATER")]
    CardTagWater,
    #[serde(rename = "CARD_TAG_WIND")]
    CardTagWind,
}
