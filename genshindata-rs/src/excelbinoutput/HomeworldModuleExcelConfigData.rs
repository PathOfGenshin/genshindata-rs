// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type HomeworldModuleExcelConfigData = Vec<HomeworldModuleExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct HomeworldModuleExcelConfigDatum {
    #[serde(rename = "Id")]
    pub id: i64,

    #[serde(rename = "isFree")]
    pub is_free: Option<bool>,

    #[serde(rename = "AHJGEEAGCPJ")]
    pub ahjgeeagcpj: i64,

    #[serde(rename = "worldSceneId")]
    pub world_scene_id: i64,

    #[serde(rename = "defaultRoomSceneId")]
    pub default_room_scene_id: i64,

    #[serde(rename = "optionalRoomSceneIdVec")]
    pub optional_room_scene_id_vec: Vec<i64>,

    #[serde(rename = "moduleNameTextMapHash")]
    pub module_name_text_map_hash: i64,

    #[serde(rename = "moduleDescTextMapHash")]
    pub module_desc_text_map_hash: i64,

    #[serde(rename = "region")]
    pub region: Vec<String>,

    #[serde(rename = "regionPointPos")]
    pub region_point_pos: Vec<String>,

    #[serde(rename = "smallImageAddr")]
    pub small_image_addr: String,

    #[serde(rename = "bigImageAddr")]
    pub big_image_addr: String,
}

pub fn load() -> Result<HomeworldModuleExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "HomeworldModuleExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
