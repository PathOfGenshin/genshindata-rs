// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type EnvAnimalWeightExcelConfigData = Vec<EnvAnimalWeightExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct EnvAnimalWeightExcelConfigDatum {
    #[serde(rename = "envType")]
    pub env_type: String,

    #[serde(rename = "weightVec")]
    pub weight_vec: Vec<WeightVec>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct WeightVec {
    #[serde(rename = "animalId")]
    pub animal_id: Option<i64>,

    #[serde(rename = "entityType")]
    pub entity_type: Option<EntityType>,

    #[serde(rename = "weight")]
    pub weight: Option<i64>,

    #[serde(rename = "aliveHourMap")]
    pub alive_hour_map: AliveHourMap,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct AliveHourMap {
    #[serde(rename = "18")]
    pub the_18: Option<i64>,

    #[serde(rename = "0")]
    pub the_0: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum EntityType {
    #[serde(rename = "Gadget")]
    Gadget,

    #[serde(rename = "Monster")]
    Monster,
}

pub fn load() -> Result<EnvAnimalWeightExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "EnvAnimalWeightExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
