// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type ActivityGearExcelConfigData = Vec<ActivityGearExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityGearExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "activityId")]
    pub activity_id: i64,

    #[serde(rename = "GOLILJCIEMP")]
    pub goliljciemp: Vec<i64>,

    #[serde(rename = "BJHPOPPDADL")]
    pub bjhpoppdadl: f64,

    #[serde(rename = "KKHDCNOJHOL")]
    pub kkhdcnojhol: f64,

    #[serde(rename = "PNDOEAIPNOA")]
    pub pndoeaipnoa: String,

    #[serde(rename = "ENCABPCJHHO")]
    pub encabpcjhho: String,

    #[serde(rename = "CEJKMNFMDIE")]
    pub cejkmnfmdie: String,

    #[serde(rename = "LCILDKAHBEH")]
    pub lcildkahbeh: String,

    #[serde(rename = "LIJHBLCDJMN")]
    pub lijhblcdjmn: String,

    #[serde(rename = "pushTipsId")]
    pub push_tips_id: i64,

    #[serde(rename = "watcherIdList")]
    pub watcher_id_list: Vec<i64>,

    #[serde(rename = "BCNGELPJKOB")]
    pub bcngelpjkob: f64,
}

pub fn load() -> Result<ActivityGearExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityGearExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
