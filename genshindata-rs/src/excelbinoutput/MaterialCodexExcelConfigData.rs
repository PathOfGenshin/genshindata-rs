// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type MaterialCodexExcelConfigData = Vec<MaterialCodexExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct MaterialCodexExcelConfigDatum {
    #[serde(rename = "Id")]
    pub id: i64,

    #[serde(rename = "materialId")]
    pub material_id: i64,

    #[serde(rename = "SortOrder")]
    pub sort_order: i64,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "icon")]
    pub icon: String,

    #[serde(rename = "FCHFOJLFAHC")]
    pub fchfojlfahc: i64,

    #[serde(rename = "JECKFBFCPJP")]
    pub jeckfbfcpjp: i64,

    #[serde(rename = "EGDGGGLKDPP")]
    pub egdggglkdpp: i64,

    #[serde(rename = "COKJLJPEPFI")]
    pub cokjljpepfi: i64,

    #[serde(rename = "PFIIHIJJCCA")]
    pub pfiihijjcca: Option<i64>,

    #[serde(rename = "isDisuse")]
    pub is_disuse: Option<bool>,

    #[serde(rename = "showOnlyUnlocked")]
    pub show_only_unlocked: Option<bool>,

    #[serde(rename = "type")]
    pub material_codex_excel_config_datum_type: Option<Type>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "CODEX_COOKING_FOOD")]
    CodexCookingFood,

    #[serde(rename = "CODEX_WAR_TROPHIES")]
    CodexWarTrophies,

    #[serde(rename = "CODEX_WIDGET")]
    CodexWidget,
}

pub fn load() -> Result<MaterialCodexExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "MaterialCodexExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
