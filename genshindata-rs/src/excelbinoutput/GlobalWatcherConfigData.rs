/// This file was automatically generated by quicktype
/// DO NOT MANUALLY EDIT THIS FILE!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type GlobalWatcherConfigData = Vec<GlobalWatcherConfigDatum>;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct GlobalWatcherConfigDatum {
    pub predicate_configs: Vec<PredicateConfig>,
    pub id: i64,
    pub trigger_config: TriggerConfig,
    pub progress: i64,
    pub is_disuse: Option<bool>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct PredicateConfig {
    pub predicate_type: Option<PredicateType>,
    pub param_list: Vec<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum PredicateType {
    #[serde(rename = "PREDICATE_CURRENT_AVATAR")]
    PredicateCurrentAvatar,
    #[serde(rename = "PREDICATE_GCG_LEVEL")]
    PredicateGcgLevel,
    #[serde(rename = "PREDICATE_QUEST_FINISH")]
    PredicateQuestFinish,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct TriggerConfig {
    pub trigger_type: String,
    pub param_list: Vec<String>,
}
