// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type HomeWorldAreaComfortExcelConfigData = Vec<HomeWorldAreaComfortExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct HomeWorldAreaComfortExcelConfigDatum {
    #[serde(rename = "configID")]
    pub config_id: i64,

    #[serde(rename = "sceneID")]
    pub scene_id: i64,

    #[serde(rename = "areaID")]
    pub area_id: i64,

    #[serde(rename = "areaType")]
    pub area_type: Option<AreaType>,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "maxComfort")]
    pub max_comfort: i64,

    #[serde(rename = "JOBPKMLPDCA")]
    pub jobpkmlpdca: String,

    #[serde(rename = "EALANKCKFIB")]
    pub ealankckfib: Ealankckfib,

    #[serde(rename = "OHDGEBIDCKB")]
    pub ohdgebidckb: i64,

    #[serde(rename = "NALFEJCIOJP")]
    pub nalfejciojp: i64,

    #[serde(rename = "PGAHCDHPLJG")]
    pub pgahcdhpljg: i64,

    #[serde(rename = "JELKMAFPOAO")]
    pub jelkmafpoao: Vec<f64>,

    #[serde(rename = "JOAAKAKLDBL")]
    pub joaakakldbl: Vec<f64>,

    #[serde(rename = "AOKGBLEBEHN")]
    pub aokgblebehn: String,

    #[serde(rename = "JLOGLBDJKPD")]
    pub jloglbdjkpd: i64,

    #[serde(rename = "BECBOJIACCC")]
    pub becbojiaccc: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum AreaType {
    #[serde(rename = "ExteriorArea")]
    ExteriorArea,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Ealankckfib {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "11.325,3.819,13.572")]
    The11325381913572,

    #[serde(rename = "-11.52,5.3,2.35")]
    The115253235,

    #[serde(rename = "-6.44,1.33,1.52")]
    The644133152,

    #[serde(rename = "6.57,3.47,14")]
    The65734714,
}

pub fn load() -> Result<HomeWorldAreaComfortExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "HomeWorldAreaComfortExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
