// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type LanV2FireworksOverallDataExcelConfigData = Vec<LanV2FireworksOverallDataExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct LanV2FireworksOverallDataExcelConfigDatum {
    #[serde(rename = "scheduleId")]
    pub schedule_id: i64,

    #[serde(rename = "BGFAFOLKEPO")]
    pub bgfafolkepo: i64,

    #[serde(rename = "CFOJDLDOGBP")]
    pub cfojdldogbp: Vec<Cfojdldogbp>,

    #[serde(rename = "KELJEEDPCBF")]
    pub keljeedpcbf: f64,

    #[serde(rename = "FEKBIPJBCEO")]
    pub fekbipjbceo: f64,

    #[serde(rename = "pushTipsId")]
    pub push_tips_id: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Cfojdldogbp {
    #[serde(rename = "NGCBPNFENJJ")]
    pub ngcbpnfenjj: Vec<i64>,

    #[serde(rename = "CBLPGBEDOOK")]
    pub cblpgbedook: Option<i64>,
}

pub fn load() -> Result<LanV2FireworksOverallDataExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "LanV2FireworksOverallDataExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
