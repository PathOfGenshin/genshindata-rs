// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ElectroherculesBattleLevelExcelConfigData = Vec<ElectroherculesBattleLevelExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ElectroherculesBattleLevelExcelConfigDatum {
    #[serde(rename = "levelId")]
    pub level_id: i64,

    #[serde(rename = "PKDKLDFDEMO")]
    pub pkdkldfdemo: Pkdkldfdemo,

    #[serde(rename = "groupId")]
    pub group_id: i64,

    #[serde(rename = "galleryId")]
    pub gallery_id: i64,

    #[serde(rename = "watcherIdList")]
    pub watcher_id_list: Vec<i64>,

    #[serde(rename = "KMJBNNBFBML")]
    pub kmjbnnbfbml: Kmjbnnbfbml,

    #[serde(rename = "EBLCOIIAHAL")]
    pub eblcoiiahal: i64,

    #[serde(rename = "JKILDDHHLMN")]
    pub jkilddhhlmn: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Kmjbnnbfbml {
    #[serde(rename = "ELECTROHERCULES_BATTLE_LEVEL_TYPE_CHALLENGE")]
    ElectroherculesBattleLevelTypeChallenge,

    #[serde(rename = "ELECTROHERCULES_BATTLE_LEVEL_TYPE_GUIDE")]
    ElectroherculesBattleLevelTypeGuide,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Pkdkldfdemo {
    #[serde(rename = "ELECTROHERCULES_BATTLE_DIFFICULTY_HARD")]
    ElectroherculesBattleDifficultyHard,

    #[serde(rename = "ELECTROHERCULES_BATTLE_DIFFICULTY_MASTER")]
    ElectroherculesBattleDifficultyMaster,

    #[serde(rename = "ELECTROHERCULES_BATTLE_DIFFICULTY_NORAML")]
    ElectroherculesBattleDifficultyNoraml,
}

pub fn load() -> Result<ElectroherculesBattleLevelExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ElectroherculesBattleLevelExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
