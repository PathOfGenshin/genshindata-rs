// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type FungusFighterV2MonsterExcelConfigData = Vec<FungusFighterV2MonsterExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct FungusFighterV2MonsterExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "IFHAHGCJGGL")]
    pub ifhahgcjggl: i64,

    #[serde(rename = "unlockLevel")]
    pub unlock_level: i64,

    #[serde(rename = "monsterId")]
    pub monster_id: i64,

    #[serde(rename = "configId")]
    pub config_id: i64,

    #[serde(rename = "iconPath")]
    pub icon_path: String,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "descriptionTextMapHash")]
    pub description_text_map_hash: i64,

    #[serde(rename = "OHMCAHMKMCJ")]
    pub ohmcahmkmcj: i64,

    #[serde(rename = "INJABONHGHP")]
    pub injabonhghp: String,

    #[serde(rename = "GJLLFBIAHOJ")]
    pub gjllfbiahoj: i64,

    #[serde(rename = "JJFGDGIGJPE")]
    pub jjfgdgigjpe: Vec<i64>,
}

pub fn load() -> Result<FungusFighterV2MonsterExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "FungusFighterV2MonsterExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
