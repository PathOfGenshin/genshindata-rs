// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type WidgetGeneralExcelConfigData = Vec<WidgetGeneralExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct WidgetGeneralExcelConfigDatum {
    #[serde(rename = "materialID")]
    pub material_id: i64,

    #[serde(rename = "canUseInOtherWorld")]
    pub can_use_in_other_world: Option<bool>,

    #[serde(rename = "CGKJEOKFNDP")]
    pub cgkjeokfndp: Vec<i64>,

    #[serde(rename = "forbiddenDungeonList")]
    pub forbidden_dungeon_list: Vec<i64>,

    #[serde(rename = "IFCCEJKDOAP")]
    pub ifccejkdoap: Vec<i64>,

    #[serde(rename = "NDIOEMHPBOL")]
    pub ndioemhpbol: Option<bool>,

    #[serde(rename = "canUseInDungeon")]
    pub can_use_in_dungeon: Option<bool>,

    #[serde(rename = "canUseInHomeworld")]
    pub can_use_in_homeworld: Option<bool>,

    #[serde(rename = "canUseInRoom")]
    pub can_use_in_room: Option<bool>,

    #[serde(rename = "canUseInLimitRegion")]
    pub can_use_in_limit_region: Option<bool>,

    #[serde(rename = "canUseWhenFight")]
    pub can_use_when_fight: Option<bool>,

    #[serde(rename = "canUseInUnNormalMoveState")]
    pub can_use_in_un_normal_move_state: Option<bool>,

    #[serde(rename = "canUseInAvatarFocus")]
    pub can_use_in_avatar_focus: Option<bool>,

    #[serde(rename = "canUseWhenCurrentAvatarDead")]
    pub can_use_when_current_avatar_dead: Option<bool>,

    #[serde(rename = "BAEHADBGMJD")]
    pub baehadbgmjd: Option<String>,

    #[serde(rename = "CCIFHFMFCBL")]
    pub ccifhfmfcbl: Option<bool>,
}

pub fn load() -> Result<WidgetGeneralExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "WidgetGeneralExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
