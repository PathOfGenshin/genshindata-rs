// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityPlantFlowerMainExcelConfigData = Vec<ActivityPlantFlowerMainExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityPlantFlowerMainExcelConfigDatum {
    #[serde(rename = "scheduleId")]
    pub schedule_id: i64,

    #[serde(rename = "PMLCINENOML")]
    pub pmlcinenoml: Vec<i64>,

    #[serde(rename = "GFPFABMBNNP")]
    pub gfpfabmbnnp: Vec<i64>,

    #[serde(rename = "AFLEGMGGIMJ")]
    pub aflegmggimj: i64,

    #[serde(rename = "rewardPreviewId")]
    pub reward_preview_id: i64,

    #[serde(rename = "GKAJOIFNGEG")]
    pub gkajoifngeg: i64,

    #[serde(rename = "FEMJBJMFDFG")]
    pub femjbjmfdfg: Vec<i64>,

    #[serde(rename = "openQuestId")]
    pub open_quest_id: i64,

    #[serde(rename = "PAAEIEAIBEH")]
    pub paaeieaibeh: i64,

    #[serde(rename = "dailyConfigIdList")]
    pub daily_config_id_list: Vec<i64>,
}

pub fn load() -> Result<ActivityPlantFlowerMainExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityPlantFlowerMainExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
