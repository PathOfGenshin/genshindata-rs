// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type ChannellerSlabLoopDungeonConditionExcelConfigData = Vec<ChannellerSlabLoopDungeonConditionExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ChannellerSlabLoopDungeonConditionExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "conditionType")]
    pub condition_type: ConditionType,

    #[serde(rename = "icon")]
    pub icon: String,

    #[serde(rename = "conditionParam1")]
    pub condition_param1: Option<i64>,

    #[serde(rename = "exclusiveId")]
    pub exclusive_id: Option<i64>,

    #[serde(rename = "score")]
    pub score: i64,

    #[serde(rename = "conditionParam2")]
    pub condition_param2: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum ConditionType {
    #[serde(rename = "CHANNELLER_SLAB_CONDITION_CONFIG")]
    ChannellerSlabConditionConfig,

    #[serde(rename = "CHANNELLER_SLAB_CONDITION_LIMIT")]
    ChannellerSlabConditionLimit,

    #[serde(rename = "CHANNELLER_SLAB_LINEUP_REPLACE")]
    ChannellerSlabLineupReplace,
}

pub fn load() -> Result<ChannellerSlabLoopDungeonConditionExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ChannellerSlabLoopDungeonConditionExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
