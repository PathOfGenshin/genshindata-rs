// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type FurnitureSuiteExcelConfigData = Vec<FurnitureSuiteExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct FurnitureSuiteExcelConfigDatum {
    #[serde(rename = "suiteID")]
    pub suite_id: i64,

    #[serde(rename = "jsonName")]
    pub json_name: String,

    #[serde(rename = "suiteNameTextMapHash")]
    pub suite_name_text_map_hash: i64,

    #[serde(rename = "DANHEFLIADG")]
    pub danhefliadg: i64,

    #[serde(rename = "favoriteNpcExcelIdVec")]
    pub favorite_npc_excel_id_vec: Vec<i64>,

    #[serde(rename = "GBDAPLKHCHE")]
    pub gbdaplkhche: String,

    #[serde(rename = "furnType")]
    pub furn_type: Vec<i64>,

    #[serde(rename = "itemIcon")]
    pub item_icon: String,

    #[serde(rename = "mapIcon")]
    pub map_icon: MapIcon,

    #[serde(rename = "ELHKGHAMBMG")]
    pub elhkghambmg: Option<f64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum MapIcon {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "UI_MarkPoint_Homeworld_Suit")]
    UiMarkPointHomeworldSuit,
}

pub fn load() -> Result<FurnitureSuiteExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "FurnitureSuiteExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
