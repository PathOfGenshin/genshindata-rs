// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type GadgetPropExcelConfigData = Vec<GadgetPropExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GadgetPropExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "hp")]
    pub hp: f64,

    #[serde(rename = "hpCurve")]
    pub hp_curve: Curve,

    #[serde(rename = "attack")]
    pub attack: Option<f64>,

    #[serde(rename = "attackCurve")]
    pub attack_curve: AttackCurve,

    #[serde(rename = "defense")]
    pub defense: Option<f64>,

    #[serde(rename = "defenseCurve")]
    pub defense_curve: Curve,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum AttackCurve {
    #[serde(rename = "GROW_CURVE_ATTACK")]
    GrowCurveAttack,

    #[serde(rename = "GROW_CURVE_HP")]
    GrowCurveHp,

    #[serde(rename = "GROW_CURVE_TOWERATK")]
    GrowCurveToweratk,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Curve {
    #[serde(rename = "GROW_CURVE_DEFENDING")]
    GrowCurveDefending,

    #[serde(rename = "GROW_CURVE_DEFENSE")]
    GrowCurveDefense,

    #[serde(rename = "GROW_CURVE_HP")]
    GrowCurveHp,
}

pub fn load() -> Result<GadgetPropExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GadgetPropExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
