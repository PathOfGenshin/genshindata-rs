// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type CustomGadgetSlotLevelTagConfigData = Vec<CustomGadgetSlotLevelTagConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct CustomGadgetSlotLevelTagConfigDatum {
    #[serde(rename = "ID")]
    pub id: i64,

    #[serde(rename = "CFJPENGJFDG")]
    pub cfjpengjfdg: String,

    #[serde(rename = "BBCFAAINDOE")]
    pub bbcfaaindoe: Vec<Bbcfaaindoe>,

    #[serde(rename = "EKBFMCGAGDJ")]
    pub ekbfmcgagdj: i64,

    #[serde(rename = "DCBDHKECGCN")]
    pub dcbdhkecgcn: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Bbcfaaindoe {
    #[serde(rename = "OENADKFEOOC")]
    pub oenadkfeooc: Oenadkfeooc,

    #[serde(rename = "OEOKNHIHMBH")]
    pub oeoknhihmbh: Vec<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Oenadkfeooc {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "LeftHill")]
    LeftHill,

    #[serde(rename = "RightHill")]
    RightHill,
}

pub fn load() -> Result<CustomGadgetSlotLevelTagConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "CustomGadgetSlotLevelTagConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
