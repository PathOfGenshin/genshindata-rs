// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type CustomGadgetSlotLevelTagConfigData = Vec<CustomGadgetSlotLevelTagConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct CustomGadgetSlotLevelTagConfigDatum {
    #[serde(rename = "ID")]
    pub id: i64,

    #[serde(rename = "CCNKPAMPAHM")]
    pub ccnkpampahm: String,

    #[serde(rename = "EONMJDBDHNN")]
    pub eonmjdbdhnn: Vec<Eonmjdbdhnn>,

    #[serde(rename = "JKOJKPKDCEB")]
    pub jkojkpkdceb: i64,

    #[serde(rename = "LBPAEMGKLIK")]
    pub lbpaemgklik: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Eonmjdbdhnn {
    #[serde(rename = "ODDOLIJEJDC")]
    pub oddolijejdc: Oddolijejdc,

    #[serde(rename = "CCFMMIIDCMN")]
    pub ccfmmiidcmn: Vec<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Oddolijejdc {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "LeftHill")]
    LeftHill,

    #[serde(rename = "RightHill")]
    RightHill,
}

pub fn load() -> Result<CustomGadgetSlotLevelTagConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "CustomGadgetSlotLevelTagConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
