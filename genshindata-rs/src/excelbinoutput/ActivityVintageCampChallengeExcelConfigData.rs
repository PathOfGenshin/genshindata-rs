// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityVintageCampChallengeExcelConfigData = Vec<ActivityVintageCampChallengeExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityVintageCampChallengeExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "CMBPCEKICHA")]
    pub cmbpcekicha: i64,

    #[serde(rename = "openDay")]
    pub open_day: i64,

    #[serde(rename = "LCMBMAGICPG")]
    pub lcmbmagicpg: i64,

    #[serde(rename = "PILMHKEJJNI")]
    pub pilmhkejjni: i64,

    #[serde(rename = "rewardId")]
    pub reward_id: i64,

    #[serde(rename = "CDOPHKLNEPI")]
    pub cdophklnepi: Vec<String>,

    #[serde(rename = "KAHAIAHOPMH")]
    pub kahaiahopmh: Vec<i64>,

    #[serde(rename = "PKOFNGDFPKM")]
    pub pkofngdfpkm: String,

    #[serde(rename = "EDCLMONBKMK")]
    pub edclmonbkmk: Vec<i64>,

    #[serde(rename = "KAANGCOKLAP")]
    pub kaangcoklap: i64,

    #[serde(rename = "EOPGNNKMNGO")]
    pub eopgnnkmngo: i64,
}

pub fn load() -> Result<ActivityVintageCampChallengeExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityVintageCampChallengeExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
