// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityExcelConfigData = Vec<ActivityExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityExcelConfigDatum {
    #[serde(rename = "ActivityId")]
    pub activity_id: i64,

    #[serde(rename = "Type")]
    pub activity_excel_config_datum_type: String,

    #[serde(rename = "DestroyItem")]
    pub destroy_item: Vec<DestroyItem>,

    #[serde(rename = "NameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "ActivitySceneTag")]
    pub activity_scene_tag: String,

    #[serde(rename = "IsLoadTerrain")]
    pub is_load_terrain: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct DestroyItem {
    #[serde(rename = "ItemId")]
    pub item_id: Vec<i64>,
}

pub fn load() -> Result<ActivityExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
