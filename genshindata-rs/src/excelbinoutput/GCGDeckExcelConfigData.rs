// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type GcgDeckExcelConfigData = Vec<GcgDeckExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GcgDeckExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "CGKPJKFEEBJ")]
    pub cgkpjkfeebj: Vec<i64>,

    #[serde(rename = "ADBGJDKKLIL")]
    pub adbgjdkklil: Vec<i64>,

    #[serde(rename = "HCHGNECBDLD")]
    pub hchgnecbdld: Vec<Option<serde_json::Value>>,

    #[serde(rename = "GEGECAJGKAC")]
    pub gegecajgkac: Vec<Option<serde_json::Value>>,

    #[serde(rename = "IMKIGMJBMJJ")]
    pub imkigmjbmjj: Vec<Imkigmjbmjj>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Imkigmjbmjj {
    #[serde(rename = "id")]
    pub id: Option<i64>,

    #[serde(rename = "GNLOPIADCCA")]
    pub gnlopiadcca: Option<i64>,
}

pub fn load() -> Result<GcgDeckExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GCGDeckExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
