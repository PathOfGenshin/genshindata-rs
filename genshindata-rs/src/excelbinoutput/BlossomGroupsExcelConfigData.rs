// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type BlossomGroupsExcelConfigData = Vec<BlossomGroupsExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct BlossomGroupsExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "cityId")]
    pub city_id: i64,

    #[serde(rename = "sectionId")]
    pub section_id: i64,

    #[serde(rename = "refreshTypeVec")]
    pub refresh_type_vec: Vec<i64>,

    #[serde(rename = "newGroupVec")]
    pub new_group_vec: Vec<i64>,

    #[serde(rename = "decorateGroupVec")]
    pub decorate_group_vec: Vec<i64>,

    #[serde(rename = "nextCampIdVec")]
    pub next_camp_id_vec: Vec<i64>,

    #[serde(rename = "isSafe")]
    pub is_safe: Option<bool>,

    #[serde(rename = "isInitialRefresh")]
    pub is_initial_refresh: Option<bool>,

    #[serde(rename = "finishProgress")]
    pub finish_progress: i64,

    #[serde(rename = "limitLevel")]
    pub limit_level: i64,

    #[serde(rename = "fightRadius")]
    pub fight_radius: i64,

    #[serde(rename = "remindRadius")]
    pub remind_radius: i64,

    #[serde(rename = "blossomTipsTextMapHash")]
    pub blossom_tips_text_map_hash: i64,

    #[serde(rename = "delayUnloadSec")]
    pub delay_unload_sec: Option<i64>,
}

pub fn load() -> Result<BlossomGroupsExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "BlossomGroupsExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
