// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type H5ActivityWatcherExcelConfigData = Vec<H5ActivityWatcherExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct H5ActivityWatcherExcelConfigDatum {
    #[serde(rename = "h5ActivityId")]
    pub h5_activity_id: i64,

    #[serde(rename = "condComb")]
    pub cond_comb: CondComb,

    #[serde(rename = "condList")]
    pub cond_list: Vec<CondList>,

    #[serde(rename = "isDailyRefresh")]
    pub is_daily_refresh: Option<bool>,

    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "triggerConfig")]
    pub trigger_config: TriggerConfig,

    #[serde(rename = "progress")]
    pub progress: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct CondList {
    #[serde(rename = "type")]
    pub cond_list_type: Option<Type>,

    #[serde(rename = "paramStr")]
    pub param_str: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct TriggerConfig {
    #[serde(rename = "triggerType")]
    pub trigger_type: String,

    #[serde(rename = "paramList")]
    pub param_list: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum CondComb {
    #[serde(rename = "LOGIC_AND")]
    LogicAnd,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "H5_ACTIVITY_COND_DAY_COUNT_GREAT_EQUAL")]
    H5ActivityCondDayCountGreatEqual,
}

pub fn load() -> Result<H5ActivityWatcherExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "H5ActivityWatcherExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
