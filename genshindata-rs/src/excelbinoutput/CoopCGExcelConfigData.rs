// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type CoopCgExcelConfigData = Vec<CoopCgExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct CoopCgExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "chapterId")]
    pub chapter_id: i64,

    #[serde(rename = "unlockPointId")]
    pub unlock_point_id: i64,

    #[serde(rename = "cgType")]
    pub cg_type: CgType,

    #[serde(rename = "unlockCond")]
    pub unlock_cond: Vec<UnlockCond>,

    #[serde(rename = "showImageHash")]
    pub show_image_hash: i64,

    #[serde(rename = "showImageSmallHash")]
    pub show_image_small_hash: i64,

    #[serde(rename = "cgNameTextMapHash")]
    pub cg_name_text_map_hash: i64,

    #[serde(rename = "cgDesTextMapHash")]
    pub cg_des_text_map_hash: i64,

    #[serde(rename = "sortId")]
    pub sort_id: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct UnlockCond {
    #[serde(rename = "condType")]
    pub cond_type: Option<CondType>,

    #[serde(rename = "args")]
    pub args: Vec<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum CgType {
    #[serde(rename = "CG_FEMALE")]
    CgFemale,

    #[serde(rename = "CG_MALE")]
    CgMale,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum CondType {
    #[serde(rename = "COOP_COND_COOP_POINT_FINISH")]
    CoopCondCoopPointFinish,
}

pub fn load() -> Result<CoopCgExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "CoopCGExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
