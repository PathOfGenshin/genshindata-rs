// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type GalleryExcelConfigData = Vec<GalleryExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GalleryExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "type")]
    pub gallery_excel_config_datum_type: String,

    #[serde(rename = "param")]
    pub param: Vec<String>,

    #[serde(rename = "canInterruptByClient")]
    pub can_interrupt_by_client: Option<bool>,

    #[serde(rename = "groupId")]
    pub group_id: Vec<i64>,

    #[serde(rename = "DJMGFNGIHKE")]
    pub djmgfngihke: Option<i64>,

    #[serde(rename = "abilityGroup")]
    pub ability_group: AbilityGroup,

    #[serde(rename = "abilityGroupList")]
    pub ability_group_list: Vec<String>,

    #[serde(rename = "limitRegion")]
    pub limit_region: String,

    #[serde(rename = "centerPosList")]
    pub center_pos_list: Vec<f64>,

    #[serde(rename = "duration")]
    pub duration: Option<i64>,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "galleryNameTextMapHash")]
    pub gallery_name_text_map_hash: i64,

    #[serde(rename = "galleryMSGTextMapHash")]
    pub gallery_msg_text_map_hash: i64,

    #[serde(rename = "pic")]
    pub pic: Pic,

    #[serde(rename = "targetTextMapHash")]
    pub target_text_map_hash: i64,

    #[serde(rename = "startAudioValues")]
    pub start_audio_values: String,

    #[serde(rename = "endAudioValues")]
    pub end_audio_values: String,

    #[serde(rename = "selectableAbilityGroups")]
    pub selectable_ability_groups: Vec<String>,

    #[serde(rename = "HHIPHKLJKEL")]
    pub hhiphkljkel: Vec<String>,

    #[serde(rename = "AOHDBDMFJBG")]
    pub aohdbdmfjbg: Vec<String>,

    #[serde(rename = "HGOGONKJMJM")]
    pub hgogonkjmjm: Vec<f64>,

    #[serde(rename = "isEnableSinglePrepare")]
    pub is_enable_single_prepare: Option<bool>,

    #[serde(rename = "singlePrepareTime")]
    pub single_prepare_time: Option<i64>,

    #[serde(rename = "sceneId")]
    pub scene_id: Option<i64>,

    #[serde(rename = "controlGroupId")]
    pub control_group_id: Option<i64>,

    #[serde(rename = "revivePointGroupId")]
    pub revive_point_group_id: Option<i64>,

    #[serde(rename = "revivePointConfigId")]
    pub revive_point_config_id: Option<i64>,

    #[serde(rename = "centerRadius")]
    pub center_radius: Option<i64>,

    #[serde(rename = "PMAFEMFJGPK")]
    pub pmafemfjgpk: Option<bool>,

    #[serde(rename = "BFKJFJOOAJH")]
    pub bfkjfjooajh: Option<i64>,

    #[serde(rename = "LNNMGAEHIND")]
    pub lnnmgaehind: Option<bool>,

    #[serde(rename = "NOEGCIBMBBA")]
    pub noegcibmbba: Option<i64>,

    #[serde(rename = "isEnableMpPrepare")]
    pub is_enable_mp_prepare: Option<bool>,

    #[serde(rename = "JDCNPFIGHDG")]
    pub jdcnpfighdg: Option<bool>,

    #[serde(rename = "LOMFJCAIHAP")]
    pub lomfjcaihap: Option<f64>,

    #[serde(rename = "mpPrepareTime")]
    pub mp_prepare_time: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum AbilityGroup {
    #[serde(rename = "AbilityGroup_LudiHarpastum_Set_01")]
    AbilityGroupLudiHarpastumSet01,

    #[serde(rename = "ActivityAbility_FleurFair_FlyBall")]
    ActivityAbilityFleurFairFlyBall,

    #[serde(rename = "ActivityAbility_WindFlora_BalloonShoot")]
    ActivityAbilityWindFloraBalloonShoot,

    #[serde(rename = "ActivityAbility_WindFlora_RecordFloorMemory")]
    ActivityAbilityWindFloraRecordFloorMemory,

    #[serde(rename = "ActivityAbility_WindFlora_Wudi")]
    ActivityAbilityWindFloraWudi,

    #[serde(rename = "")]
    Empty,

    #[serde(rename = "HideSeek_AllPlayer_InitData")]
    HideSeekAllPlayerInitData,

    #[serde(rename = "HideSeek_AllPlayer_InitData_V2")]
    HideSeekAllPlayerInitDataV2,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Pic {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "UI_Activity_FleurFair_Dungeon_01")]
    UiActivityFleurFairDungeon01,

    #[serde(rename = "UI_Activity_FleurFair_Dungeon_02")]
    UiActivityFleurFairDungeon02,

    #[serde(rename = "UI_Activity_FleurFair_Dungeon_03")]
    UiActivityFleurFairDungeon03,

    #[serde(rename = "UI_Activity_FleurFair_Dungeon_04")]
    UiActivityFleurFairDungeon04,

    #[serde(rename = "UI_Activity_FleurFair_Dungeon_05")]
    UiActivityFleurFairDungeon05,

    #[serde(rename = "UI_Activity_FleurFair_Dungeon_06")]
    UiActivityFleurFairDungeon06,

    #[serde(rename = "UI_Activity_FleurFair_Dungeon_07")]
    UiActivityFleurFairDungeon07,

    #[serde(rename = "UI_Activity_FleurFair_Dungeon_08")]
    UiActivityFleurFairDungeon08,
}

pub fn load() -> Result<GalleryExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GalleryExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
