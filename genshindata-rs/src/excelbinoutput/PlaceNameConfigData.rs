// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type PlaceNameConfigData = Vec<PlaceNameConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct PlaceNameConfigDatum {
    #[serde(rename = "ID")]
    pub id: i64,

    #[serde(rename = "FPJFGLANLCO")]
    pub fpjfglanlco: Option<Fpjfglanlco>,

    #[serde(rename = "NEBJHNBNKGL")]
    pub nebjhnbnkgl: String,

    #[serde(rename = "conditionType")]
    pub condition_type: ConditionType,

    #[serde(rename = "JLGAAFMPJAE")]
    pub jlgaafmpjae: String,

    #[serde(rename = "GBDCPABMGOB")]
    pub gbdcpabmgob: String,

    #[serde(rename = "actionType")]
    pub action_type: ActionType,

    #[serde(rename = "DDELCDHFEMF")]
    pub ddelcdhfemf: i64,

    #[serde(rename = "type")]
    pub place_name_config_datum_type: Option<Type>,

    #[serde(rename = "EFHGIIIKNID")]
    pub efhgiiiknid: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum ActionType {
    #[serde(rename = "Close")]
    Close,

    #[serde(rename = "Open")]
    Open,

    #[serde(rename = "SwitchName")]
    SwitchName,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum ConditionType {
    #[serde(rename = "ErosionArea")]
    ErosionArea,

    #[serde(rename = "MapArea")]
    MapArea,

    #[serde(rename = "Quest")]
    Quest,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Fpjfglanlco {
    #[serde(rename = "Abyssalisle")]
    Abyssalisle,

    #[serde(rename = "MichiaeMatsuri")]
    MichiaeMatsuri,

    #[serde(rename = "TheChasm")]
    TheChasm,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "SubArea")]
    SubArea,
}

pub fn load() -> Result<PlaceNameConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "PlaceNameConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
