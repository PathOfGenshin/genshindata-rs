/// This file was automatically generated by quicktype
/// DO NOT MANUALLY EDIT THIS FILE!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type PlaceNameConfigData = Vec<PlaceNameConfigDatum>;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct PlaceNameConfigDatum {
    #[serde(rename = "ID")]
    pub id: i64,
    pub map_tag_type: Option<MapTagType>,
    #[serde(rename = "placeNameID")]
    pub place_name_id: String,
    pub condition_type: ConditionType,
    pub condition_param1: String,
    pub condition_param2: String,
    pub action_type: ActionType,
    pub switch_name_text_map_hash: i64,
    #[serde(rename = "type")]
    pub place_name_config_datum_type: Option<Type>,
    #[serde(rename = "subAreaID")]
    pub sub_area_id: Option<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum ActionType {
    Close,
    Open,
    #[serde(rename = "SwitchName")]
    SwitchName,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum ConditionType {
    #[serde(rename = "ErosionArea")]
    ErosionArea,
    #[serde(rename = "MapArea")]
    MapArea,
    Quest,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum MapTagType {
    Abyssalisle,
    #[serde(rename = "MichiaeMatsuri")]
    MichiaeMatsuri,
    Penumbra,
    #[serde(rename = "TheChasm")]
    TheChasm,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "SubArea")]
    SubArea,
}
