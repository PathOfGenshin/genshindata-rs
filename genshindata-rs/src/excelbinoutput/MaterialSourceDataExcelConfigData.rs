// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type MaterialSourceDataExcelConfigData = Vec<MaterialSourceDataExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct MaterialSourceDataExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "dungeonList")]
    pub dungeon_list: Vec<i64>,

    #[serde(rename = "JPPEAFMACGK")]
    pub jppeafmacgk: Vec<Jppeafmacgk>,

    #[serde(rename = "AKAIKNIJEKJ")]
    pub akaiknijekj: Vec<i64>,

    #[serde(rename = "BJDOMLFDMDB")]
    pub bjdomlfdmdb: Vec<Bjdomlfdmdb>,

    #[serde(rename = "AEDMMKCPBOG")]
    pub aedmmkcpbog: Vec<i64>,

    #[serde(rename = "jumpList")]
    pub jump_list: Vec<i64>,

    #[serde(rename = "textList")]
    pub text_list: Vec<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Jppeafmacgk {
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Bjdomlfdmdb {
    #[serde(rename = "JUMP_INVESTIGATION")]
    JumpInvestigation,

    #[serde(rename = "JUMP_MALL")]
    JumpMall,
}

pub fn load() -> Result<MaterialSourceDataExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "MaterialSourceDataExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
