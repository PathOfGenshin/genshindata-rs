// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type MaterialSourceDataExcelConfigData = Vec<MaterialSourceDataExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct MaterialSourceDataExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "dungeonList")]
    pub dungeon_list: Vec<i64>,

    #[serde(rename = "BGAAIGBMLMO")]
    pub bgaaigbmlmo: Vec<Bgaaigbmlmo>,

    #[serde(rename = "JAAHBKDEOMM")]
    pub jaahbkdeomm: Vec<i64>,

    #[serde(rename = "COKNAHGNGAL")]
    pub coknahgngal: Vec<Coknahgngal>,

    #[serde(rename = "DBPNKDMLMDJ")]
    pub dbpnkdmlmdj: Vec<i64>,

    #[serde(rename = "jumpList")]
    pub jump_list: Vec<i64>,

    #[serde(rename = "textList")]
    pub text_list: Vec<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Bgaaigbmlmo {
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Coknahgngal {
    #[serde(rename = "JUMP_INVESTIGATION")]
    JumpInvestigation,

    #[serde(rename = "JUMP_MALL")]
    JumpMall,
}

pub fn load() -> Result<MaterialSourceDataExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "MaterialSourceDataExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
