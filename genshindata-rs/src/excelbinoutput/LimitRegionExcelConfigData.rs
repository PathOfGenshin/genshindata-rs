// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type LimitRegionExcelConfigData = Vec<LimitRegionExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct LimitRegionExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "sceneId")]
    pub scene_id: i64,

    #[serde(rename = "type")]
    pub limit_region_excel_config_datum_type: Type,

    #[serde(rename = "HHMABOFFKNN")]
    pub hhmaboffknn: Option<String>,

    #[serde(rename = "order")]
    pub order: Option<i64>,

    #[serde(rename = "KCBGFJKOAEL")]
    pub kcbgfjkoael: Option<i64>,

    #[serde(rename = "JLJGCBJCHPG")]
    pub jljgcbjchpg: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "LIMIT_REGION_TYPE_ACTIVITY")]
    LimitRegionTypeActivity,

    #[serde(rename = "LIMIT_REGION_TYPE_BIGWORLD")]
    LimitRegionTypeBigworld,

    #[serde(rename = "LIMIT_REGION_TYPE_HOMEWORLD")]
    LimitRegionTypeHomeworld,
}

pub fn load() -> Result<LimitRegionExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "LimitRegionExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
