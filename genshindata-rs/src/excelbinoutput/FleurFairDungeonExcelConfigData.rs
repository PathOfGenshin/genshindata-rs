// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type FleurFairDungeonExcelConfigData = Vec<FleurFairDungeonExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct FleurFairDungeonExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "sectionId")]
    pub section_id: i64,

    #[serde(rename = "openDay")]
    pub open_day: i64,

    #[serde(rename = "obtainCoinLimit")]
    pub obtain_coin_limit: i64,

    #[serde(rename = "activityId")]
    pub activity_id: i64,

    #[serde(rename = "watcherIdList")]
    pub watcher_id_list: Vec<i64>,

    #[serde(rename = "dungeonId")]
    pub dungeon_id: i64,

    #[serde(rename = "miniGameList")]
    pub mini_game_list: Vec<i64>,

    #[serde(rename = "monsterList")]
    pub monster_list: Vec<i64>,

    #[serde(rename = "energyGradeList")]
    pub energy_grade_list: Vec<i64>,

    #[serde(rename = "initialEnergy")]
    pub initial_energy: i64,

    #[serde(rename = "energyLimit")]
    pub energy_limit: i64,

    #[serde(rename = "successRewardId")]
    pub success_reward_id: i64,

    #[serde(rename = "failureRewardId")]
    pub failure_reward_id: i64,

    #[serde(rename = "titleTextMapHash")]
    pub title_text_map_hash: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,
}

pub fn load() -> Result<FleurFairDungeonExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "FleurFairDungeonExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
