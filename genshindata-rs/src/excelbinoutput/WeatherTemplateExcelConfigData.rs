// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type WeatherTemplateExcelConfigData = Vec<WeatherTemplateExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct WeatherTemplateExcelConfigDatum {
    #[serde(rename = "templateName")]
    pub template_name: String,

    #[serde(rename = "weatherType")]
    pub weather_type: WeatherType,

    #[serde(rename = "sunnyProb")]
    pub sunny_prob: Option<f64>,

    #[serde(rename = "cloudyProb")]
    pub cloudy_prob: Option<f64>,

    #[serde(rename = "rainProb")]
    pub rain_prob: Option<f64>,

    #[serde(rename = "thunderstormProb")]
    pub thunderstorm_prob: Option<f64>,

    #[serde(rename = "snowProb")]
    pub snow_prob: Option<f64>,

    #[serde(rename = "mistProb")]
    pub mist_prob: Option<f64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum WeatherType {
    #[serde(rename = "CLIMATE_CLOUDY")]
    ClimateCloudy,

    #[serde(rename = "CLIMATE_MIST")]
    ClimateMist,

    #[serde(rename = "CLIMATE_RAIN")]
    ClimateRain,

    #[serde(rename = "CLIMATE_SNOW")]
    ClimateSnow,

    #[serde(rename = "CLIMATE_SUNNY")]
    ClimateSunny,

    #[serde(rename = "CLIMATE_THUNDERSTORM")]
    ClimateThunderstorm,
}

pub fn load() -> Result<WeatherTemplateExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "WeatherTemplateExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
