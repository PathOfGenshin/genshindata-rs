// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type HomeWorldPlantExcelConfigData = Vec<HomeWorldPlantExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct HomeWorldPlantExcelConfigDatum {
    #[serde(rename = "NOLEBNOLICE")]
    pub nolebnolice: i64,

    #[serde(rename = "JDCAFOMGFKO")]
    pub jdcafomgfko: Vec<i64>,

    #[serde(rename = "CMDJNNPNOBM")]
    pub cmdjnnpnobm: Option<i64>,

    #[serde(rename = "CFALOPGHBNP")]
    pub cfalopghbnp: Option<i64>,

    #[serde(rename = "dropID")]
    pub drop_id: Option<i64>,

    #[serde(rename = "PCBGKJGGGJC")]
    pub pcbgkjgggjc: Vec<Pcbgkjgggjc>,

    #[serde(rename = "IDPDBNMBEJA")]
    pub idpdbnmbeja: i64,

    #[serde(rename = "time")]
    pub time: i64,

    #[serde(rename = "NHHFMNAMMEB")]
    pub nhhfmnammeb: i64,

    #[serde(rename = "DBKEIEDJJGP")]
    pub dbkeiedjjgp: i64,

    #[serde(rename = "BPAPEFCOLPH")]
    pub bpapefcolph: i64,

    #[serde(rename = "order")]
    pub order: i64,

    #[serde(rename = "inteeIconName")]
    pub intee_icon_name: InteeIconName,

    #[serde(rename = "GFIPOJOGCKD")]
    pub gfipojogckd: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Pcbgkjgggjc {
    #[serde(rename = "CMDJNNPNOBM")]
    pub cmdjnnpnobm: Option<i64>,

    #[serde(rename = "CFALOPGHBNP")]
    pub cfalopghbnp: Option<i64>,

    #[serde(rename = "dropID")]
    pub drop_id: Option<i64>,

    #[serde(rename = "weight")]
    pub weight: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum InteeIconName {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "UI_Icon_Item_GrowFlowers")]
    UiIconItemGrowFlowers,
}

pub fn load() -> Result<HomeWorldPlantExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "HomeWorldPlantExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
