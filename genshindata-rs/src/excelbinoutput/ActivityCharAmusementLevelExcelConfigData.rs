// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityCharAmusementLevelExcelConfigData = Vec<ActivityCharAmusementLevelExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityCharAmusementLevelExcelConfigDatum {
    #[serde(rename = "levelId")]
    pub level_id: i64,

    #[serde(rename = "weight")]
    pub weight: i64,

    #[serde(rename = "KMJBNNBFBML")]
    pub kmjbnnbfbml: Kmjbnnbfbml,

    #[serde(rename = "galleryId")]
    pub gallery_id: i64,

    #[serde(rename = "EKDNHBNBNBK")]
    pub ekdnhbnbnbk: i64,

    #[serde(rename = "NNDHNKHDNFG")]
    pub nndhnkhdnfg: i64,

    #[serde(rename = "OBAOGFIILAL")]
    pub obaogfiilal: Vec<i64>,

    #[serde(rename = "CHEPEFOEAHN")]
    pub chepefoeahn: String,

    #[serde(rename = "levelNameTextMapHash")]
    pub level_name_text_map_hash: i64,

    #[serde(rename = "levelDescTextMapHash")]
    pub level_desc_text_map_hash: i64,

    #[serde(rename = "JLCEFDOFDGF")]
    pub jlcefdofdgf: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Kmjbnnbfbml {
    #[serde(rename = "LEVEL_TYPE_AMUSEMENT")]
    LevelTypeAmusement,

    #[serde(rename = "LEVEL_TYPE_FIGHT")]
    LevelTypeFight,
}

pub fn load() -> Result<ActivityCharAmusementLevelExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityCharAmusementLevelExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
