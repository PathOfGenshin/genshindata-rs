// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type MonsterRelOverloadExcelConfigData = Vec<MonsterRelOverloadExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct MonsterRelOverloadExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "BHJFOEBAOAJ")]
    pub bhjfoebaoaj: Bhjfoebaoaj,

    #[serde(rename = "BFFGBGKFKPH")]
    pub bffgbgkfkph: Bffgbgkfkph,

    #[serde(rename = "LOPAABGELAM")]
    pub lopaabgelam: Vec<Lopaabgelam>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Lopaabgelam {
    #[serde(rename = "paramList")]
    pub param_list: Vec<i64>,

    #[serde(rename = "DCGJDEABNHO")]
    pub dcgjdeabnho: Dcgjdeabnho,

    #[serde(rename = "monsterRarity")]
    pub monster_rarity: MonsterRarity,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Bffgbgkfkph {
    #[serde(rename = "_MONSTER_FUNGUSSTATE_")]
    MonsterFungusstate,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Bhjfoebaoaj {
    #[serde(rename = "MONSTER_POLY_DROP_GV")]
    MonsterPolyDropGv,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Dcgjdeabnho {
    #[serde(rename = "异化蕈兽")]
    Dcgjdeabnho,

    #[serde(rename = "蕈兽")]
    Empty,

    #[serde(rename = "大异化蕈兽")]
    Fluffy,

    #[serde(rename = "大蕈兽")]
    Purple,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum MonsterRarity {
    #[serde(rename = "MONSTER_RARITY_ELITE_MONSTER")]
    MonsterRarityEliteMonster,

    #[serde(rename = "MONSTER_RARITY_SMALL_MONSTER")]
    MonsterRaritySmallMonster,
}

pub fn load() -> Result<MonsterRelOverloadExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "MonsterRelOverloadExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
