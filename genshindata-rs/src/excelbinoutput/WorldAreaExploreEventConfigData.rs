// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type WorldAreaExploreEventConfigData = Vec<WorldAreaExploreEventConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct WorldAreaExploreEventConfigDatum {
    #[serde(rename = "EventID")]
    pub event_id: i64,

    #[serde(rename = "SceneID")]
    pub scene_id: i64,

    #[serde(rename = "AreaID")]
    pub area_id: i64,

    #[serde(rename = "EventType")]
    pub event_type: EventType,

    #[serde(rename = "Param")]
    pub param: Vec<String>,

    #[serde(rename = "ExploreWeight")]
    pub explore_weight: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum EventType {
    #[serde(rename = "EXPLORE_EVENT_CLEAR_GROUP_MONSTER")]
    ExploreEventClearGroupMonster,

    #[serde(rename = "EXPLORE_EVENT_ENTER_FORCE")]
    ExploreEventEnterForce,

    #[serde(rename = "EXPLORE_EVENT_ITEM_ADD")]
    ExploreEventItemAdd,

    #[serde(rename = "EXPLORE_EVENT_OPEN_CHEST")]
    ExploreEventOpenChest,

    #[serde(rename = "EXPLORE_EVENT_UNLOCK_POINT")]
    ExploreEventUnlockPoint,
}

pub fn load() -> Result<WorldAreaExploreEventConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "WorldAreaExploreEventConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
