// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type NewActivityPreviewConfigData = Vec<NewActivityPreviewConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct NewActivityPreviewConfigDatum {
    #[serde(rename = "activityID")]
    pub activity_id: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "DCFODBJCHFN")]
    pub dcfodbjchfn: i64,

    #[serde(rename = "GGMGGBEBDKI")]
    pub ggmggbebdki: i64,

    #[serde(rename = "rewardPreviewID")]
    pub reward_preview_id: Option<i64>,

    #[serde(rename = "LKOOIMNBDJD")]
    pub lkooimnbdjd: Option<i64>,

    #[serde(rename = "CNONHCPNLMC")]
    pub cnonhcpnlmc: Vec<i64>,

    #[serde(rename = "FAGNNACCOPI")]
    pub fagnnaccopi: Vec<i64>,

    #[serde(rename = "EDCKBJHPJKJ")]
    pub edckbjhpjkj: Option<i64>,

    #[serde(rename = "pushTipsID")]
    pub push_tips_id: Option<i64>,

    #[serde(rename = "MOILPAENADN")]
    pub moilpaenadn: Vec<i64>,

    #[serde(rename = "DNKHGFCEJBH")]
    pub dnkhgfcejbh: Vec<i64>,

    #[serde(rename = "CIBDOPFLCCC")]
    pub cibdopflccc: Vec<i64>,

    #[serde(rename = "MFNABOMAODL")]
    pub mfnabomaodl: Vec<Mfnabomaodl>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Mfnabomaodl {
    #[serde(rename = "desc")]
    pub desc: Desc,

    #[serde(rename = "LHAIHFLDECK")]
    pub lhaihfldeck: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Desc {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "UI_ACTIVITY_CHASM_CHALLENGE_PRECOND")]
    UiActivityChasmChallengePrecond,
}

pub fn load() -> Result<NewActivityPreviewConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "NewActivityPreviewConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
