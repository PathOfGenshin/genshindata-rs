// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type NewActivityPreviewConfigData = Vec<NewActivityPreviewConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct NewActivityPreviewConfigDatum {
    #[serde(rename = "activityID")]
    pub activity_id: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "FHMMHOGPFLH")]
    pub fhmmhogpflh: i64,

    #[serde(rename = "MPOJNBEIIPM")]
    pub mpojnbeiipm: i64,

    #[serde(rename = "rewardPreviewID")]
    pub reward_preview_id: Option<i64>,

    #[serde(rename = "CGLFFLPKGPG")]
    pub cglfflpkgpg: Option<i64>,

    #[serde(rename = "GPKKPMEAPGH")]
    pub gpkkpmeapgh: Vec<i64>,

    #[serde(rename = "BFAONOAPHFD")]
    pub bfaonoaphfd: Vec<i64>,

    #[serde(rename = "EFIOCIIFCCP")]
    pub efiociifccp: Option<i64>,

    #[serde(rename = "pushTipsID")]
    pub push_tips_id: Option<i64>,

    #[serde(rename = "KJDDDBGJEFK")]
    pub kjdddbgjefk: Vec<i64>,

    #[serde(rename = "BGPGNJCLLHB")]
    pub bgpgnjcllhb: Vec<i64>,

    #[serde(rename = "GLIIHKJMJGI")]
    pub gliihkjmjgi: Vec<i64>,

    #[serde(rename = "LDOBPADHCCD")]
    pub ldobpadhccd: Vec<Ldobpadhccd>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Ldobpadhccd {
    #[serde(rename = "desc")]
    pub desc: Desc,

    #[serde(rename = "NOLIJFOHKON")]
    pub nolijfohkon: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Desc {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "UI_ACTIVITY_CHASM_CHALLENGE_PRECOND")]
    UiActivityChasmChallengePrecond,
}

pub fn load() -> Result<NewActivityPreviewConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "NewActivityPreviewConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
