// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type NewActivityPreviewConfigData = Vec<NewActivityPreviewConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct NewActivityPreviewConfigDatum {
    #[serde(rename = "activityID")]
    pub activity_id: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "OMCPAKNJGAO")]
    pub omcpaknjgao: i64,

    #[serde(rename = "HMOILPBNGHB")]
    pub hmoilpbnghb: i64,

    #[serde(rename = "rewardPreviewID")]
    pub reward_preview_id: Option<i64>,

    #[serde(rename = "OBEKBIMDHCH")]
    pub obekbimdhch: Option<i64>,

    #[serde(rename = "KCONEEMOCHA")]
    pub kconeemocha: Vec<i64>,

    #[serde(rename = "DLKEEPGNMDA")]
    pub dlkeepgnmda: Vec<i64>,

    #[serde(rename = "CFOCHCKNFFI")]
    pub cfochcknffi: Option<i64>,

    #[serde(rename = "pushTipsID")]
    pub push_tips_id: Option<i64>,

    #[serde(rename = "ECNPNFFMDKG")]
    pub ecnpnffmdkg: Vec<i64>,

    #[serde(rename = "NOAGIDLHAGK")]
    pub noagidlhagk: Vec<i64>,

    #[serde(rename = "FLKFJPJOHMC")]
    pub flkfjpjohmc: Vec<i64>,

    #[serde(rename = "EMLAGHILEJJ")]
    pub emlaghilejj: Vec<Emlaghilejj>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Emlaghilejj {
    #[serde(rename = "desc")]
    pub desc: Desc,

    #[serde(rename = "HAOCPNBIADK")]
    pub haocpnbiadk: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Desc {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "UI_ACTIVITY_CHASM_CHALLENGE_PRECOND")]
    UiActivityChasmChallengePrecond,
}

pub fn load() -> Result<NewActivityPreviewConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "NewActivityPreviewConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
