// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type InvestigationMonsterConfigData = Vec<InvestigationMonsterConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct InvestigationMonsterConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "cityId")]
    pub city_id: i64,

    #[serde(rename = "monsterIdList")]
    pub monster_id_list: Vec<i64>,

    #[serde(rename = "groupIdList")]
    pub group_id_list: Vec<i64>,

    #[serde(rename = "KCMFCMIEMHK")]
    pub kcmfcmiemhk: Vec<i64>,

    #[serde(rename = "HIAHHEHHLKC")]
    pub hiahhehhlkc: Vec<i64>,

    #[serde(rename = "LJEPGIPMAGJ")]
    pub ljepgipmagj: i64,

    #[serde(rename = "rewardPreviewId")]
    pub reward_preview_id: i64,

    #[serde(rename = "mapMarkCreateType")]
    pub map_mark_create_type: Option<MapMarkCreateType>,

    #[serde(rename = "mapMarkCreateCondition")]
    pub map_mark_create_condition: MapMarkCreateCondition,

    #[serde(rename = "monsterCategory")]
    pub monster_category: MonsterCategory,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "icon")]
    pub icon: String,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "lockDescTextMapHash")]
    pub lock_desc_text_map_hash: i64,

    #[serde(rename = "occupiedQuestIdList")]
    pub occupied_quest_id_list: Vec<i64>,

    #[serde(rename = "unlockParentQuestId")]
    pub unlock_parent_quest_id: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct MapMarkCreateCondition {
    #[serde(rename = "conditionType")]
    pub condition_type: Option<ConditionType>,

    #[serde(rename = "conditionParam")]
    pub condition_param: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum ConditionType {
    #[serde(rename = "PlayerLevelGE")]
    PlayerLevelGe,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum MapMarkCreateType {
    #[serde(rename = "ExtraConditions")]
    ExtraConditions,

    #[serde(rename = "NerverCreate")]
    NerverCreate,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum MonsterCategory {
    #[serde(rename = "Boss")]
    Boss,

    #[serde(rename = "Common")]
    Common,

    #[serde(rename = "Elite")]
    Elite,
}

pub fn load() -> Result<InvestigationMonsterConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "InvestigationMonsterConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
