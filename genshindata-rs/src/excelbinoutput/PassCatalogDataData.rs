// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type PassCatalogDataData = Vec<PassCatalogDataDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct PassCatalogDataDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "JHMGLDHKKMI")]
    pub jhmgldhkkmi: i64,

    #[serde(rename = "MBGKPCKJCBH")]
    pub mbgkpckjcbh: i64,

    #[serde(rename = "OGLLMCOBLJO")]
    pub ogllmcobljo: String,

    #[serde(rename = "GBECKABMACL")]
    pub gbeckabmacl: Gbeckabmacl,

    #[serde(rename = "NNMJMBLGJAE")]
    pub nnmjmblgjae: String,

    #[serde(rename = "GDHLCPHFJBD")]
    pub gdhlcphfjbd: Vec<Gdhlcphfjbd>,

    #[serde(rename = "AFLKNBDECFB")]
    pub aflknbdecfb: Option<bool>,

    #[serde(rename = "IAGBCKEAALD")]
    pub iagbckeaald: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Gdhlcphfjbd {
    #[serde(rename = "id")]
    pub id: Option<i64>,

    #[serde(rename = "CMMHNAEMCGO")]
    pub cmmhnaemcgo: Cmmhnaemcgo,

    #[serde(rename = "IAGBCKEAALD")]
    pub iagbckeaald: Option<i64>,

    #[serde(rename = "weight")]
    pub weight: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Gbeckabmacl {
    #[serde(rename = "BIGWORLD")]
    Bigworld,

    #[serde(rename = "POLYGON")]
    Polygon,

    #[serde(rename = "SUBAREA")]
    Subarea,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Cmmhnaemcgo {
    #[serde(rename = "DeshretPoint_jinruzhiyin01")]
    DeshretPointJinruzhiyin01,

    #[serde(rename = "DeshretPoint_jinruzhiyin02")]
    DeshretPointJinruzhiyin02,

    #[serde(rename = "DeshretPoint_jinruzhiyin03")]
    DeshretPointJinruzhiyin03,

    #[serde(rename = "DeshretPoint_jisichuansongzhiyin")]
    DeshretPointJisichuansongzhiyin,

    #[serde(rename = "DeshretPoint_jisitoliantongzhiyin01")]
    DeshretPointJisitoliantongzhiyin01,

    #[serde(rename = "DeshretPoint_jisitoliantongzhiyin02")]
    DeshretPointJisitoliantongzhiyin02,

    #[serde(rename = "DeshretPoint_kuangdongzhiyin01")]
    DeshretPointKuangdongzhiyin01,

    #[serde(rename = "DeshretPoint_kuangdongzhiyin02")]
    DeshretPointKuangdongzhiyin02,

    #[serde(rename = "DeshretPoint_kuangdongzhiyin03")]
    DeshretPointKuangdongzhiyin03,

    #[serde(rename = "DeshretPoint_kuangdongzhiyin04")]
    DeshretPointKuangdongzhiyin04,

    #[serde(rename = "DeshretPoint_kuangdongzhiyin05")]
    DeshretPointKuangdongzhiyin05,

    #[serde(rename = "DeshretPoint_kuangdongzhiyin06")]
    DeshretPointKuangdongzhiyin06,

    #[serde(rename = "DeshretPoint_quanzhangzhiyin01")]
    DeshretPointQuanzhangzhiyin01,

    #[serde(rename = "DeshretPoint_quanzhangzhiyin02")]
    DeshretPointQuanzhangzhiyin02,

    #[serde(rename = "DeshretPoint_quanzhangzhiyin04")]
    DeshretPointQuanzhangzhiyin04,

    #[serde(rename = "DeshretPoint_quanzhangzhiyin06")]
    DeshretPointQuanzhangzhiyin06,

    #[serde(rename = "DeshretPoint_quanzhangzhiyin07")]
    DeshretPointQuanzhangzhiyin07,

    #[serde(rename = "DeshretPoint_siyuzhiyin01")]
    DeshretPointSiyuzhiyin01,

    #[serde(rename = "DeshretPoint_siyuzhiyin02")]
    DeshretPointSiyuzhiyin02,

    #[serde(rename = "DeshretPoint_siyuzhiyin03")]
    DeshretPointSiyuzhiyin03,

    #[serde(rename = "DeshretPoint_toumingzhiyin01")]
    DeshretPointToumingzhiyin01,

    #[serde(rename = "DeshretPoint_toumingzhiyin02")]
    DeshretPointToumingzhiyin02,

    #[serde(rename = "DeshretPoint_yurendamenzhiyin")]
    DeshretPointYurendamenzhiyin,

    #[serde(rename = "DeshretPoint_yurendownzhiyin01")]
    DeshretPointYurendownzhiyin01,

    #[serde(rename = "DeshretPoint_yurenupzhiyin01")]
    DeshretPointYurenupzhiyin01,

    #[serde(rename = "DeshretPoint_yurenzhiyin")]
    DeshretPointYurenzhiyin,

    #[serde(rename = "DeshretPoint_yurenzhiyin01")]
    DeshretPointYurenzhiyin01,

    #[serde(rename = "")]
    Empty,
}

pub fn load() -> Result<PassCatalogDataData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "PassCatalogDataData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
