// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type CityConfigData = Vec<CityConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct CityConfigDatum {
    #[serde(rename = "cityId")]
    pub city_id: i64,

    #[serde(rename = "sceneId")]
    pub scene_id: i64,

    #[serde(rename = "areaIdVec")]
    pub area_id_vec: Vec<i64>,

    #[serde(rename = "cityNameTextMapHash")]
    pub city_name_text_map_hash: i64,

    #[serde(rename = "mapPosX")]
    pub map_pos_x: i64,

    #[serde(rename = "mapPosY")]
    pub map_pos_y: i64,

    #[serde(rename = "zoomForExploration")]
    pub zoom_for_exploration: f64,

    #[serde(rename = "adventurePointId")]
    pub adventure_point_id: i64,

    #[serde(rename = "ExpeditionMap")]
    pub expedition_map: String,

    #[serde(rename = "ExpeditionWaterMark")]
    pub expedition_water_mark: String,

    #[serde(rename = "openState")]
    pub open_state: String,

    #[serde(rename = "cityGoddnessNameTextMapHash")]
    pub city_goddness_name_text_map_hash: i64,

    #[serde(rename = "cityGoddnessDescTextMapHash")]
    pub city_goddness_desc_text_map_hash: i64,
}

pub fn load() -> Result<CityConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "CityConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
