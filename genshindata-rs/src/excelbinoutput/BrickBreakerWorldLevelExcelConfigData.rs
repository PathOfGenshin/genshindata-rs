// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type BrickBreakerWorldLevelExcelConfigData = Vec<BrickBreakerWorldLevelExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct BrickBreakerWorldLevelExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "FMJPBNMPDGA")]
    pub fmjpbnmpdga: Option<i64>,

    #[serde(rename = "draftId")]
    pub draft_id: Option<i64>,

    #[serde(rename = "limitTime")]
    pub limit_time: i64,

    #[serde(rename = "NHDBOPDEILK")]
    pub nhdbopdeilk: i64,

    #[serde(rename = "sceneId")]
    pub scene_id: i64,

    #[serde(rename = "groupId")]
    pub group_id: i64,

    #[serde(rename = "transportPointList")]
    pub transport_point_list: Vec<i64>,

    #[serde(rename = "durationList")]
    pub duration_list: Vec<i64>,

    #[serde(rename = "galleryId")]
    pub gallery_id: i64,

    #[serde(rename = "levelTitleTextMapHash")]
    pub level_title_text_map_hash: i64,

    #[serde(rename = "LHKAEBIEMOI")]
    pub lhkaebiemoi: i64,

    #[serde(rename = "levelDescTextMapHash")]
    pub level_desc_text_map_hash: i64,

    #[serde(rename = "OMILBMPFKOF")]
    pub omilbmpfkof: i64,

    #[serde(rename = "FLADNOCDACA")]
    pub fladnocdaca: Vec<i64>,

    #[serde(rename = "GOKAOGNPMAE")]
    pub gokaognpmae: Vec<Gokaognpmae>,

    #[serde(rename = "CANABABIHPH")]
    pub canababihph: Vec<i64>,

    #[serde(rename = "MBMAKLIJMMJ")]
    pub mbmaklijmmj: Option<bool>,

    #[serde(rename = "CGGBPBKOFEG")]
    pub cggbpbkofeg: Option<i64>,

    #[serde(rename = "AAAGKFIOEEN")]
    pub aaagkfioeen: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Gokaognpmae {
    #[serde(rename = "Fire")]
    Fire,

    #[serde(rename = "None")]
    None,

    #[serde(rename = "Water")]
    Water,
}

pub fn load() -> Result<BrickBreakerWorldLevelExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "BrickBreakerWorldLevelExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
