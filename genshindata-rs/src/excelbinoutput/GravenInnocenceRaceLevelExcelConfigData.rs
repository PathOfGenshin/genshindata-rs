// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type GravenInnocenceRaceLevelExcelConfigData = Vec<GravenInnocenceRaceLevelExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GravenInnocenceRaceLevelExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "openDay")]
    pub open_day: i64,

    #[serde(rename = "galleryId")]
    pub gallery_id: i64,

    #[serde(rename = "OGODALFELJP")]
    pub ogodalfeljp: i64,

    #[serde(rename = "CHHHPHEJKMK")]
    pub chhhphejkmk: Vec<i64>,

    #[serde(rename = "IAAICJCHEMB")]
    pub iaaicjchemb: Vec<i64>,

    #[serde(rename = "levelNameTextMapHash")]
    pub level_name_text_map_hash: i64,

    #[serde(rename = "levelDescTextMapHash")]
    pub level_desc_text_map_hash: i64,

    #[serde(rename = "LFAOCFLOCLO")]
    pub lfaocfloclo: i64,

    #[serde(rename = "DAHMLDJKJAJ")]
    pub dahmldjkjaj: f64,

    #[serde(rename = "EKHFIJPNNEA")]
    pub ekhfijpnnea: f64,
}

pub fn load() -> Result<GravenInnocenceRaceLevelExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GravenInnocenceRaceLevelExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
