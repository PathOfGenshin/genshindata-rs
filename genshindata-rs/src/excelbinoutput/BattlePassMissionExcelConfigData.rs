/// This file was automatically generated by quicktype
/// DO NOT MANUALLY EDIT THIS FILE!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type BattlePassMissionExcelConfigData = Vec<BattlePassMissionExcelConfigDatum>;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct BattlePassMissionExcelConfigDatum {
    pub add_point: i64,
    pub desc_text_map_hash: i64,
    pub guide: Guide,
    pub id: i64,
    pub trigger_config: TriggerConfig,
    pub progress: i64,
    pub refresh_type: Option<RefreshType>,
    pub schedule_id: Option<i64>,
    pub activity_id: Option<i64>,
    pub is_disuse: Option<bool>,
    pub is_force: Option<bool>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Guide {
    pub param: Vec<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum RefreshType {
    #[serde(rename = "BATTLE_PASS_MISSION_REFRESH_CYCLE")]
    BattlePassMissionRefreshCycle,
    #[serde(rename = "BATTLE_PASS_MISSION_REFRESH_CYCLE_CROSS_SCHEDULE")]
    BattlePassMissionRefreshCycleCrossSchedule,
    #[serde(rename = "BATTLE_PASS_MISSION_REFRESH_SCHEDULE")]
    BattlePassMissionRefreshSchedule,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct TriggerConfig {
    pub trigger_type: String,
    pub param_list: Vec<String>,
}
