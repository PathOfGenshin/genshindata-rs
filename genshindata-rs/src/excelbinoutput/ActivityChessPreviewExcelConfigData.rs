// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityChessPreviewExcelConfigData = Vec<ActivityChessPreviewExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityChessPreviewExcelConfigDatum {
    #[serde(rename = "activityID")]
    pub activity_id: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "rewardPreviewID")]
    pub reward_preview_id: i64,

    #[serde(rename = "CGKLMAEPBAC")]
    pub cgklmaepbac: i64,

    #[serde(rename = "IGGIFIKJICM")]
    pub iggifikjicm: i64,

    #[serde(rename = "watcherList")]
    pub watcher_list: Vec<i64>,

    #[serde(rename = "matchPlayerLimit")]
    pub match_player_limit: i64,

    #[serde(rename = "AHHAFHJGJPM")]
    pub ahhafhjgjpm: bool,

    #[serde(rename = "OJLFNCBNACF")]
    pub ojlfncbnacf: i64,

    #[serde(rename = "CHOMHEOEFHP")]
    pub chomheoefhp: i64,

    #[serde(rename = "punishTime")]
    pub punish_time: i64,

    #[serde(rename = "LGJIDIKOMOD")]
    pub lgjidikomod: i64,

    #[serde(rename = "NCNJMDEGMIL")]
    pub ncnjmdegmil: i64,

    #[serde(rename = "ANALKHEMMCA")]
    pub analkhemmca: Vec<i64>,
}

pub fn load() -> Result<ActivityChessPreviewExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityChessPreviewExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
