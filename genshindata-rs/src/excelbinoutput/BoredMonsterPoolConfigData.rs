// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type BoredMonsterPoolConfigData = Vec<BoredMonsterPoolConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct BoredMonsterPoolConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "monsterId")]
    pub monster_id: i64,

    #[serde(rename = "level")]
    pub level: i64,

    #[serde(rename = "dropTag")]
    pub drop_tag: DropTag,

    #[serde(rename = "affixVec")]
    pub affix_vec: Vec<Option<serde_json::Value>>,

    #[serde(rename = "isElite")]
    pub is_elite: bool,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum DropTag {
    #[serde(rename = "深渊法师")]
    DropTag,

    #[serde(rename = "丘丘暴徒")]
    Empty,

    #[serde(rename = "召唤师")]
    Fluffy,

    #[serde(rename = "元素之核")]
    Purple,

    #[serde(rename = "债务处理人")]
    Tentacled,
}

pub fn load() -> Result<BoredMonsterPoolConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "BoredMonsterPoolConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
