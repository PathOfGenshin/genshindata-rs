// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type DocumentExcelConfigData = Vec<DocumentExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct DocumentExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "titleTextMapHash")]
    pub title_text_map_hash: i64,

    #[serde(rename = "contentLocalizedId")]
    pub content_localized_id: Option<i64>,

    #[serde(rename = "previewPath")]
    pub preview_path: String,

    #[serde(rename = "videoPath")]
    pub video_path: VideoPath,

    #[serde(rename = "KKKKOOJCBLL")]
    pub kkkkoojcbll: Kkkkoojcbll,

    #[serde(rename = "OKJFMGIFANL")]
    pub okjfmgifanl: Vec<i64>,

    #[serde(rename = "OGFCAMGONIM")]
    pub ogfcamgonim: Vec<i64>,

    #[serde(rename = "MLBBGNJOPGM")]
    pub mlbbgnjopgm: Option<Mlbbgnjopgm>,

    #[serde(rename = "documentType")]
    pub document_type: Option<DocumentType>,

    #[serde(rename = "subtitleID")]
    pub subtitle_id: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum DocumentType {
    #[serde(rename = "Letter")]
    Letter,

    #[serde(rename = "Video")]
    Video,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Kkkkoojcbll {
    #[serde(rename = "ART/UI/Menus/Widget/Letter/Common_ReadDialog_Special_Bg")]
    ArtUiMenusWidgetLetterCommonReadDialogSpecialBg,

    #[serde(rename = "ART/UI/Menus/Widget/Letter/FleurFairV2_ReadDialog_Special_Bg")]
    ArtUiMenusWidgetLetterFleurFairV2ReadDialogSpecialBg,

    #[serde(rename = "")]
    Empty,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Mlbbgnjopgm {
    #[serde(rename = "DOCUMENT_SPLIT_TYPE_BY_LINE")]
    DocumentSplitTypeByLine,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum VideoPath {
    #[serde(rename = "Ambor_Readings.usm")]
    AmborReadingsUsm,

    #[serde(rename = "")]
    Empty,
}

pub fn load() -> Result<DocumentExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "DocumentExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
