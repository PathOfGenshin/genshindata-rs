// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type SceneTagConfigData = Vec<SceneTagConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct SceneTagConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "sceneTagName")]
    pub scene_tag_name: String,

    #[serde(rename = "sceneId")]
    pub scene_id: i64,

    #[serde(rename = "EEGPBJOAJCJ")]
    pub eegpbjoajcj: Option<bool>,

    #[serde(rename = "cond")]
    pub cond: Vec<Cond>,

    #[serde(rename = "isDefaultValid")]
    pub is_default_valid: Option<bool>,

    #[serde(rename = "CLKECAFHPFF")]
    pub clkecafhpff: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Cond {
    #[serde(rename = "condType")]
    pub cond_type: Option<String>,

    #[serde(rename = "param1")]
    pub param1: Option<i64>,

    #[serde(rename = "param2")]
    pub param2: Option<i64>,
}

pub fn load() -> Result<SceneTagConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "SceneTagConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
