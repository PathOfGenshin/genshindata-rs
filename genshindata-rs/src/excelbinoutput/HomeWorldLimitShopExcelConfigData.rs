// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type HomeWorldLimitShopExcelConfigData = Vec<HomeWorldLimitShopExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct HomeWorldLimitShopExcelConfigDatum {
    #[serde(rename = "goodsId")]
    pub goods_id: i64,

    #[serde(rename = "itemID")]
    pub item_id: i64,

    #[serde(rename = "poolID")]
    pub pool_id: i64,

    #[serde(rename = "cond")]
    pub cond: Vec<Cond>,

    #[serde(rename = "buyLimit")]
    pub buy_limit: i64,

    #[serde(rename = "costItems")]
    pub cost_items: Vec<CostItem>,

    #[serde(rename = "weight")]
    pub weight: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Cond {
    #[serde(rename = "ODEILDHDJGC")]
    pub odeildhdjgc: Vec<i64>,

    #[serde(rename = "JFNOBDJEFHE")]
    pub jfnobdjefhe: Option<Jfnobdjefhe>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct CostItem {
    #[serde(rename = "id")]
    pub id: Option<i64>,

    #[serde(rename = "count")]
    pub count: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Jfnobdjefhe {
    #[serde(rename = "HOMEWORLD_LIMIT_SHOP_COND_TYPE_QUEST_FINISH")]
    HomeworldLimitShopCondTypeQuestFinish,
}

pub fn load() -> Result<HomeWorldLimitShopExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "HomeWorldLimitShopExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
