/// This file was automatically generated by quicktype
/// DO NOT MANUALLY EDIT THIS FILE!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type HomeWorldLimitShopExcelConfigData = Vec<HomeWorldLimitShopExcelConfigDatum>;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct HomeWorldLimitShopExcelConfigDatum {
    pub goods_id: i64,
    #[serde(rename = "itemID")]
    pub item_id: i64,
    #[serde(rename = "poolID")]
    pub pool_id: i64,
    pub cond: Vec<Cond>,
    pub buy_limit: i64,
    pub cost_items: Vec<CostItem>,
    pub weight: i64,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub struct Cond {
    pub cjpgffddbmb: Vec<i64>,
    pub egjmgehldol: Option<Egjmgehldol>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Egjmgehldol {
    #[serde(rename = "HOMEWORLD_LIMIT_SHOP_COND_TYPE_QUEST_FINISH")]
    HomeworldLimitShopCondTypeQuestFinish,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct CostItem {
    pub id: Option<i64>,
    pub count: Option<i64>,
}
