// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type FungusCultivateExcelConfigData = Vec<FungusCultivateExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct FungusCultivateExcelConfigDatum {
    #[serde(rename = "HGIOCHOPMBD")]
    pub hgiochopmbd: i64,

    #[serde(rename = "LFNGIGOENAO")]
    pub lfngigoenao: i64,

    #[serde(rename = "OBNOKOHCKOM")]
    pub obnokohckom: Option<i64>,

    #[serde(rename = "IFFHICGMDEP")]
    pub iffhicgmdep: i64,

    #[serde(rename = "EGKHABGENGP")]
    pub egkhabgengp: i64,

    #[serde(rename = "IBDCOLAKMEB")]
    pub ibdcolakmeb: Vec<i64>,

    #[serde(rename = "IHHEPPONHDM")]
    pub ihhepponhdm: Vec<i64>,

    #[serde(rename = "PHMGJKFALMH")]
    pub phmgjkfalmh: Vec<i64>,

    #[serde(rename = "KKOGOHHNNPJ")]
    pub kkogohhnnpj: Vec<Vec<i64>>,

    #[serde(rename = "LDFLPBNDCFH")]
    pub ldflpbndcfh: Vec<i64>,

    #[serde(rename = "PPJJGIMHABM")]
    pub ppjjgimhabm: Option<i64>,

    #[serde(rename = "tutorialId")]
    pub tutorial_id: Option<i64>,
}

pub fn load() -> Result<FungusCultivateExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "FungusCultivateExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
