// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type EchoShellExcelConfigData = Vec<EchoShellExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct EchoShellExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "storyId")]
    pub story_id: Option<i64>,

    #[serde(rename = "ICFAAGEFDJI")]
    pub icfaagefdji: i64,

    #[serde(rename = "GFIHIPJKJBA")]
    pub gfihipjkjba: i64,

    #[serde(rename = "MKHKIGHLANG")]
    pub mkhkighlang: Vec<i64>,

    #[serde(rename = "LMMLLMMEOPN")]
    pub lmmllmmeopn: Vec<i64>,

    #[serde(rename = "KBNHJOHHKDO")]
    pub kbnhjohhkdo: String,

    #[serde(rename = "JBKKLHNDHEP")]
    pub jbkklhndhep: Vec<f64>,

    #[serde(rename = "JIGDPBPKPHF")]
    pub jigdpbpkphf: i64,

    #[serde(rename = "GHEDCPGOGHA")]
    pub ghedcpgogha: i64,

    #[serde(rename = "EFJODFLPHJP")]
    pub efjodflphjp: Vec<i64>,

    #[serde(rename = "EJLKCLNIEDA")]
    pub ejlkclnieda: i64,

    #[serde(rename = "FDCCMOIODMO")]
    pub fdccmoiodmo: i64,

    #[serde(rename = "BCOGMJJGHEH")]
    pub bcogmjjgheh: Vec<i64>,

    #[serde(rename = "OEBEONLOCFJ")]
    pub oebeonlocfj: Option<Oebeonlocfj>,

    #[serde(rename = "DAOLFCOFKAD")]
    pub daolfcofkad: Option<i64>,

    #[serde(rename = "MIDEPEPBHBF")]
    pub midepepbhbf: Option<i64>,

    #[serde(rename = "ELBFEDOOPOD")]
    pub elbfedoopod: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Oebeonlocfj {
    #[serde(rename = "ECHO_SHELL_TYPE_NORMAL_IMAGE")]
    EchoShellTypeNormalImage,

    #[serde(rename = "ECHO_SHELL_TYPE_NORMAL_INTERACT")]
    EchoShellTypeNormalInteract,

    #[serde(rename = "ECHO_SHELL_TYPE_SPECIAL_ECHO")]
    EchoShellTypeSpecialEcho,

    #[serde(rename = "ECHO_SHELL_TYPE_SPECIAL_IMAGE")]
    EchoShellTypeSpecialImage,
}

pub fn load() -> Result<EchoShellExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "EchoShellExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
