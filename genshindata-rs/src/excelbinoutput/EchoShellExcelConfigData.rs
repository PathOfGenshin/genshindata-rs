// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type EchoShellExcelConfigData = Vec<EchoShellExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct EchoShellExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "storyId")]
    pub story_id: Option<i64>,

    #[serde(rename = "DIGHEKFHFFN")]
    pub dighekfhffn: i64,

    #[serde(rename = "DCCDOOCFDKN")]
    pub dccdoocfdkn: i64,

    #[serde(rename = "IGOKPHFKNGO")]
    pub igokphfkngo: Vec<i64>,

    #[serde(rename = "MOBOCEKDOPL")]
    pub mobocekdopl: Vec<i64>,

    #[serde(rename = "NBDAFECDHIK")]
    pub nbdafecdhik: String,

    #[serde(rename = "AEHMIPFEOPP")]
    pub aehmipfeopp: Vec<f64>,

    #[serde(rename = "BBHGBIIHBBC")]
    pub bbhgbiihbbc: i64,

    #[serde(rename = "IGJNOKJAAKF")]
    pub igjnokjaakf: i64,

    #[serde(rename = "EPOBBMBIBKE")]
    pub epobbmbibke: Vec<i64>,

    #[serde(rename = "IGLFNCKNAIC")]
    pub iglfncknaic: i64,

    #[serde(rename = "IHAGLKMBELO")]
    pub ihaglkmbelo: i64,

    #[serde(rename = "MACNJPIKJDP")]
    pub macnjpikjdp: Vec<i64>,

    #[serde(rename = "PGNLFDENNDB")]
    pub pgnlfdenndb: Option<Pgnlfdenndb>,

    #[serde(rename = "BANBGJIPCHE")]
    pub banbgjipche: Option<i64>,

    #[serde(rename = "ECHCCBFHELA")]
    pub echccbfhela: Option<i64>,

    #[serde(rename = "JFPDPIJKCAA")]
    pub jfpdpijkcaa: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Pgnlfdenndb {
    #[serde(rename = "ECHO_SHELL_TYPE_NORMAL_IMAGE")]
    EchoShellTypeNormalImage,

    #[serde(rename = "ECHO_SHELL_TYPE_NORMAL_INTERACT")]
    EchoShellTypeNormalInteract,

    #[serde(rename = "ECHO_SHELL_TYPE_SPECIAL_ECHO")]
    EchoShellTypeSpecialEcho,

    #[serde(rename = "ECHO_SHELL_TYPE_SPECIAL_IMAGE")]
    EchoShellTypeSpecialImage,
}

pub fn load() -> Result<EchoShellExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "EchoShellExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
