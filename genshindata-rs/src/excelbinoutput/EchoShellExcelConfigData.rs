// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type EchoShellExcelConfigData = Vec<EchoShellExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct EchoShellExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "storyId")]
    pub story_id: Option<i64>,

    #[serde(rename = "BBCKKANEJGK")]
    pub bbckkanejgk: i64,

    #[serde(rename = "OFIEMGCJEBH")]
    pub ofiemgcjebh: i64,

    #[serde(rename = "NMOHEGAILFP")]
    pub nmohegailfp: Vec<i64>,

    #[serde(rename = "JILBAENHLKJ")]
    pub jilbaenhlkj: Vec<i64>,

    #[serde(rename = "OOIFOJFOCKF")]
    pub ooifojfockf: String,

    #[serde(rename = "DACEAHDLAHC")]
    pub daceahdlahc: Vec<f64>,

    #[serde(rename = "MDMGJHBNHFC")]
    pub mdmgjhbnhfc: i64,

    #[serde(rename = "IDLBONGALEF")]
    pub idlbongalef: i64,

    #[serde(rename = "CHCBKLMKHGI")]
    pub chcbklmkhgi: Vec<i64>,

    #[serde(rename = "HKDHIEOBFFO")]
    pub hkdhieobffo: i64,

    #[serde(rename = "OPIBGAIGGMC")]
    pub opibgaiggmc: i64,

    #[serde(rename = "GLKPKNEGFPH")]
    pub glkpknegfph: Vec<i64>,

    #[serde(rename = "CJIBMKIHJFM")]
    pub cjibmkihjfm: Option<Cjibmkihjfm>,

    #[serde(rename = "KKOLIMCFILK")]
    pub kkolimcfilk: Option<i64>,

    #[serde(rename = "KDNFHFFLCFP")]
    pub kdnfhfflcfp: Option<i64>,

    #[serde(rename = "OKGONBMGJCG")]
    pub okgonbmgjcg: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Cjibmkihjfm {
    #[serde(rename = "ECHO_SHELL_TYPE_NORMAL_IMAGE")]
    EchoShellTypeNormalImage,

    #[serde(rename = "ECHO_SHELL_TYPE_NORMAL_INTERACT")]
    EchoShellTypeNormalInteract,

    #[serde(rename = "ECHO_SHELL_TYPE_SPECIAL_ECHO")]
    EchoShellTypeSpecialEcho,

    #[serde(rename = "ECHO_SHELL_TYPE_SPECIAL_IMAGE")]
    EchoShellTypeSpecialImage,
}

pub fn load() -> Result<EchoShellExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "EchoShellExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
