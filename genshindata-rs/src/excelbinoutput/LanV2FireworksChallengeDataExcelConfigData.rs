// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type LanV2FireworksChallengeDataExcelConfigData = Vec<LanV2FireworksChallengeDataExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct LanV2FireworksChallengeDataExcelConfigDatum {
    #[serde(rename = "challengeId")]
    pub challenge_id: i64,

    #[serde(rename = "titleTextMapHash")]
    pub title_text_map_hash: i64,

    #[serde(rename = "icon")]
    pub icon: String,

    #[serde(rename = "MBJBBGBJMCJ")]
    pub mbjbbgbjmcj: Vec<i64>,

    #[serde(rename = "LLENBEHLAIA")]
    pub llenbehlaia: i64,

    #[serde(rename = "NDCEAPJEJBE")]
    pub ndceapjejbe: i64,

    #[serde(rename = "ANGFJPIAIJN")]
    pub angfjpiaijn: i64,

    #[serde(rename = "CHDOIOABOKD")]
    pub chdoioabokd: i64,

    #[serde(rename = "watcherIdList")]
    pub watcher_id_list: Vec<i64>,

    #[serde(rename = "LLNCGCPLPGC")]
    pub llncgcplpgc: i64,
}

pub fn load() -> Result<LanV2FireworksChallengeDataExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "LanV2FireworksChallengeDataExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
