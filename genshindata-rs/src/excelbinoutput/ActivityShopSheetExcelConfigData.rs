// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityShopSheetExcelConfigData = Vec<ActivityShopSheetExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityShopSheetExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "isAheadPreview")]
    pub is_ahead_preview: Option<bool>,

    #[serde(rename = "SheetNameTextMapHash")]
    pub sheet_name_text_map_hash: i64,

    #[serde(rename = "cond")]
    pub cond: Vec<Cond>,

    #[serde(rename = "sortLevel")]
    pub sort_level: Vec<Option<serde_json::Value>>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Cond {
    #[serde(rename = "param")]
    pub param: Vec<i64>,

    #[serde(rename = "type")]
    pub cond_type: Option<Type>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "ACTIVITY_SHOP_SHEET_COND_TIME_EQUAL_GREATER")]
    ActivityShopSheetCondTimeEqualGreater,
}

pub fn load() -> Result<ActivityShopSheetExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityShopSheetExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
