// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type BrickBreakerSkillExcelConfigData = Vec<BrickBreakerSkillExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct BrickBreakerSkillExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "maxLevel")]
    pub max_level: i64,

    #[serde(rename = "EIMJFLKOFPK")]
    pub eimjflkofpk: i64,

    #[serde(rename = "DCHPDLPJDMO")]
    pub dchpdlpjdmo: i64,

    #[serde(rename = "descParam")]
    pub desc_param: Vec<String>,

    #[serde(rename = "GCAAGFNKLAN")]
    pub gcaagfnklan: i64,

    #[serde(rename = "unlockWorldLevel")]
    pub unlock_world_level: Option<i64>,

    #[serde(rename = "HLOFIBJHBCD")]
    pub hlofibjhbcd: Vec<i64>,

    #[serde(rename = "MMGDOOFIPMG")]
    pub mmgdoofipmg: String,

    #[serde(rename = "MPACDGLDCAD")]
    pub mpacdgldcad: Option<i64>,
}

pub fn load() -> Result<BrickBreakerSkillExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "BrickBreakerSkillExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
