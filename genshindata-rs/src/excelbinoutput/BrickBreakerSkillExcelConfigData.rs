// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type BrickBreakerSkillExcelConfigData = Vec<BrickBreakerSkillExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct BrickBreakerSkillExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "maxLevel")]
    pub max_level: i64,

    #[serde(rename = "PPDOPFEOBIG")]
    pub ppdopfeobig: i64,

    #[serde(rename = "DKOLHEPIKIP")]
    pub dkolhepikip: i64,

    #[serde(rename = "descParam")]
    pub desc_param: Vec<String>,

    #[serde(rename = "GOOGPDHGMGN")]
    pub googpdhgmgn: i64,

    #[serde(rename = "unlockWorldLevel")]
    pub unlock_world_level: Option<i64>,

    #[serde(rename = "ABIDEDDCCOF")]
    pub abideddccof: Vec<i64>,

    #[serde(rename = "IGNFAMBBNAM")]
    pub ignfambbnam: String,

    #[serde(rename = "NKNPFCEHAGF")]
    pub nknpfcehagf: Option<i64>,
}

pub fn load() -> Result<BrickBreakerSkillExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "BrickBreakerSkillExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
