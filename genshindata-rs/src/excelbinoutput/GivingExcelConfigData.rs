// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type GivingExcelConfigData = Vec<GivingExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GivingExcelConfigDatum {
    #[serde(rename = "Id")]
    pub id: i64,

    #[serde(rename = "talkId")]
    pub talk_id: Option<i64>,

    #[serde(rename = "mistakeTalkId")]
    pub mistake_talk_id: Option<i64>,

    #[serde(rename = "tab")]
    pub tab: Tab,

    #[serde(rename = "givingMethod")]
    pub giving_method: GivingMethod,

    #[serde(rename = "exactItems")]
    pub exact_items: Vec<ExactItem>,

    #[serde(rename = "exactFinishTalkId")]
    pub exact_finish_talk_id: Option<i64>,

    #[serde(rename = "givingGroupIds")]
    pub giving_group_ids: Vec<i64>,

    #[serde(rename = "highlight")]
    pub highlight: Option<bool>,

    #[serde(rename = "icon")]
    pub icon: Icon,

    #[serde(rename = "isRemoveItem")]
    pub is_remove_item: Option<bool>,

    #[serde(rename = "LMBCBEGGOFE")]
    pub lmbcbeggofe: Lmbcbeggofe,

    #[serde(rename = "isRepeatable")]
    pub is_repeatable: Option<bool>,

    #[serde(rename = "givingGroupCount")]
    pub giving_group_count: Option<i64>,

    #[serde(rename = "HMLCHIIDOJN")]
    pub hmlchiidojn: Option<bool>,

    #[serde(rename = "PEDNLGDPKKF")]
    pub pednlgdpkkf: Option<bool>,

    #[serde(rename = "LNICKMJHAOJ")]
    pub lnickmjhaoj: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct ExactItem {
    #[serde(rename = "id")]
    pub id: Option<i64>,

    #[serde(rename = "count")]
    pub count: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum GivingMethod {
    #[serde(rename = "GIVING_METHOD_EXACT")]
    GivingMethodExact,

    #[serde(rename = "GIVING_METHOD_GROUP")]
    GivingMethodGroup,

    #[serde(rename = "GIVING_METHOD_VAGUE_GROUP")]
    GivingMethodVagueGroup,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Icon {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "UI_Icon_Item_Temp")]
    UiIconItemTemp,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Lmbcbeggofe {
    #[serde(rename = "GIVING_TYPE_GADGET")]
    GivingTypeGadget,

    #[serde(rename = "GIVING_TYPE_QUEST")]
    GivingTypeQuest,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Tab {
    #[serde(rename = "TAB_AVATAR")]
    TabAvatar,

    #[serde(rename = "TAB_CONSUME")]
    TabConsume,

    #[serde(rename = "TAB_FOOD")]
    TabFood,

    #[serde(rename = "TAB_MATERIAL")]
    TabMaterial,

    #[serde(rename = "TAB_QUEST")]
    TabQuest,

    #[serde(rename = "TAB_WEAPON")]
    TabWeapon,

    #[serde(rename = "TAB_WIDGET")]
    TabWidget,
}

pub fn load() -> Result<GivingExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GivingExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
