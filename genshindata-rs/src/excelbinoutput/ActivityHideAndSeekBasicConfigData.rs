// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityHideAndSeekBasicConfigData = Vec<ActivityHideAndSeekBasicConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityHideAndSeekBasicConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "activityID")]
    pub activity_id: i64,

    #[serde(rename = "titleTextMapHash")]
    pub title_text_map_hash: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "pushTipsID")]
    pub push_tips_id: i64,

    #[serde(rename = "rewardPreviewID")]
    pub reward_preview_id: i64,

    #[serde(rename = "oneTimeRewardPreviewID")]
    pub one_time_reward_preview_id: i64,

    #[serde(rename = "unlockQuestID")]
    pub unlock_quest_id: i64,

    #[serde(rename = "matchID")]
    pub match_id: i64,

    #[serde(rename = "draftID")]
    pub draft_id: i64,

    #[serde(rename = "scoreUnlockList")]
    pub score_unlock_list: Vec<i64>,

    #[serde(rename = "watcherList")]
    pub watcher_list: Vec<i64>,

    #[serde(rename = "skillList")]
    pub skill_list: Vec<i64>,

    #[serde(rename = "mapList")]
    pub map_list: Vec<i64>,

    #[serde(rename = "chanllengeList")]
    pub chanllenge_list: Vec<i64>,

    #[serde(rename = "scoreItemID")]
    pub score_item_id: i64,
}

pub fn load() -> Result<ActivityHideAndSeekBasicConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityHideAndSeekBasicConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
