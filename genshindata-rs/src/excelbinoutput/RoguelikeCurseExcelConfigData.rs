// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type RoguelikeCurseExcelConfigData = Vec<RoguelikeCurseExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct RoguelikeCurseExcelConfigDatum {
    #[serde(rename = "level")]
    pub level: i64,

    #[serde(rename = "groupId")]
    pub group_id: i64,

    #[serde(rename = "JNJJOIFBAHP")]
    pub jnjjoifbahp: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "LIKIBHAPBML")]
    pub likibhapbml: Likibhapbml,

    #[serde(rename = "HKHMNJCCKPB")]
    pub hkhmnjcckpb: Option<bool>,

    #[serde(rename = "descParamList")]
    pub desc_param_list: Vec<f64>,

    #[serde(rename = "GBKHEBJBIGC")]
    pub gbkhebjbigc: Vec<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Likibhapbml {
    #[serde(rename = "effectType")]
    pub effect_type: String,

    #[serde(rename = "IOGACGMFBKC")]
    pub iogacgmfbkc: String,

    #[serde(rename = "GFPCNPAKAFH")]
    pub gfpcnpakafh: String,
}

pub fn load() -> Result<RoguelikeCurseExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "RoguelikeCurseExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
