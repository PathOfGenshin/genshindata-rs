/// This file was automatically generated by quicktype
/// DO NOT MANUALLY EDIT THIS FILE!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type MonsterExcelConfigData = Vec<MonsterExcelConfigDatum>;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct MonsterExcelConfigDatum {
    pub monster_name: String,
    #[serde(rename = "type")]
    pub monster_excel_config_datum_type: MonsterExcelConfigDatumType,
    pub script_data_path_hash: Option<f64>,
    pub server_script: ServerScript,
    pub combat_config_hash: f64,
    pub affix: Vec<i64>,
    pub ai: Ai,
    #[serde(rename = "isAIHashCheck")]
    pub is_ai_hash_check: Option<bool>,
    pub equips: Vec<i64>,
    pub hp_drops: Vec<HpDrop>,
    pub kill_drop_id: Option<i64>,
    pub exclude_weathers: ExcludeWeathers,
    #[serde(rename = "featureTagGroupID")]
    pub feature_tag_group_id: Option<i64>,
    #[serde(rename = "mpPropID")]
    pub mp_prop_id: i64,
    pub skin: String,
    pub describe_id: Option<i64>,
    #[serde(rename = "combatBGMLevel")]
    pub combat_bgm_level: Option<i64>,
    pub entity_budget_level: Option<i64>,
    pub hp_base: f64,
    pub attack_base: Option<f64>,
    pub defense_base: Option<i64>,
    pub fire_sub_hurt: Option<f64>,
    pub grass_sub_hurt: Option<f64>,
    pub water_sub_hurt: Option<f64>,
    pub elec_sub_hurt: Option<f64>,
    pub wind_sub_hurt: Option<f64>,
    pub ice_sub_hurt: Option<f64>,
    pub rock_sub_hurt: Option<f64>,
    pub prop_grow_curves: Vec<PropGrowCurve>,
    pub physical_sub_hurt: Option<f64>,
    pub prefab_path_ragdoll_hash: Option<f64>,
    pub deformation_mesh_path_hash: Option<f64>,
    pub id: i64,
    pub name_text_map_hash: i64,
    pub prefab_path_hash: f64,
    pub prefab_path_remote_hash: f64,
    pub controller_path_hash: f64,
    pub controller_path_remote_hash: f64,
    #[serde(rename = "campID")]
    pub camp_id: i64,
    #[serde(rename = "LODPatternName")]
    pub lod_pattern_name: LodPatternName,
    pub security_level: Option<SecurityLevel>,
    pub is_invisible_reset: Option<bool>,
    pub safety_check: Option<bool>,
    pub is_scene_reward: Option<bool>,
    pub vision_level: Option<VisionLevel>,
    #[serde(rename = "NFCAAJNGGND")]
    pub nfcaajnggnd: Option<Nfcaajnggnd>,
    #[serde(rename = "AJGDFKCDNDC")]
    pub ajgdfkcdndc: Option<bool>,
    #[serde(rename = "radarHintID")]
    pub radar_hint_id: Option<i64>,
    pub can_swim: Option<bool>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum Ai {
    Assist01,
    Dragon01,
    #[serde(rename = "")]
    Empty,
    Playing,
    Ranged01,
    Scout01,
    Sentry02,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum ExcludeWeathers {
    #[serde(rename = "")]
    Empty,
    #[serde(rename = "雨,雷雨,雪")]
    ExcludeWeathers,
    #[serde(rename = "雷雨,雪")]
    Fluffy,
    #[serde(rename = "雪")]
    Purple,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct HpDrop {
    pub drop_id: Option<i64>,
    pub hp_percent: Option<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum LodPatternName {
    #[serde(rename = "Animal_Default_01")]
    AnimalDefault01,
    #[serde(rename = "Animal_Special_200_01")]
    AnimalSpecial200_01,
    #[serde(rename = "Animal_Special_20_01")]
    AnimalSpecial20_01,
    #[serde(rename = "Animal_Special_40_01")]
    AnimalSpecial40_01,
    #[serde(rename = "")]
    Empty,
    #[serde(rename = "Monster_Regisvine_Electric_01")]
    MonsterRegisvineElectric01,
    #[serde(rename = "Monster_Special_200_01")]
    MonsterSpecial200_01,
    #[serde(rename = "Monster_Special_Dragon_01")]
    MonsterSpecialDragon01,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum MonsterExcelConfigDatumType {
    #[serde(rename = "MONSTER_BOSS")]
    MonsterBoss,
    #[serde(rename = "MONSTER_ENV_ANIMAL")]
    MonsterEnvAnimal,
    #[serde(rename = "MONSTER_FISH")]
    MonsterFish,
    #[serde(rename = "MONSTER_ORDINARY")]
    MonsterOrdinary,
    #[serde(rename = "MONSTER_PARTNER")]
    MonsterPartner,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum Nfcaajnggnd {
    Ousia,
    Pneuma,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct PropGrowCurve {
    #[serde(rename = "type")]
    pub prop_grow_curve_type: Option<PropGrowCurveType>,
    pub grow_curve: Option<GrowCurve>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum GrowCurve {
    #[serde(rename = "GROW_CURVE_ATTACK")]
    GrowCurveAttack,
    #[serde(rename = "GROW_CURVE_ATTACK_2")]
    GrowCurveAttack2,
    #[serde(rename = "GROW_CURVE_DEFENDING")]
    GrowCurveDefending,
    #[serde(rename = "GROW_CURVE_DEFENSE")]
    GrowCurveDefense,
    #[serde(rename = "GROW_CURVE_HP")]
    GrowCurveHp,
    #[serde(rename = "GROW_CURVE_HP_2")]
    GrowCurveHp2,
    #[serde(rename = "GROW_CURVE_HP_ENVIRONMENT")]
    GrowCurveHpEnvironment,
    #[serde(rename = "GROW_CURVE_HP_LITTLEMONSTER")]
    GrowCurveHpLittlemonster,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum PropGrowCurveType {
    #[serde(rename = "FIGHT_PROP_BASE_ATTACK")]
    FightPropBaseAttack,
    #[serde(rename = "FIGHT_PROP_BASE_DEFENSE")]
    FightPropBaseDefense,
    #[serde(rename = "FIGHT_PROP_BASE_HP")]
    FightPropBaseHp,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum SecurityLevel {
    #[serde(rename = "BOSS")]
    Boss,
    #[serde(rename = "ELITE")]
    Elite,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub enum ServerScript {
    #[serde(rename = "")]
    Empty,
    #[serde(rename = "SubFieldDrop_LightBall")]
    SubFieldDropLightBall,
    #[serde(rename = "SubFieldDrop_Mimik_Ice")]
    SubFieldDropMimikIce,
    #[serde(rename = "Test_Mole_MoraDrop")]
    TestMoleMoraDrop,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum VisionLevel {
    #[serde(rename = "VISION_LEVEL_LITTLE_REMOTE")]
    VisionLevelLittleRemote,
    #[serde(rename = "VISION_LEVEL_NEARBY")]
    VisionLevelNearby,
    #[serde(rename = "VISION_LEVEL_SUPER")]
    VisionLevelSuper,
    #[serde(rename = "VISION_LEVEL_SUPER_NEARBY")]
    VisionLevelSuperNearby,
}
