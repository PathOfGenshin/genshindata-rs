// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type FireworksExcelConfigData = Vec<FireworksExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct FireworksExcelConfigDatum {
    #[serde(rename = "materialID")]
    pub material_id: i64,

    #[serde(rename = "GHKLMMFMNIA")]
    pub ghklmmfmnia: Vec<Ghklmmfmnia>,

    #[serde(rename = "PAECEKHNJCC")]
    pub paecekhnjcc: Paecekhnjcc,

    #[serde(rename = "EPFGJDFJDPP")]
    pub epfgjdfjdpp: Epfgjdfjdpp,

    #[serde(rename = "HBMEANFLCOO")]
    pub hbmeanflcoo: Vec<String>,

    #[serde(rename = "NGCJFPICJNA")]
    pub ngcjfpicjna: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Ghklmmfmnia {
    #[serde(rename = "type")]
    pub ghklmmfmnia_type: Type,

    #[serde(rename = "LJMNCLKNGKO")]
    pub ljmnclkngko: i64,

    #[serde(rename = "IHEPCNDBAKC")]
    pub ihepcndbakc: Option<bool>,

    #[serde(rename = "LIAKCEOOOCH")]
    pub liakceoooch: Vec<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Epfgjdfjdpp {
    #[serde(rename = "Eff_SceneObj_Fireworks_Bullet")]
    EffSceneObjFireworksBullet,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "FIREWORKS_REFORM_PARAM_COLOR")]
    FireworksReformParamColor,

    #[serde(rename = "FIREWORKS_REFORM_PARAM_DENSITY")]
    FireworksReformParamDensity,

    #[serde(rename = "FIREWORKS_REFORM_PARAM_HEIGHT")]
    FireworksReformParamHeight,

    #[serde(rename = "FIREWORKS_REFORM_PARAM_ROTATION")]
    FireworksReformParamRotation,

    #[serde(rename = "FIREWORKS_REFORM_PARAM_SIZE")]
    FireworksReformParamSize,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Paecekhnjcc {
    #[serde(rename = "PatternShapeFireworks")]
    PatternShapeFireworks,

    #[serde(rename = "SphericalFireworks")]
    SphericalFireworks,
}

pub fn load() -> Result<FireworksExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "FireworksExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
