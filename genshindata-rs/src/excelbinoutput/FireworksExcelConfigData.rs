// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type FireworksExcelConfigData = Vec<FireworksExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct FireworksExcelConfigDatum {
    #[serde(rename = "materialID")]
    pub material_id: i64,

    #[serde(rename = "PNDPMJJMHKE")]
    pub pndpmjjmhke: Vec<Pndpmjjmhke>,

    #[serde(rename = "PHOADJJMHCB")]
    pub phoadjjmhcb: Phoadjjmhcb,

    #[serde(rename = "HGJDPBPMJCH")]
    pub hgjdpbpmjch: Hgjdpbpmjch,

    #[serde(rename = "GJHFPMAHNEK")]
    pub gjhfpmahnek: String,

    #[serde(rename = "MDCGLKFGKIO")]
    pub mdcglkfgkio: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Pndpmjjmhke {
    #[serde(rename = "type")]
    pub pndpmjjmhke_type: Type,

    #[serde(rename = "KKICHDPAPPF")]
    pub kkichdpappf: i64,

    #[serde(rename = "ONHLLPDNECJ")]
    pub onhllpdnecj: Option<bool>,

    #[serde(rename = "BNCEDOAGFBE")]
    pub bncedoagfbe: Vec<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Hgjdpbpmjch {
    #[serde(rename = "Eff_SceneObj_Fireworks_Bullet")]
    EffSceneObjFireworksBullet,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Phoadjjmhcb {
    #[serde(rename = "PatternShapeFireworks")]
    PatternShapeFireworks,

    #[serde(rename = "SphericalFireworks")]
    SphericalFireworks,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "FIREWORKS_REFORM_PARAM_COLOR")]
    FireworksReformParamColor,

    #[serde(rename = "FIREWORKS_REFORM_PARAM_DENSITY")]
    FireworksReformParamDensity,

    #[serde(rename = "FIREWORKS_REFORM_PARAM_HEIGHT")]
    FireworksReformParamHeight,

    #[serde(rename = "FIREWORKS_REFORM_PARAM_ROTATION")]
    FireworksReformParamRotation,

    #[serde(rename = "FIREWORKS_REFORM_PARAM_SIZE")]
    FireworksReformParamSize,
}

pub fn load() -> Result<FireworksExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "FireworksExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
