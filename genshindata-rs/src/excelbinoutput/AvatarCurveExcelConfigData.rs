// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type AvatarCurveExcelConfigData = Vec<AvatarCurveExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct AvatarCurveExcelConfigDatum {
    #[serde(rename = "level")]
    pub level: i64,

    #[serde(rename = "curveInfos")]
    pub curve_infos: Vec<CurveInfo>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct CurveInfo {
    #[serde(rename = "type")]
    pub curve_info_type: Type,

    #[serde(rename = "arith")]
    pub arith: Arith,

    #[serde(rename = "value")]
    pub value: f64,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Arith {
    #[serde(rename = "ARITH_MULTI")]
    ArithMulti,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "GROW_CURVE_ATTACK_S4")]
    GrowCurveAttackS4,

    #[serde(rename = "GROW_CURVE_ATTACK_S5")]
    GrowCurveAttackS5,

    #[serde(rename = "GROW_CURVE_HP_S4")]
    GrowCurveHpS4,

    #[serde(rename = "GROW_CURVE_HP_S5")]
    GrowCurveHpS5,
}

pub fn load() -> Result<AvatarCurveExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "AvatarCurveExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
