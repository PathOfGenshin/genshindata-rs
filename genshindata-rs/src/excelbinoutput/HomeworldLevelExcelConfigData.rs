// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type HomeworldLevelExcelConfigData = Vec<HomeworldLevelExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct HomeworldLevelExcelConfigDatum {
    #[serde(rename = "level")]
    pub level: i64,

    #[serde(rename = "exp")]
    pub exp: Option<i64>,

    #[serde(rename = "comfortPointLimit")]
    pub comfort_point_limit: i64,

    #[serde(rename = "homeCoinStoreLimit")]
    pub home_coin_store_limit: i64,

    #[serde(rename = "homeFetterExpStoreLimit")]
    pub home_fetter_exp_store_limit: i64,

    #[serde(rename = "rewardId")]
    pub reward_id: i64,

    #[serde(rename = "furnitureMakeSlotCount")]
    pub furniture_make_slot_count: i64,

    #[serde(rename = "outdoorUnlockBlockCount")]
    pub outdoor_unlock_block_count: i64,

    #[serde(rename = "freeUnlockModuleCount")]
    pub free_unlock_module_count: i64,

    #[serde(rename = "deployNpcCount")]
    pub deploy_npc_count: i64,

    #[serde(rename = "djinnGadgetId")]
    pub djinn_gadget_id: i64,

    #[serde(rename = "limitShopGoodsCount")]
    pub limit_shop_goods_count: i64,

    #[serde(rename = "levelFuncs")]
    pub level_funcs: Vec<String>,
}

pub fn load() -> Result<HomeworldLevelExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "HomeworldLevelExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
