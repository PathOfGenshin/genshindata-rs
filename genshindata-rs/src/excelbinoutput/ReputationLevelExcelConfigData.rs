// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type ReputationLevelExcelConfigData = Vec<ReputationLevelExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ReputationLevelExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "level")]
    pub level: i64,

    #[serde(rename = "cityId")]
    pub city_id: i64,

    #[serde(rename = "levelNameTextMapHash")]
    pub level_name_text_map_hash: i64,

    #[serde(rename = "nextLevelExp")]
    pub next_level_exp: Option<i64>,

    #[serde(rename = "rewardId")]
    pub reward_id: i64,

    #[serde(rename = "requestGroupId")]
    pub request_group_id: i64,

    #[serde(rename = "requestNum")]
    pub request_num: i64,

    #[serde(rename = "requestAcceptNum")]
    pub request_accept_num: i64,

    #[serde(rename = "functionId")]
    pub function_id: Option<i64>,
}

pub fn load() -> Result<ReputationLevelExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ReputationLevelExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
