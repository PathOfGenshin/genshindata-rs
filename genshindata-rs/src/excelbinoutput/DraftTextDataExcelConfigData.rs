// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type DraftTextDataExcelConfigData = Vec<DraftTextDataExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct DraftTextDataExcelConfigDatum {
    #[serde(rename = "draftId")]
    pub draft_id: i64,

    #[serde(rename = "draftBtnName")]
    pub draft_btn_name: DraftBtnName,

    #[serde(rename = "draftBtnTips")]
    pub draft_btn_tips: DraftBtnTips,

    #[serde(rename = "requirementDescTextMapHash")]
    pub requirement_desc_text_map_hash: i64,

    #[serde(rename = "draftLimitReasonDescTextMapHash")]
    pub draft_limit_reason_desc_text_map_hash: i64,

    #[serde(rename = "limitWarningDescTextMapHash")]
    pub limit_warning_desc_text_map_hash: i64,

    #[serde(rename = "inviteDescTextMapHash")]
    pub invite_desc_text_map_hash: i64,

    #[serde(rename = "inviteGuestDescTextMapHash")]
    pub invite_guest_desc_text_map_hash: i64,

    #[serde(rename = "inviteHostDescTextMapHash")]
    pub invite_host_desc_text_map_hash: i64,

    #[serde(rename = "inviteWarningDescTextMapHash")]
    pub invite_warning_desc_text_map_hash: i64,

    #[serde(rename = "draftTitleTextMapHash")]
    pub draft_title_text_map_hash: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum DraftBtnName {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "UI_ACTIVITY_CHARAMUSEMENT_MP_LEAVE")]
    UiActivityCharamusementMpLeave,

    #[serde(rename = "UI_ACTIVITY_FLEURFAIR_DRAFT_MPSTART")]
    UiActivityFleurfairDraftMpstart,

    #[serde(rename = "UI_ONLINE_DRAFT_BUTTON")]
    UiOnlineDraftButton,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum DraftBtnTips {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "UI_ACTIVITY_HIDE_AND_SEEK_SCOREMUTI_WARNING")]
    UiActivityHideAndSeekScoremutiWarning,
}

pub fn load() -> Result<DraftTextDataExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "DraftTextDataExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
