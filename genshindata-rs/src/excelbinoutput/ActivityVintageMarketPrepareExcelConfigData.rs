// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityVintageMarketPrepareExcelConfigData = Vec<ActivityVintageMarketPrepareExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityVintageMarketPrepareExcelConfigDatum {
    #[serde(rename = "configID")]
    pub config_id: i64,

    #[serde(rename = "BBJFHDOLMDL")]
    pub bbjfhdolmdl: i64,

    #[serde(rename = "BCCOHFGGBHE")]
    pub bccohfggbhe: Option<String>,

    #[serde(rename = "LBGFENIIAPP")]
    pub lbgfeniiapp: String,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "GMKLEKMNJEG")]
    pub gmklekmnjeg: i64,

    #[serde(rename = "OKGONBMGJCG")]
    pub okgonbmgjcg: i64,

    #[serde(rename = "BCKPMDMPHNK")]
    pub bckpmdmphnk: Option<i64>,

    #[serde(rename = "JLAGKENMBEP")]
    pub jlagkenmbep: Option<i64>,

    #[serde(rename = "MDMGJHBNHFC")]
    pub mdmgjhbnhfc: i64,

    #[serde(rename = "MCECNCGMMCO")]
    pub mcecncgmmco: i64,
}

pub fn load() -> Result<ActivityVintageMarketPrepareExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityVintageMarketPrepareExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
