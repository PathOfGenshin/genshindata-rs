/// This file was automatically generated by quicktype
/// DO NOT MANUALLY EDIT THIS FILE!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type CombineExcelConfigData = Vec<CombineExcelConfigDatum>;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct CombineExcelConfigDatum {
    pub combine_id: i64,
    pub player_level: Option<i64>,
    pub is_default_show: Option<bool>,
    pub combine_type: i64,
    pub sub_combine_type: i64,
    pub result_item_id: Option<i64>,
    #[serde(rename = "DFNHCCOCLPM")]
    pub dfnhccoclpm: Option<i64>,
    pub result_item_count: i64,
    pub scoin_cost: Option<i64>,
    pub random_items: Vec<RandomItem>,
    pub material_items: Vec<MaterialItem>,
    pub effect_desc_text_map_hash: i64,
    pub recipe_type: RecipeType,
    pub drop_id: Option<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct MaterialItem {
    pub id: Option<i64>,
    pub count: Option<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct RandomItem {
    pub count: Option<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum RecipeType {
    #[serde(rename = "RECIPE_TYPE_COMBINE")]
    RecipeTypeCombine,
    #[serde(rename = "RECIPE_TYPE_COMBINE_HOMEWORLD")]
    RecipeTypeCombineHomeworld,
    #[serde(rename = "RECIPE_TYPE_CONVERT")]
    RecipeTypeConvert,
}
