/// This file was automatically generated by quicktype
/// DO NOT MANUALLY EDIT THIS FILE!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type FetterStoryExcelConfigData = Vec<FetterStoryExcelConfigDatum>;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct FetterStoryExcelConfigDatum {
    pub story_title_text_map_hash: i64,
    pub story_context_text_map_hash: i64,
    pub story_title2_text_map_hash: i64,
    pub story_context2_text_map_hash: i64,
    pub tips: Vec<i64>,
    pub story_title_locked_text_map_hash: i64,
    pub fetter_id: i64,
    pub avatar_id: i64,
    pub open_conds: Vec<Pppldlpkpfa>,
    #[serde(rename = "PPPLDLPKPFA")]
    pub pppldlpkpfa: Vec<Pppldlpkpfa>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct Pppldlpkpfa {
    pub cond_type: Option<CondType>,
    pub param_list: Vec<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum CondType {
    #[serde(rename = "FETTER_COND_FETTER_LEVEL")]
    FetterCondFetterLevel,
    #[serde(rename = "FETTER_COND_FINISH_PARENT_QUEST")]
    FetterCondFinishParentQuest,
    #[serde(rename = "FETTER_COND_FINISH_QUEST")]
    FetterCondFinishQuest,
    #[serde(rename = "FETTER_COND_NOT_OPEN")]
    FetterCondNotOpen,
}
