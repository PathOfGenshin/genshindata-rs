// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type GcgCardFaceExcelConfigData = Vec<GcgCardFaceExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GcgCardFaceExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "itemId")]
    pub item_id: i64,

    #[serde(rename = "BAHNBAOENOB")]
    pub bahnbaoenob: i64,

    #[serde(rename = "JLCPJOOCJAC")]
    pub jlcpjoocjac: Jlcpjoocjac,

    #[serde(rename = "OCCOFKOKCHH")]
    pub occofkokchh: Option<i64>,

    #[serde(rename = "PBPMPBJICND")]
    pub pbpmpbjicnd: Vec<i64>,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "EHOCLIBNFEO")]
    pub ehoclibnfeo: Option<Ehoclibnfeo>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Ehoclibnfeo {
    #[serde(rename = "GCG_PROFICIENCY_REWARD")]
    GcgProficiencyReward,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Jlcpjoocjac {
    #[serde(rename = "GCG_CARD_FACE_GOLD")]
    GcgCardFaceGold,
}

pub fn load() -> Result<GcgCardFaceExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GCGCardFaceExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
