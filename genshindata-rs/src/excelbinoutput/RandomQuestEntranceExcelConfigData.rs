// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type RandomQuestEntranceExcelConfigData = Vec<RandomQuestEntranceExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct RandomQuestEntranceExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "weight")]
    pub weight: i64,

    #[serde(rename = "templateId")]
    pub template_id: i64,

    #[serde(rename = "filterList")]
    pub filter_list: Vec<FilterList>,

    #[serde(rename = "filterLogicType")]
    pub filter_logic_type: Option<FilterLogicType>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct FilterList {
    #[serde(rename = "DIDEGDKGONM")]
    pub didegdkgonm: Didegdkgonm,

    #[serde(rename = "NEBMMPNGPJG")]
    pub nebmmpngpjg: Vec<i64>,

    #[serde(rename = "NJEPLOJHBCE")]
    pub njeplojhbce: Option<Njeplojhbce>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Didegdkgonm {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "{PlayerLevel}")]
    PlayerLevel,

    #[serde(rename = "{QuestNpcID}")]
    QuestNpcId,

    #[serde(rename = "{QuestNpcID2}")]
    QuestNpcId2,

    #[serde(rename = "{QuestRescuePos}")]
    QuestRescuePos,

    #[serde(rename = "{QuestRescuePos1}")]
    QuestRescuePos1,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Njeplojhbce {
    #[serde(rename = "RQ_FILTER_NPC")]
    RqFilterNpc,

    #[serde(rename = "RQ_FILTER_PLAYER_LEVEL")]
    RqFilterPlayerLevel,

    #[serde(rename = "RQ_FILTER_PLAYER_POS_RING")]
    RqFilterPlayerPosRing,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum FilterLogicType {
    #[serde(rename = "LOGIC_AND")]
    LogicAnd,
}

pub fn load() -> Result<RandomQuestEntranceExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "RandomQuestEntranceExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
