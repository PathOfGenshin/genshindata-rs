// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type AudioPlayerlvConfigData = Vec<AudioPlayerlvConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct AudioPlayerlvConfigDatum {
    #[serde(rename = "CPOBBALBJFI")]
    pub cpobbalbjfi: i64,

    #[serde(rename = "IKFLJMKJAAC")]
    pub ikfljmkjaac: f64,

    #[serde(rename = "EAKKGHAHPNK")]
    pub eakkghahpnk: i64,

    #[serde(rename = "IFKAHCGFGNJ")]
    pub ifkahcgfgnj: f64,

    #[serde(rename = "CJDOAOEJAPM")]
    pub cjdoaoejapm: i64,

    #[serde(rename = "IHOCKKFOKOA")]
    pub ihockkfokoa: i64,

    #[serde(rename = "FFAMLNLCDJA")]
    pub ffamlnlcdja: Option<f64>,

    #[serde(rename = "EKCHBMPLEIF")]
    pub ekchbmpleif: Option<f64>,

    #[serde(rename = "AAHLOBEAAIB")]
    pub aahlobeaaib: Option<i64>,

    #[serde(rename = "OFCCGFKPBCC")]
    pub ofccgfkpbcc: Option<f64>,

    #[serde(rename = "NCJHDOOFPAD")]
    pub ncjhdoofpad: Option<f64>,
}

pub fn load() -> Result<AudioPlayerlvConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "AudioPlayerlvConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
