// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type AudioPlayerlvConfigData = Vec<AudioPlayerlvConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct AudioPlayerlvConfigDatum {
    #[serde(rename = "FFPKMLDJJOF")]
    pub ffpkmldjjof: i64,

    #[serde(rename = "FGFHBKLONMO")]
    pub fgfhbklonmo: f64,

    #[serde(rename = "HNIKHPCOCGO")]
    pub hnikhpcocgo: i64,

    #[serde(rename = "CDGHNEANGKJ")]
    pub cdghneangkj: f64,

    #[serde(rename = "HBLIDIPOKOK")]
    pub hblidipokok: i64,

    #[serde(rename = "KFHKLCHHPCO")]
    pub kfhklchhpco: i64,

    #[serde(rename = "GCNPPKPKKMA")]
    pub gcnppkpkkma: Option<f64>,

    #[serde(rename = "GEDJPNCOFIH")]
    pub gedjpncofih: Option<f64>,

    #[serde(rename = "FPGHKEADLLO")]
    pub fpghkeadllo: Option<i64>,

    #[serde(rename = "KFGPCCCFMAJ")]
    pub kfgpcccfmaj: Option<f64>,

    #[serde(rename = "KJDAJHCENGO")]
    pub kjdajhcengo: Option<f64>,
}

pub fn load() -> Result<AudioPlayerlvConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "AudioPlayerlvConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
