// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type OraionokamiDataExcelConfigData = Vec<OraionokamiDataExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct OraionokamiDataExcelConfigDatum {
    #[serde(rename = "configId")]
    pub config_id: i64,

    #[serde(rename = "NNMAEBBBKCD")]
    pub nnmaebbbkcd: i64,

    #[serde(rename = "NNEGFDOFJPI")]
    pub nnegfdofjpi: i64,

    #[serde(rename = "serverBuffId")]
    pub server_buff_id: i64,

    #[serde(rename = "JGKFKNMPEOD")]
    pub jgkfknmpeod: Vec<i64>,

    #[serde(rename = "GBHHEIMIENB")]
    pub gbhheimienb: i64,

    #[serde(rename = "EGIABOILDHC")]
    pub egiaboildhc: i64,

    #[serde(rename = "NIGIAEOAIEN")]
    pub nigiaeoaien: i64,

    #[serde(rename = "groupId")]
    pub group_id: i64,

    #[serde(rename = "IDHEEMANMBA")]
    pub idheemanmba: i64,

    #[serde(rename = "iconPath")]
    pub icon_path: String,
}

pub fn load() -> Result<OraionokamiDataExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "OraionokamiDataExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
