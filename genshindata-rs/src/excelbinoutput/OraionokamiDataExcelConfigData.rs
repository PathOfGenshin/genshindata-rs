// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type OraionokamiDataExcelConfigData = Vec<OraionokamiDataExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct OraionokamiDataExcelConfigDatum {
    #[serde(rename = "configId")]
    pub config_id: i64,

    #[serde(rename = "PJMBIJHOHPJ")]
    pub pjmbijhohpj: i64,

    #[serde(rename = "BEOFMONFKMA")]
    pub beofmonfkma: i64,

    #[serde(rename = "serverBuffId")]
    pub server_buff_id: i64,

    #[serde(rename = "HELELOGNAKG")]
    pub helelognakg: Vec<i64>,

    #[serde(rename = "LHLJBOFFDPO")]
    pub lhljboffdpo: i64,

    #[serde(rename = "HDJJIIFJOCH")]
    pub hdjjiifjoch: i64,

    #[serde(rename = "MHJBHEIDBNB")]
    pub mhjbheidbnb: i64,

    #[serde(rename = "groupId")]
    pub group_id: i64,

    #[serde(rename = "IFKAPGNLABF")]
    pub ifkapgnlabf: i64,

    #[serde(rename = "iconPath")]
    pub icon_path: String,
}

pub fn load() -> Result<OraionokamiDataExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "OraionokamiDataExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
