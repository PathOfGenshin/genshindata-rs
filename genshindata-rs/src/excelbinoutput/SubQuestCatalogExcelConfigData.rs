/// This file was automatically generated by quicktype
/// DO NOT MANUALLY EDIT THIS FILE!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type SubQuestCatalogExcelConfigData = Vec<SubQuestCatalogExcelConfigDatum>;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub struct SubQuestCatalogExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,
    pub blnfpehbnnd: Blnfpehbnnd,
    pub ghjogdiopha: Vec<Ghjogdiopha>,
    pub glplnlldlbd: Vec<Ghjogdiopha>,
    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,
    pub nhkpjccoekl: Option<Blnfpehbnnd>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Blnfpehbnnd {
    #[serde(rename = "LOGIC_AND")]
    LogicAnd,
    #[serde(rename = "LOGIC_OR")]
    LogicOr,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Ghjogdiopha {
    #[serde(rename = "type")]
    pub ghjogdiopha_type: Option<Type>,
    pub param: Option<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Type {
    #[serde(rename = "QUEST_CATALOG_COND_TYPE_QUEST")]
    QuestCatalogCondTypeQuest,
}
