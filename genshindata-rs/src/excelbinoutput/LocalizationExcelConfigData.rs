// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type LocalizationExcelConfigData = Vec<LocalizationExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct LocalizationExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "assetType")]
    pub asset_type: AssetType,

    #[serde(rename = "defaultPath")]
    pub default_path: String,

    #[serde(rename = "scPath")]
    pub sc_path: String,

    #[serde(rename = "tcPath")]
    pub tc_path: String,

    #[serde(rename = "enPath")]
    pub en_path: String,

    #[serde(rename = "krPath")]
    pub kr_path: String,

    #[serde(rename = "jpPath")]
    pub jp_path: String,

    #[serde(rename = "esPath")]
    pub es_path: String,

    #[serde(rename = "frPath")]
    pub fr_path: String,

    #[serde(rename = "idPath")]
    pub id_path: String,

    #[serde(rename = "ptPath")]
    pub pt_path: String,

    #[serde(rename = "ruPath")]
    pub ru_path: String,

    #[serde(rename = "thPath")]
    pub th_path: String,

    #[serde(rename = "viPath")]
    pub vi_path: String,

    #[serde(rename = "dePath")]
    pub de_path: String,

    #[serde(rename = "CEPOILPMMBM")]
    pub cepoilpmmbm: String,

    #[serde(rename = "FJMFDOLGOAL")]
    pub fjmfdolgoal: String,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum AssetType {
    #[serde(rename = "LOC_IMAGE")]
    LocImage,

    #[serde(rename = "LOC_SUBTITLE")]
    LocSubtitle,

    #[serde(rename = "LOC_TEXT")]
    LocText,

    #[serde(rename = "LOC_TROPHY_SET_ICON")]
    LocTrophySetIcon,
}

pub fn load() -> Result<LocalizationExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "LocalizationExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
