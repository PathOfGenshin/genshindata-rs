// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type H5ActivityExcelConfigData = Vec<H5ActivityExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct H5ActivityExcelConfigDatum {
    #[serde(rename = "h5ActivityId")]
    pub h5_activity_id: i64,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "detailTextMapHash")]
    pub detail_text_map_hash: i64,

    #[serde(rename = "condList")]
    pub cond_list: Vec<CondList>,

    #[serde(rename = "condComb")]
    pub cond_comb: Option<CondComb>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct CondList {
    #[serde(rename = "paramStr")]
    pub param_str: String,

    #[serde(rename = "type")]
    pub cond_list_type: Option<Type>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum CondComb {
    #[serde(rename = "LOGIC_AND")]
    LogicAnd,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "H5_ACTIVITY_COND_PLAYER_LEVEL")]
    H5ActivityCondPlayerLevel,
}

pub fn load() -> Result<H5ActivityExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "H5ActivityExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
