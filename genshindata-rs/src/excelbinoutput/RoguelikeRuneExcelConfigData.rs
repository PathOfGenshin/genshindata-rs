// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type RoguelikeRuneExcelConfigData = Vec<RoguelikeRuneExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct RoguelikeRuneExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "KGAGEIPJPPE")]
    pub kgageipjppe: bool,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "BIAECAPIPCD")]
    pub biaecapipcd: String,

    #[serde(rename = "GLAHNNMFLAN")]
    pub glahnnmflan: String,

    #[serde(rename = "AOKMMHNOAEP")]
    pub aokmmhnoaep: String,

    #[serde(rename = "DFNALCNOBMJ")]
    pub dfnalcnobmj: String,

    #[serde(rename = "HCMJACIMBHE")]
    pub hcmjacimbhe: i64,

    #[serde(rename = "elementType")]
    pub element_type: i64,

    #[serde(rename = "abilityName")]
    pub ability_name: String,
}

pub fn load() -> Result<RoguelikeRuneExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "RoguelikeRuneExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
