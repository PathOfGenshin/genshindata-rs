// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type GcgDeckCardExcelConfigData = Vec<GcgDeckCardExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GcgDeckCardExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "LHBDPHCFMBB")]
    pub lhbdphcfmbb: Vec<Lhbdphcfmbb>,

    #[serde(rename = "sortOrder")]
    pub sort_order: i64,

    #[serde(rename = "GKHGDCBALPE")]
    pub gkhgdcbalpe: Vec<i64>,

    #[serde(rename = "storyTitleTextMapHash")]
    pub story_title_text_map_hash: i64,

    #[serde(rename = "PEBMEKJKGOB")]
    pub pebmekjkgob: i64,

    #[serde(rename = "FLLIMNKBNNC")]
    pub fllimnkbnnc: i64,

    #[serde(rename = "itemID")]
    pub item_id: i64,

    #[serde(rename = "AKHMBCIIKMG")]
    pub akhmbciikmg: Option<i64>,

    #[serde(rename = "LCEEIGFHEJC")]
    pub lceeigfhejc: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Lhbdphcfmbb {
    #[serde(rename = "GCG_TAG_CAMP_MONSTER")]
    GcgTagCampMonster,

    #[serde(rename = "GCG_TAG_ELEMENT_ANEMO")]
    GcgTagElementAnemo,

    #[serde(rename = "GCG_TAG_ELEMENT_CRYO")]
    GcgTagElementCryo,

    #[serde(rename = "GCG_TAG_ELEMENT_DENDRO")]
    GcgTagElementDendro,

    #[serde(rename = "GCG_TAG_ELEMENT_ELECTRO")]
    GcgTagElementElectro,

    #[serde(rename = "GCG_TAG_ELEMENT_GEO")]
    GcgTagElementGeo,

    #[serde(rename = "GCG_TAG_ELEMENT_HYDRO")]
    GcgTagElementHydro,

    #[serde(rename = "GCG_TAG_ELEMENT_PYRO")]
    GcgTagElementPyro,

    #[serde(rename = "GCG_TAG_NONE")]
    GcgTagNone,
}

pub fn load() -> Result<GcgDeckCardExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GCGDeckCardExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
