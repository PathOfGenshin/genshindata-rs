// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type WorldAreaConfigData = Vec<WorldAreaConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct WorldAreaConfigDatum {
    #[serde(rename = "ID")]
    pub id: i64,

    #[serde(rename = "SceneID")]
    pub scene_id: i64,

    #[serde(rename = "AreaType")]
    pub area_type: AreaType,

    #[serde(rename = "AreaID1")]
    pub area_id1: i64,

    #[serde(rename = "AreaNameTextMapHash")]
    pub area_name_text_map_hash: i64,

    #[serde(rename = "towerPointId")]
    pub tower_point_id: Option<i64>,

    #[serde(rename = "elementType")]
    pub element_type: Option<ElementType>,

    #[serde(rename = "showTips")]
    pub show_tips: Option<bool>,

    #[serde(rename = "GreyLevel")]
    pub grey_level: Vec<Option<serde_json::Value>>,

    #[serde(rename = "minimapScale")]
    pub minimap_scale: f64,

    #[serde(rename = "AreaID2")]
    pub area_id2: Option<i64>,

    #[serde(rename = "terrainType")]
    pub terrain_type: Option<TerrainType>,

    #[serde(rename = "AreaDefaultLock")]
    pub area_default_lock: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum AreaType {
    #[serde(rename = "LEVEL_1")]
    Level1,

    #[serde(rename = "LEVEL_2")]
    Level2,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum ElementType {
    #[serde(rename = "Electric")]
    Electric,

    #[serde(rename = "Grass")]
    Grass,

    #[serde(rename = "Rock")]
    Rock,

    #[serde(rename = "Wind")]
    Wind,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum TerrainType {
    #[serde(rename = "AREA_TERRAIN_CITY")]
    AreaTerrainCity,

    #[serde(rename = "AREA_TERRAIN_OUTDOOR")]
    AreaTerrainOutdoor,
}

pub fn load() -> Result<WorldAreaConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "WorldAreaConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
