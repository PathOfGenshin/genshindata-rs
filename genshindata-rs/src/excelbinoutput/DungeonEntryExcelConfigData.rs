/// This file was automatically generated by quicktype
/// DO NOT MANUALLY EDIT THIS FILE!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type DungeonEntryExcelConfigData = Vec<DungeonEntryExcelConfigDatum>;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct DungeonEntryExcelConfigDatum {
    pub id: i64,
    pub scene_id: i64,
    pub dungeon_entry_id: i64,
    #[serde(rename = "type")]
    pub dungeon_entry_excel_config_datum_type: String,
    pub is_show_in_adv_handbook: Option<bool>,
    pub desc_text_map_hash: i64,
    pub cooldown_tips_dungeon_id: Vec<i64>,
    pub cond_comb: Option<CondComb>,
    pub satisfied_cond: Vec<SatisfiedCond>,
    pub pic_path: String,
    pub system_open_ui_id: Option<i64>,
    pub reward_data_id: Option<i64>,
    pub description_cycle_reward_list: Vec<Vec<i64>>,
    pub is_daily_refresh: Option<bool>,
    pub is_default_open: Option<bool>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum CondComb {
    #[serde(rename = "LOGIC_OR")]
    LogicOr,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct SatisfiedCond {
    #[serde(rename = "type")]
    pub satisfied_cond_type: Option<Type>,
    pub param1: Option<i64>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum Type {
    #[serde(rename = "DUNGEON_ENTRY_CONDITION_LEVEL")]
    DungeonEntryConditionLevel,
    #[serde(rename = "DUNGEON_ENTRY_CONDITION_QUEST")]
    DungeonEntryConditionQuest,
}
