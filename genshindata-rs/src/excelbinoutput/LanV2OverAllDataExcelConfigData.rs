// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type LanV2OverAllDataExcelConfigData = Vec<LanV2OverAllDataExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct LanV2OverAllDataExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "activityId")]
    pub activity_id: i64,

    #[serde(rename = "LHKEPKPLCFD")]
    pub lhkepkplcfd: i64,

    #[serde(rename = "GCJGDIIMOLC")]
    pub gcjgdiimolc: i64,

    #[serde(rename = "HCGKDNOAMLG")]
    pub hcgkdnoamlg: Vec<i64>,

    #[serde(rename = "MBHCNPKGCBD")]
    pub mbhcnpkgcbd: Vec<i64>,

    #[serde(rename = "JJJHPBAIJFB")]
    pub jjjhpbaijfb: i64,

    #[serde(rename = "IAIELMGHBOK")]
    pub iaielmghbok: Vec<i64>,

    #[serde(rename = "CIFGHEEOLCN")]
    pub cifgheeolcn: i64,

    #[serde(rename = "CENFHOIHKMG")]
    pub cenfhoihkmg: Vec<i64>,

    #[serde(rename = "GIEJGCDLJCM")]
    pub giejgcdljcm: i64,
}

pub fn load() -> Result<LanV2OverAllDataExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "LanV2OverAllDataExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
