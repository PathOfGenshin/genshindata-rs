// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityChessLevelExcelConfigData = Vec<ActivityChessLevelExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityChessLevelExcelConfigDatum {
    #[serde(rename = "level")]
    pub level: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "KPKMLNMBOBF")]
    pub kpkmlnmbobf: Option<i64>,

    #[serde(rename = "BDFEMGLILPA")]
    pub bdfemglilpa: i64,

    #[serde(rename = "GLGEFCNNCLI")]
    pub glgefcnncli: i64,

    #[serde(rename = "IGLMLHCCAOK")]
    pub iglmlhccaok: i64,

    #[serde(rename = "IFGIDNHBEDH")]
    pub ifgidnhbedh: i64,

    #[serde(rename = "BAMBOPAACPO")]
    pub bambopaacpo: Vec<i64>,

    #[serde(rename = "FCOMKEHOGGO")]
    pub fcomkehoggo: i64,

    #[serde(rename = "IEPMKIHIJLD")]
    pub iepmkihijld: Option<bool>,

    #[serde(rename = "ODDBOJCCCGC")]
    pub oddbojcccgc: bool,

    #[serde(rename = "MFFCJMEINPM")]
    pub mffcjmeinpm: Option<String>,
}

pub fn load() -> Result<ActivityChessLevelExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityChessLevelExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
