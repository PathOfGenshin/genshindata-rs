// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityChessLevelExcelConfigData = Vec<ActivityChessLevelExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityChessLevelExcelConfigDatum {
    #[serde(rename = "level")]
    pub level: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "BMLKHDCHDMP")]
    pub bmlkhdchdmp: Option<i64>,

    #[serde(rename = "FFDOGGFGKBO")]
    pub ffdoggfgkbo: i64,

    #[serde(rename = "PGOLOOINLKP")]
    pub pgolooinlkp: i64,

    #[serde(rename = "HGFNCNJKPAH")]
    pub hgfncnjkpah: i64,

    #[serde(rename = "DEDKGGDGBAI")]
    pub dedkggdgbai: i64,

    #[serde(rename = "OCDAMHFMGMF")]
    pub ocdamhfmgmf: Vec<i64>,

    #[serde(rename = "EAGGDNECEAC")]
    pub eaggdneceac: i64,

    #[serde(rename = "MDMFAKNPNAF")]
    pub mdmfaknpnaf: Option<bool>,

    #[serde(rename = "FMPDGNLELLM")]
    pub fmpdgnlellm: bool,

    #[serde(rename = "AHAKBMNMOOC")]
    pub ahakbmnmooc: Option<String>,
}

pub fn load() -> Result<ActivityChessLevelExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityChessLevelExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
