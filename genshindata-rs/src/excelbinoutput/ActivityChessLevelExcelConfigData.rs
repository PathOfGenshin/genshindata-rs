// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type ActivityChessLevelExcelConfigData = Vec<ActivityChessLevelExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityChessLevelExcelConfigDatum {
    #[serde(rename = "level")]
    pub level: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "DMFDMFLMCIL")]
    pub dmfdmflmcil: Option<i64>,

    #[serde(rename = "OPOFCLNMDEL")]
    pub opofclnmdel: i64,

    #[serde(rename = "OLCOGJFLPOM")]
    pub olcogjflpom: i64,

    #[serde(rename = "DKIPAOJNFID")]
    pub dkipaojnfid: i64,

    #[serde(rename = "OGAAMIHDNLA")]
    pub ogaamihdnla: i64,

    #[serde(rename = "LOCALJBMLEO")]
    pub localjbmleo: Vec<i64>,

    #[serde(rename = "BPJGLIBLMEB")]
    pub bpjgliblmeb: i64,

    #[serde(rename = "DHABLLAKKDO")]
    pub dhabllakkdo: Option<bool>,

    #[serde(rename = "NENNMIHNGJD")]
    pub nennmihngjd: bool,

    #[serde(rename = "KAJABPLDOEE")]
    pub kajabpldoee: Option<String>,
}

pub fn load() -> Result<ActivityChessLevelExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityChessLevelExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
