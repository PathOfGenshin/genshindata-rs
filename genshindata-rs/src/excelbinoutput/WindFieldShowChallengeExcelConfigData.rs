// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type WindFieldShowChallengeExcelConfigData = Vec<WindFieldShowChallengeExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct WindFieldShowChallengeExcelConfigDatum {
    #[serde(rename = "LPFJMKFMDBA")]
    pub lpfjmkfmdba: i64,

    #[serde(rename = "BNHPJBGHGOP")]
    pub bnhpjbghgop: Option<i64>,

    #[serde(rename = "showType")]
    pub show_type: String,

    #[serde(rename = "JJOAKAFCLBH")]
    pub jjoakafclbh: Vec<i64>,

    #[serde(rename = "titleTextMapHash")]
    pub title_text_map_hash: i64,

    #[serde(rename = "NDPHNBNGAKE")]
    pub ndphnbngake: i64,

    #[serde(rename = "HJLLEFLCHBI")]
    pub hjlleflchbi: i64,

    #[serde(rename = "FBEFPOLJDCP")]
    pub fbefpoljdcp: Option<i64>,
}

pub fn load() -> Result<WindFieldShowChallengeExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "WindFieldShowChallengeExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
