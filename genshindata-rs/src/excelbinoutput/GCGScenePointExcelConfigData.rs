// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type GcgScenePointExcelConfigData = Vec<GcgScenePointExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GcgScenePointExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "pos")]
    pub pos: Vec<f64>,

    #[serde(rename = "DGFNNFACJCG")]
    pub dgfnnfacjcg: f64,

    #[serde(rename = "MHGMMHNIPCP")]
    pub mhgmmhnipcp: Option<Mhgmmhnipcp>,

    #[serde(rename = "CILGBCJDGAL")]
    pub cilgbcjdgal: Vec<Cilgbcjdgal>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Cilgbcjdgal {
    #[serde(rename = "SUPPORT_CALL")]
    SupportCall,

    #[serde(rename = "SUPPORT_NONE")]
    SupportNone,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Mhgmmhnipcp {
    #[serde(rename = "POINT_MOTION_SIT")]
    PointMotionSit,

    #[serde(rename = "POINT_MOTION_STAND")]
    PointMotionStand,
}

pub fn load() -> Result<GcgScenePointExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GCGScenePointExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
