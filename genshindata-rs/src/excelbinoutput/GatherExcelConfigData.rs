// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type GatherExcelConfigData = Vec<GatherExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GatherExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "areaId")]
    pub area_id: Option<i64>,

    #[serde(rename = "pointType")]
    pub point_type: i64,

    #[serde(rename = "gadgetId")]
    pub gadget_id: i64,

    #[serde(rename = "itemId")]
    pub item_id: i64,

    #[serde(rename = "extraItemIdVec")]
    pub extra_item_id_vec: Vec<i64>,

    #[serde(rename = "cd")]
    pub cd: i64,

    #[serde(rename = "priority")]
    pub priority: i64,

    #[serde(rename = "refreshId")]
    pub refresh_id: Option<i64>,

    #[serde(rename = "blockLimits")]
    pub block_limits: Vec<BlockLimit>,

    #[serde(rename = "initDisableInteract")]
    pub init_disable_interact: Option<bool>,

    #[serde(rename = "CIENIJLPNIN")]
    pub cienijlpnin: Option<Cienijlpnin>,

    #[serde(rename = "JAFPHBNDGJF")]
    pub jafphbndgjf: Option<bool>,

    #[serde(rename = "pointLocation")]
    pub point_location: Option<PointLocation>,

    #[serde(rename = "isForbidGuest")]
    pub is_forbid_guest: Option<bool>,

    #[serde(rename = "LCCCBCMJPHK")]
    pub lcccbcmjphk: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct BlockLimit {
    #[serde(rename = "blockId")]
    pub block_id: i64,

    #[serde(rename = "count")]
    pub count: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Cienijlpnin {
    #[serde(rename = "GATHER_SAVE_TYPE_HIGH")]
    GatherSaveTypeHigh,

    #[serde(rename = "GATHER_SAVE_TYPE_LOW")]
    GatherSaveTypeLow,

    #[serde(rename = "GATHER_SAVE_TYPE_MID")]
    GatherSaveTypeMid,

    #[serde(rename = "GATHER_SAVE_TYPE_OWN")]
    GatherSaveTypeOwn,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum PointLocation {
    #[serde(rename = "POINT_AIR")]
    PointAir,
}

pub fn load() -> Result<GatherExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GatherExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
