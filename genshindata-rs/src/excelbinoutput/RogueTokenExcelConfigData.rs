// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type RogueTokenExcelConfigData = Vec<RogueTokenExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct RogueTokenExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "stageId")]
    pub stage_id: i64,

    #[serde(rename = "level")]
    pub level: i64,

    #[serde(rename = "PNONIJHOHOA")]
    pub pnonijhohoa: Vec<i64>,

    #[serde(rename = "DIBNIILMPHD")]
    pub dibniilmphd: Vec<i64>,

    #[serde(rename = "CFBLKKMKIMH")]
    pub cfblkkmkimh: Vec<i64>,

    #[serde(rename = "FHDNMLEJGIB")]
    pub fhdnmlejgib: Option<Fhdnmlejgib>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Fhdnmlejgib {
    #[serde(rename = "ROGUE_MONSTER_DIFFICULTY_BOSS")]
    RogueMonsterDifficultyBoss,

    #[serde(rename = "ROGUE_MONSTER_DIFFICULTY_ELITE_EASY")]
    RogueMonsterDifficultyEliteEasy,

    #[serde(rename = "ROGUE_MONSTER_DIFFICULTY_ELITE_HARD")]
    RogueMonsterDifficultyEliteHard,
}

pub fn load() -> Result<RogueTokenExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "RogueTokenExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
