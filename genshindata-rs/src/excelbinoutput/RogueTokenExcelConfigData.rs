// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type RogueTokenExcelConfigData = Vec<RogueTokenExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct RogueTokenExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "stageId")]
    pub stage_id: i64,

    #[serde(rename = "level")]
    pub level: i64,

    #[serde(rename = "GNAHIEEDDKG")]
    pub gnahieeddkg: Vec<i64>,

    #[serde(rename = "EGMCDMGHAIA")]
    pub egmcdmghaia: Vec<i64>,

    #[serde(rename = "HFECNOEIOEL")]
    pub hfecnoeioel: Vec<i64>,

    #[serde(rename = "JIPOLNFCBIH")]
    pub jipolnfcbih: Option<Jipolnfcbih>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Jipolnfcbih {
    #[serde(rename = "ROGUE_MONSTER_DIFFICULTY_BOSS")]
    RogueMonsterDifficultyBoss,

    #[serde(rename = "ROGUE_MONSTER_DIFFICULTY_ELITE_EASY")]
    RogueMonsterDifficultyEliteEasy,

    #[serde(rename = "ROGUE_MONSTER_DIFFICULTY_ELITE_HARD")]
    RogueMonsterDifficultyEliteHard,
}

pub fn load() -> Result<RogueTokenExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "RogueTokenExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
