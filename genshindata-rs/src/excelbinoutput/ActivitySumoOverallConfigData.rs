// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivitySumoOverallConfigData = Vec<ActivitySumoOverallConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivitySumoOverallConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "activityId")]
    pub activity_id: i64,

    #[serde(rename = "scheduleId")]
    pub schedule_id: i64,

    #[serde(rename = "OJPIPPPAIPH")]
    pub ojpipppaiph: i64,

    #[serde(rename = "OKJNLFBNIHH")]
    pub okjnlfbnihh: i64,

    #[serde(rename = "rewardPreviewId")]
    pub reward_preview_id: i64,

    #[serde(rename = "NPKFHMGOEAJ")]
    pub npkfhmgoeaj: i64,

    #[serde(rename = "pushTipsId")]
    pub push_tips_id: i64,

    #[serde(rename = "teamNum")]
    pub team_num: i64,

    #[serde(rename = "NAMDLGLIAKA")]
    pub namdlgliaka: i64,

    #[serde(rename = "LHHLGGKLGAH")]
    pub lhhlggklgah: i64,

    #[serde(rename = "NCEPHNBADJK")]
    pub ncephnbadjk: i64,
}

pub fn load() -> Result<ActivitySumoOverallConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivitySumoOverallConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
