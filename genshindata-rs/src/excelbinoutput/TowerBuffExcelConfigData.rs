// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type TowerBuffExcelConfigData = Vec<TowerBuffExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct TowerBuffExcelConfigDatum {
    #[serde(rename = "towerBuffId")]
    pub tower_buff_id: i64,

    #[serde(rename = "lastingType")]
    pub lasting_type: LastingType,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "buffIcon")]
    pub buff_icon: BuffIcon,

    #[serde(rename = "buffId")]
    pub buff_id: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum BuffIcon {
    #[serde(rename = "UI_Icon_TowerbeginCard_Attack")]
    UiIconTowerbeginCardAttack,

    #[serde(rename = "UI_Icon_TowerbeginCard_Defense")]
    UiIconTowerbeginCardDefense,

    #[serde(rename = "UI_Icon_TowerbeginCard_Life")]
    UiIconTowerbeginCardLife,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum LastingType {
    #[serde(rename = "TOWER_BUFF_LASTING_FLOOR")]
    TowerBuffLastingFloor,

    #[serde(rename = "TOWER_BUFF_LASTING_IMMEDIATE")]
    TowerBuffLastingImmediate,

    #[serde(rename = "TOWER_BUFF_LASTING_LEVEL")]
    TowerBuffLastingLevel,
}

pub fn load() -> Result<TowerBuffExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "TowerBuffExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
