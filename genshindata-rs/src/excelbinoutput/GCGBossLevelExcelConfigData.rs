// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type GcgBossLevelExcelConfigData = Vec<GcgBossLevelExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GcgBossLevelExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "LJBDOJNCJJF")]
    pub ljbdojncjjf: i64,

    #[serde(rename = "BDHLNEPKKBM")]
    pub bdhlnepkkbm: i64,

    #[serde(rename = "unlockCond")]
    pub unlock_cond: String,

    #[serde(rename = "GEPDGCLJHDF")]
    pub gepdgcljhdf: i64,

    #[serde(rename = "DOAEHFLLBAM")]
    pub doaehfllbam: i64,

    #[serde(rename = "OIHPFIOEBLH")]
    pub oihpfioeblh: i64,

    #[serde(rename = "GFAPBEIFFFF")]
    pub gfapbeiffff: i64,

    #[serde(rename = "monsterId")]
    pub monster_id: i64,

    #[serde(rename = "BJMJHPBMBPM")]
    pub bjmjhpbmbpm: i64,
}

pub fn load() -> Result<GcgBossLevelExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GCGBossLevelExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
