// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type GcgSkillExcelConfigData = Vec<GcgSkillExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GcgSkillExcelConfigDatum {
    #[serde(rename = "Id")]
    pub id: i64,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "ODACBHLGCIN")]
    pub odacbhlgcin: String,

    #[serde(rename = "OHGMCNABLOD")]
    pub ohgmcnablod: String,

    #[serde(rename = "NGLIJEOOBBB")]
    pub nglijeoobbb: String,

    #[serde(rename = "BFOPNIGLEMK")]
    pub bfopniglemk: Vec<Bfopniglemk>,

    #[serde(rename = "LIIAJHBFLIK")]
    pub liiajhbflik: Vec<Liiajhbflik>,

    #[serde(rename = "KPPDPJPILLC")]
    pub kppdpjpillc: Option<Kppdpjpillc>,

    #[serde(rename = "GOOGPDHGMGN")]
    pub googpdhgmgn: Option<i64>,

    #[serde(rename = "KDEGMOFHFKP")]
    pub kdegmofhfkp: Option<i64>,

    #[serde(rename = "EHEAJIPNMBJ")]
    pub eheajipnmbj: Option<i64>,

    #[serde(rename = "PHNMFFMECLK")]
    pub phnmffmeclk: Option<f64>,

    #[serde(rename = "FOHLOAAPBEJ")]
    pub fohloaapbej: Option<bool>,

    #[serde(rename = "isHidden")]
    pub is_hidden: Option<bool>,

    #[serde(rename = "GHCDCDIJAID")]
    pub ghcdcdijaid: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Bfopniglemk {
    #[serde(rename = "CFKKLOGFHBH")]
    pub cfkklogfhbh: Option<Cfkklogfhbh>,

    #[serde(rename = "count")]
    pub count: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Cfkklogfhbh {
    #[serde(rename = "GCG_COST_DICE_ANEMO")]
    GcgCostDiceAnemo,

    #[serde(rename = "GCG_COST_DICE_CRYO")]
    GcgCostDiceCryo,

    #[serde(rename = "GCG_COST_DICE_DENDRO")]
    GcgCostDiceDendro,

    #[serde(rename = "GCG_COST_DICE_ELECTRO")]
    GcgCostDiceElectro,

    #[serde(rename = "GCG_COST_DICE_GEO")]
    GcgCostDiceGeo,

    #[serde(rename = "GCG_COST_DICE_HYDRO")]
    GcgCostDiceHydro,

    #[serde(rename = "GCG_COST_DICE_PYRO")]
    GcgCostDicePyro,

    #[serde(rename = "GCG_COST_DICE_SAME")]
    GcgCostDiceSame,

    #[serde(rename = "GCG_COST_DICE_VOID")]
    GcgCostDiceVoid,

    #[serde(rename = "GCG_COST_ENERGY")]
    GcgCostEnergy,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Kppdpjpillc {
    #[serde(rename = "OnBannerShow")]
    OnBannerShow,

    #[serde(rename = "OnBehaviorStart")]
    OnBehaviorStart,

    #[serde(rename = "OnHitLanded")]
    OnHitLanded,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Liiajhbflik {
    #[serde(rename = "GCG_SKILL_TAG_A")]
    GcgSkillTagA,

    #[serde(rename = "GCG_SKILL_TAG_E")]
    GcgSkillTagE,

    #[serde(rename = "GCG_SKILL_TAG_NONE")]
    GcgSkillTagNone,

    #[serde(rename = "GCG_SKILL_TAG_PASSIVE")]
    GcgSkillTagPassive,

    #[serde(rename = "GCG_SKILL_TAG_Q")]
    GcgSkillTagQ,
}

pub fn load() -> Result<GcgSkillExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GCGSkillExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
