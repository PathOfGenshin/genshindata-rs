// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type FungusFighterV2SkillExcelConfigData = Vec<FungusFighterV2SkillExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct FungusFighterV2SkillExcelConfigDatum {
    #[serde(rename = "ONEJALHEENC")]
    pub onejalheenc: i64,

    #[serde(rename = "iconPath")]
    pub icon_path: String,

    #[serde(rename = "IENLGHNBBLJ")]
    pub ienlghnbblj: String,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "descriptionTextMapHash")]
    pub description_text_map_hash: i64,

    #[serde(rename = "tags")]
    pub tags: Vec<i64>,

    #[serde(rename = "CBOOGEDNDIM")]
    pub cboogedndim: Option<f64>,

    #[serde(rename = "cost")]
    pub cost: Option<f64>,

    #[serde(rename = "AOFGHKDMGCH")]
    pub aofghkdmgch: Option<Aofghkdmgch>,

    #[serde(rename = "NCICNFJJBFE")]
    pub ncicnfjjbfe: Option<Ncicnfjjbfe>,

    #[serde(rename = "DEJFBJFJEKD")]
    pub dejfbjfjekd: Option<f64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Aofghkdmgch {
    #[serde(rename = "Auto")]
    Auto,

    #[serde(rename = "Manual")]
    Manual,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Ncicnfjjbfe {
    #[serde(rename = "Enemy")]
    Enemy,

    #[serde(rename = "Partner")]
    Partner,
}

pub fn load() -> Result<FungusFighterV2SkillExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "FungusFighterV2SkillExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
