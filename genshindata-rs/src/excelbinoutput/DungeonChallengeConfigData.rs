/// This file was automatically generated by quicktype
/// DO NOT MANUALLY EDIT THIS FILE!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type DungeonChallengeConfigData = Vec<DungeonChallengeConfigDatum>;

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "camelCase")]
pub struct DungeonChallengeConfigDatum {
    pub id: i64,
    pub target_text_template_text_map_hash: i64,
    pub sub_target_text_template_text_map_hash: i64,
    pub progress_text_template_text_map_hash: i64,
    pub sub_progress_text_template_text_map_hash: i64,
    pub icon_path: String,
    pub challenge_type: ChallengeType,
    pub team_ability_group_list: Vec<String>,
    pub no_success_hint: Option<bool>,
    pub interrupt_button_type: Option<InterruptButtonType>,
    pub no_fail_hint: Option<bool>,
    pub is_block_top_timer: Option<bool>,
    pub sub_challenge_fade_out_rule: Option<SubChallengeFadeOutRule>,
    pub sub_challenge_fade_out_delay_time: Option<i64>,
    pub sub_challenge_banner_rule: Option<SubChallengeBannerRule>,
    pub no_begin_hint: Option<bool>,
    pub record_type: Option<String>,
    #[serde(rename = "MPDPGDPDKID")]
    pub mpdpgdpdkid: Option<String>,
    pub no_pause_hint: Option<bool>,
    pub is_success_when_not_settled: Option<bool>,
    #[serde(rename = "activitySkillID")]
    pub activity_skill_id: Option<i64>,
    pub is_forward_timing: Option<bool>,
    pub is_trans_back_when_interrupt: Option<bool>,
    #[serde(rename = "PAGIBCDDMHF")]
    pub pagibcddmhf: Option<String>,
    #[serde(rename = "KLHGHJJOGAP")]
    pub klhghjjogap: Option<String>,
    #[serde(rename = "LJJHEAKEEJE")]
    pub ljjheakeeje: Option<String>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum ChallengeType {
    #[serde(rename = "CHALLENGE_CRYSTAL_ELEMENT_REACTION_COUNT")]
    ChallengeCrystalElementReactionCount,
    #[serde(rename = "CHALLENGE_DIE_LESS_IN_TIME")]
    ChallengeDieLessInTime,
    #[serde(rename = "CHALLENGE_ELEMENT_REACTION_COUNT")]
    ChallengeElementReactionCount,
    #[serde(rename = "CHALLENGE_FATHER_SUCC_IN_TIME")]
    ChallengeFatherSuccInTime,
    #[serde(rename = "CHALLENGE_FREEZE_ENEMY_IN_TIME")]
    ChallengeFreezeEnemyInTime,
    #[serde(rename = "CHALLENGE_GUARD_HP")]
    ChallengeGuardHp,
    #[serde(rename = "CHALLENGE_KILL_COUNT")]
    ChallengeKillCount,
    #[serde(rename = "CHALLENGE_KILL_COUNT_FAST")]
    ChallengeKillCountFast,
    #[serde(rename = "CHALLENGE_KILL_COUNT_FROZEN_LESS")]
    ChallengeKillCountFrozenLess,
    #[serde(rename = "CHALLENGE_KILL_COUNT_GUARD_HP")]
    ChallengeKillCountGuardHp,
    #[serde(rename = "CHALLENGE_KILL_COUNT_IN_TIME")]
    ChallengeKillCountInTime,
    #[serde(rename = "CHALLENGE_KILL_MONSTER_IN_TIME")]
    ChallengeKillMonsterInTime,
    #[serde(rename = "CHALLENGE_LUA_COUNT")]
    ChallengeLuaCount,
    #[serde(rename = "CHALLENGE_LUA_IN_TIME")]
    ChallengeLuaInTime,
    #[serde(rename = "CHALLENGE_MONSTER_DAMAGE_COUNT")]
    ChallengeMonsterDamageCount,
    #[serde(rename = "CHALLENGE_SHEILD_ABSORB_DAMAGE_COUNT")]
    ChallengeSheildAbsorbDamageCount,
    #[serde(rename = "CHALLENGE_SURVIVE")]
    ChallengeSurvive,
    #[serde(rename = "CHALLENGE_SURVIVE_IN_TIME")]
    ChallengeSurviveInTime,
    #[serde(rename = "CHALLENGE_SWIRL_ELEMENT_REACTION_COUNT")]
    ChallengeSwirlElementReactionCount,
    #[serde(rename = "CHALLENGE_TIME_FLY")]
    ChallengeTimeFly,
    #[serde(rename = "CHALLENGE_TRIGGER2_AVOID_TRIGGER1")]
    ChallengeTrigger2AvoidTrigger1,
    #[serde(rename = "CHALLENGE_TRIGGER_COUNT")]
    ChallengeTriggerCount,
    #[serde(rename = "CHALLENGE_TRIGGER_IN_TIME")]
    ChallengeTriggerInTime,
    #[serde(rename = "CHALLENGE_TRIGGER_IN_TIME_FLY")]
    ChallengeTriggerInTimeFly,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum InterruptButtonType {
    #[serde(rename = "INTERRUPT_BUTTON_TYPE_ALL")]
    InterruptButtonTypeAll,
    #[serde(rename = "INTERRUPT_BUTTON_TYPE_HOST")]
    InterruptButtonTypeHost,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum SubChallengeBannerRule {
    #[serde(rename = "SUBCHALLENGE_BANNER_TYPE_FAIL")]
    SubchallengeBannerTypeFail,
    #[serde(rename = "SUBCHALLENGE_BANNER_TYPE_HIDE_FINAL")]
    SubchallengeBannerTypeHideFinal,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
#[serde(rename_all = "SCREAMING_SNAKE_CASE")]
pub enum SubChallengeFadeOutRule {
    #[serde(rename = "SUBCHALLENGE_FADEOUT_TYPE_FAIL")]
    SubchallengeFadeoutTypeFail,
    #[serde(rename = "SUBCHALLENGE_FADEOUT_TYPE_FINISH")]
    SubchallengeFadeoutTypeFinish,
    #[serde(rename = "SUBCHALLENGE_FADEOUT_TYPE_SUCCESS")]
    SubchallengeFadeoutTypeSuccess,
}
