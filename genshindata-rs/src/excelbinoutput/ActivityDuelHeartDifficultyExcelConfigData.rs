// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityDuelHeartDifficultyExcelConfigData = Vec<ActivityDuelHeartDifficultyExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityDuelHeartDifficultyExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "levelId")]
    pub level_id: i64,

    #[serde(rename = "difficulty")]
    pub difficulty: Difficulty,

    #[serde(rename = "CKPPHFFOLEG")]
    pub ckpphffoleg: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Difficulty {
    #[serde(rename = "DUEL_HEART_DIFFICULTY_HARD")]
    DuelHeartDifficultyHard,

    #[serde(rename = "DUEL_HEART_DIFFICULTY_MASTER")]
    DuelHeartDifficultyMaster,

    #[serde(rename = "DUEL_HEART_DIFFICULTY_NORAML")]
    DuelHeartDifficultyNoraml,
}

pub fn load() -> Result<ActivityDuelHeartDifficultyExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityDuelHeartDifficultyExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
