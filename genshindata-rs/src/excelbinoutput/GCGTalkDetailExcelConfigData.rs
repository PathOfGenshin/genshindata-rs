// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type GcgTalkDetailExcelConfigData = Vec<GcgTalkDetailExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GcgTalkDetailExcelConfigDatum {
    #[serde(rename = "NLMKICEGJDL")]
    pub nlmkicegjdl: i64,

    #[serde(rename = "OKFHEMAKLNN")]
    pub okfhemaklnn: Vec<i64>,

    #[serde(rename = "NPMKLKHOPPI")]
    pub npmklkhoppi: Vec<i64>,

    #[serde(rename = "CPBEMEKHDCO")]
    pub cpbemekhdco: Vec<i64>,

    #[serde(rename = "PGFENJJPNBG")]
    pub pgfenjjpnbg: Vec<Pgfenjjpnbg>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Pgfenjjpnbg {
    #[serde(rename = "GCG_TALK_EMOJI_AWKWARD")]
    GcgTalkEmojiAwkward,

    #[serde(rename = "GCG_TALK_EMOJI_ELATION")]
    GcgTalkEmojiElation,

    #[serde(rename = "GCG_TALK_EMOJI_HAPPY")]
    GcgTalkEmojiHappy,

    #[serde(rename = "GCG_TALK_EMOJI_MAD")]
    GcgTalkEmojiMad,

    #[serde(rename = "GCG_TALK_EMOJI_NON")]
    GcgTalkEmojiNon,
}

pub fn load() -> Result<GcgTalkDetailExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GCGTalkDetailExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
