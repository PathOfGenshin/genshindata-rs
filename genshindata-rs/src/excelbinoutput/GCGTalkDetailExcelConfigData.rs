// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type GcgTalkDetailExcelConfigData = Vec<GcgTalkDetailExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GcgTalkDetailExcelConfigDatum {
    #[serde(rename = "BMLBIGMGJMJ")]
    pub bmlbigmgjmj: i64,

    #[serde(rename = "IDHKGBPOILK")]
    pub idhkgbpoilk: Vec<i64>,

    #[serde(rename = "CMILJFLGHDJ")]
    pub cmiljflghdj: Vec<i64>,

    #[serde(rename = "ILNLFOLAKAB")]
    pub ilnlfolakab: Vec<i64>,

    #[serde(rename = "IIBMGEBECKO")]
    pub iibmgebecko: Vec<Iibmgebecko>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Iibmgebecko {
    #[serde(rename = "GCG_TALK_EMOJI_AWKWARD")]
    GcgTalkEmojiAwkward,

    #[serde(rename = "GCG_TALK_EMOJI_ELATION")]
    GcgTalkEmojiElation,

    #[serde(rename = "GCG_TALK_EMOJI_HAPPY")]
    GcgTalkEmojiHappy,

    #[serde(rename = "GCG_TALK_EMOJI_MAD")]
    GcgTalkEmojiMad,

    #[serde(rename = "GCG_TALK_EMOJI_NON")]
    GcgTalkEmojiNon,
}

pub fn load() -> Result<GcgTalkDetailExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GCGTalkDetailExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
