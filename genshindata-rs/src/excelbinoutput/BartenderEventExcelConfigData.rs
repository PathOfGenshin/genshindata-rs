// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type BartenderEventExcelConfigData = Vec<BartenderEventExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct BartenderEventExcelConfigDatum {
    #[serde(rename = "effectName")]
    pub effect_name: String,

    #[serde(rename = "effectType")]
    pub effect_type: Option<EffectType>,

    #[serde(rename = "NIECLMNEFAJ")]
    pub nieclmnefaj: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum EffectType {
    #[serde(rename = "BARTENDER_FINISH_CUP_EFF")]
    BartenderFinishCupEff,

    #[serde(rename = "BARTENDER_FINISH_CUP_ONHAND")]
    BartenderFinishCupOnhand,

    #[serde(rename = "BARTENDER_FINISH_CUP_ONTABLE")]
    BartenderFinishCupOntable,

    #[serde(rename = "BARTENDER_FINISH_CUP_OVER")]
    BartenderFinishCupOver,

    #[serde(rename = "BARTENDER_FINISH_CUP_PUSH")]
    BartenderFinishCupPush,

    #[serde(rename = "BARTENDER_FINISH_POUR_EFF")]
    BartenderFinishPourEff,

    #[serde(rename = "BARTENDER_INGREDIENTS")]
    BartenderIngredients,

    #[serde(rename = "BARTENDER_INGREDIENTS_POUR_EFF")]
    BartenderIngredientsPourEff,

    #[serde(rename = "BARTENDER_MIX_BAR")]
    BartenderMixBar,

    #[serde(rename = "BARTENDER_ORIGIN_CUP_ONHAND")]
    BartenderOriginCupOnhand,
}

pub fn load() -> Result<BartenderEventExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "BartenderEventExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
