// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type LuminanceStoneChallengeStageExcelConfigData = Vec<LuminanceStoneChallengeStageExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct LuminanceStoneChallengeStageExcelConfigDatum {
    #[serde(rename = "stageId")]
    pub stage_id: i64,

    #[serde(rename = "dayIndex")]
    pub day_index: i64,

    #[serde(rename = "PMPIOGGEMNM")]
    pub pmpioggemnm: i64,

    #[serde(rename = "KMCGAMHLIPD")]
    pub kmcgamhlipd: i64,

    #[serde(rename = "JAJKOGMGAJF")]
    pub jajkogmgajf: i64,

    #[serde(rename = "BLBHDPIBPLN")]
    pub blbhdpibpln: i64,

    #[serde(rename = "NGNCAFBOAJO")]
    pub ngncafboajo: Vec<i64>,

    #[serde(rename = "watcherList")]
    pub watcher_list: Vec<i64>,

    #[serde(rename = "HIOCOCBGOKP")]
    pub hiococbgokp: Vec<i64>,

    #[serde(rename = "PAIBAJDIPAK")]
    pub paibajdipak: i64,

    #[serde(rename = "pushTipsID")]
    pub push_tips_id: i64,
}

pub fn load() -> Result<LuminanceStoneChallengeStageExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "LuminanceStoneChallengeStageExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
