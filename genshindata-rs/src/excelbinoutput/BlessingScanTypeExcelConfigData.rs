// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type BlessingScanTypeExcelConfigData = Vec<BlessingScanTypeExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct BlessingScanTypeExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "typeId")]
    pub type_id: i64,

    #[serde(rename = "priority")]
    pub priority: i64,

    #[serde(rename = "upPoolId")]
    pub up_pool_id: Vec<i64>,

    #[serde(rename = "dailyScanLimit")]
    pub daily_scan_limit: i64,

    #[serde(rename = "typeNameTextMapHash")]
    pub type_name_text_map_hash: i64,

    #[serde(rename = "typeNameWithColorTextMapHash")]
    pub type_name_with_color_text_map_hash: i64,
}

pub fn load() -> Result<BlessingScanTypeExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "BlessingScanTypeExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
