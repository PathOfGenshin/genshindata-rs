// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type SceneExcelConfigData = Vec<SceneExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct SceneExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "type")]
    pub scene_excel_config_datum_type: Type,

    #[serde(rename = "scriptData")]
    pub script_data: String,

    #[serde(rename = "overrideDefaultProfile")]
    pub override_default_profile: String,

    #[serde(rename = "levelEntityConfig")]
    pub level_entity_config: String,

    #[serde(rename = "specifiedAvatarList")]
    pub specified_avatar_list: Vec<i64>,

    #[serde(rename = "comment")]
    pub comment: Comment,

    #[serde(rename = "CDPLABHHLPO")]
    pub cdplabhhlpo: Vec<f64>,

    #[serde(rename = "PGPLNHJBIOL")]
    pub pgplnhjbiol: Vec<i64>,

    #[serde(rename = "AKKHOKJODCC")]
    pub akkhokjodcc: Option<bool>,

    #[serde(rename = "maxSpecifiedAvatarNum")]
    pub max_specified_avatar_num: Option<i64>,

    #[serde(rename = "ILFDBEIPOKN")]
    pub ilfdbeipokn: Option<String>,

    #[serde(rename = "JHFFDCDGNKF")]
    pub jhffdcdgnkf: Option<bool>,

    #[serde(rename = "CNINBEMIGHL")]
    pub cninbemighl: Option<String>,

    #[serde(rename = "DDECOHPHDOI")]
    pub ddecohphdoi: Option<i64>,

    #[serde(rename = "EGBGAGMMGHG")]
    pub egbgagmmghg: Option<bool>,

    #[serde(rename = "PGIFGELOJMP")]
    pub pgifgelojmp: Option<bool>,

    #[serde(rename = "BPOBNMGIAPL")]
    pub bpobnmgiapl: Option<f64>,

    #[serde(rename = "entityAppearSorted")]
    pub entity_appear_sorted: Option<i64>,

    #[serde(rename = "BAOEGMHOHGD")]
    pub baoegmhohgd: Option<Baoegmhohgd>,

    #[serde(rename = "BEOHEDEKLCI")]
    pub beohedeklci: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Baoegmhohgd {
    #[serde(rename = "SCENE_SUB_TYPE_PERSISTENT_DUNGEON")]
    SceneSubTypePersistentDungeon,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Comment {
    #[serde(rename = "正式")]
    Comment,

    #[serde(rename = "测试")]
    Empty,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "SCENE_DUNGEON")]
    SceneDungeon,

    #[serde(rename = "SCENE_HOME_ROOM")]
    SceneHomeRoom,

    #[serde(rename = "SCENE_HOME_WORLD")]
    SceneHomeWorld,

    #[serde(rename = "SCENE_ROOM")]
    SceneRoom,

    #[serde(rename = "SCENE_WORLD")]
    SceneWorld,
}

pub fn load() -> Result<SceneExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "SceneExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
