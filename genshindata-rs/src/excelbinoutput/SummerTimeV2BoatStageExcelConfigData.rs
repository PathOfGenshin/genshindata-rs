// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type SummerTimeV2BoatStageExcelConfigData = Vec<SummerTimeV2BoatStageExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct SummerTimeV2BoatStageExcelConfigDatum {
    #[serde(rename = "stageId")]
    pub stage_id: i64,

    #[serde(rename = "dayIndex")]
    pub day_index: i64,

    #[serde(rename = "watcherList")]
    pub watcher_list: Vec<i64>,

    #[serde(rename = "galleryId")]
    pub gallery_id: i64,

    #[serde(rename = "pushTipsId")]
    pub push_tips_id: i64,

    #[serde(rename = "KKAAOAGIFEF")]
    pub kkaaoagifef: i64,

    #[serde(rename = "conditionType")]
    pub condition_type: Vec<ConditionType>,

    #[serde(rename = "DKKMFEBEPPJ")]
    pub dkkmfebeppj: Vec<i64>,

    #[serde(rename = "DHFOGJMCHOO")]
    pub dhfogjmchoo: Vec<i64>,

    #[serde(rename = "FDIFBEFDLEC")]
    pub fdifbefdlec: Vec<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum ConditionType {
    #[serde(rename = "PARAM")]
    Param,

    #[serde(rename = "TIME")]
    Time,
}

pub fn load() -> Result<SummerTimeV2BoatStageExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "SummerTimeV2BoatStageExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
