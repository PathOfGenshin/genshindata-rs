// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ReputationQuestExcelConfigData = Vec<ReputationQuestExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ReputationQuestExcelConfigDatum {
    #[serde(rename = "ParentQuestId")]
    pub parent_quest_id: i64,

    #[serde(rename = "cityId")]
    pub city_id: i64,

    #[serde(rename = "rewardId")]
    pub reward_id: i64,

    #[serde(rename = "iconName")]
    pub icon_name: IconName,

    #[serde(rename = "titleTextMapHash")]
    pub title_text_map_hash: i64,

    #[serde(rename = "order")]
    pub order: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum IconName {
    #[serde(rename = "UI_ChapterIcon_Inazuma")]
    UiChapterIconInazuma,

    #[serde(rename = "UI_ChapterIcon_Liyue")]
    UiChapterIconLiyue,

    #[serde(rename = "UI_ChapterIcon_Mengde")]
    UiChapterIconMengde,

    #[serde(rename = "UI_ChapterIcon_Sumeru")]
    UiChapterIconSumeru,

    #[serde(rename = "UI_QuestIcon_Quest")]
    UiQuestIconQuest,
}

pub fn load() -> Result<ReputationQuestExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ReputationQuestExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
