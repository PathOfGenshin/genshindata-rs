// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type HomeWorldEventExcelConfigData = Vec<HomeWorldEventExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct HomeWorldEventExcelConfigDatum {
    #[serde(rename = "ANKPEFHKOAL")]
    pub ankpefhkoal: i64,

    #[serde(rename = "KNCEFIKCEIJ")]
    pub kncefikceij: Kncefikceij,

    #[serde(rename = "avatarID")]
    pub avatar_id: i64,

    #[serde(rename = "LKFBGCLOCNL")]
    pub lkfbgclocnl: Option<i64>,

    #[serde(rename = "rewardID")]
    pub reward_id: Option<i64>,

    #[serde(rename = "NFHDGDMJCHP")]
    pub nfhdgdmjchp: i64,

    #[serde(rename = "order")]
    pub order: Option<i64>,

    #[serde(rename = "LCPCJHEDIPM")]
    pub lcpcjhedipm: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Kncefikceij {
    #[serde(rename = "HOME_AVATAR_REWARD_EVENT")]
    HomeAvatarRewardEvent,

    #[serde(rename = "HOME_AVATAR_SUMMON_EVENT")]
    HomeAvatarSummonEvent,
}

pub fn load() -> Result<HomeWorldEventExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "HomeWorldEventExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
