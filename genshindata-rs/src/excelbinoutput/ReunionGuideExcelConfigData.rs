// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ReunionGuideExcelConfigData = Vec<ReunionGuideExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ReunionGuideExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "LCGLNJBKLBD")]
    pub lcglnjbklbd: i64,

    #[serde(rename = "GKHGPMGANCM")]
    pub gkhgpmgancm: i64,

    #[serde(rename = "OKMHCIPCNJH")]
    pub okmhcipcnjh: i64,

    #[serde(rename = "BCKIKLJLNNA")]
    pub bckikljlnna: String,

    #[serde(rename = "FMLHNMLKEGI")]
    pub fmlhnmlkegi: Vec<Fmlhnmlkegi>,

    #[serde(rename = "JLGHDHGLEBE")]
    pub jlghdhglebe: String,

    #[serde(rename = "AEEPJEJANAG")]
    pub aeepjejanag: Option<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Fmlhnmlkegi {
    #[serde(rename = "param")]
    pub param: Vec<i64>,

    #[serde(rename = "type")]
    pub fmlhnmlkegi_type: Option<String>,
}

pub fn load() -> Result<ReunionGuideExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ReunionGuideExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
