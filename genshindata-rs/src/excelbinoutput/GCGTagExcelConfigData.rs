// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type GcgTagExcelConfigData = Vec<GcgTagExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GcgTagExcelConfigDatum {
    #[serde(rename = "type")]
    pub gcg_tag_excel_config_datum_type: String,

    #[serde(rename = "AEIEKOOIIKK")]
    pub aeiekooiikk: Vec<Aeiekooiikk>,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "ELFGDEMAEEA")]
    pub elfgdemaeea: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Aeiekooiikk {
    #[serde(rename = "GCG_TAG_IDENTIFIER_ASSIST")]
    GcgTagIdentifierAssist,

    #[serde(rename = "GCG_TAG_IDENTIFIER_CHAR")]
    GcgTagIdentifierChar,

    #[serde(rename = "GCG_TAG_IDENTIFIER_ELEMENT")]
    GcgTagIdentifierElement,

    #[serde(rename = "GCG_TAG_IDENTIFIER_EVENT")]
    GcgTagIdentifierEvent,

    #[serde(rename = "GCG_TAG_IDENTIFIER_MODIFY")]
    GcgTagIdentifierModify,

    #[serde(rename = "GCG_TAG_IDENTIFIER_NONE")]
    GcgTagIdentifierNone,

    #[serde(rename = "GCG_TAG_IDENTIFIER_WEAPON")]
    GcgTagIdentifierWeapon,
}

pub fn load() -> Result<GcgTagExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GCGTagExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
