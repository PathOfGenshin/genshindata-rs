// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type ReputationCityExcelConfigData = Vec<ReputationCityExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ReputationCityExcelConfigDatum {
    #[serde(rename = "cityId")]
    pub city_id: i64,

    #[serde(rename = "exploreAreaVec")]
    pub explore_area_vec: Vec<i64>,

    #[serde(rename = "virtualItemId")]
    pub virtual_item_id: i64,

    #[serde(rename = "openState")]
    pub open_state: String,

    #[serde(rename = "bgIconPath")]
    pub bg_icon_path: String,

    #[serde(rename = "bgEffectPath")]
    pub bg_effect_path: String,

    #[serde(rename = "explainTitleTextMapHash")]
    pub explain_title_text_map_hash: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "rewardItemId")]
    pub reward_item_id: i64,

    #[serde(rename = "rewardItemDescTextMapHash")]
    pub reward_item_desc_text_map_hash: i64,

    #[serde(rename = "rewardItemIcon")]
    pub reward_item_icon: String,

    #[serde(rename = "rewardBgIcon")]
    pub reward_bg_icon: String,

    #[serde(rename = "cityIcon")]
    pub city_icon: String,
}

pub fn load() -> Result<ReputationCityExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ReputationCityExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
