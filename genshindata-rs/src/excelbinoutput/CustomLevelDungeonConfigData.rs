// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type CustomLevelDungeonConfigData = Vec<CustomLevelDungeonConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct CustomLevelDungeonConfigDatum {
    #[serde(rename = "dungeonID")]
    pub dungeon_id: i64,

    #[serde(rename = "order")]
    pub order: i64,

    #[serde(rename = "jsonPath")]
    pub json_path: String,

    #[serde(rename = "MOLCKEEBLCE")]
    pub molckeeblce: String,

    #[serde(rename = "CEINNEGPJDK")]
    pub ceinnegpjdk: i64,

    #[serde(rename = "DMAFAFGNMCE")]
    pub dmafafgnmce: i64,

    #[serde(rename = "FPJEBLLPNDN")]
    pub fpjebllpndn: i64,

    #[serde(rename = "DDNADHNGCDN")]
    pub ddnadhngcdn: i64,

    #[serde(rename = "MBCHCOKDGCO")]
    pub mbchcokdgco: String,

    #[serde(rename = "BFHHJOPIBCO")]
    pub bfhhjopibco: Vec<i64>,
}

pub fn load() -> Result<CustomLevelDungeonConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "CustomLevelDungeonConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
