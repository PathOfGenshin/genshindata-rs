// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ChatExcelConfigData = Vec<ChatExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ChatExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "priority")]
    pub priority: f64,

    #[serde(rename = "tabShownNameTextMapHash")]
    pub tab_shown_name_text_map_hash: i64,

    #[serde(rename = "chatChannelIcon")]
    pub chat_channel_icon: String,

    #[serde(rename = "TagOtherTextMapHash")]
    pub tag_other_text_map_hash: i64,

    #[serde(rename = "TagSelfTextMapHash")]
    pub tag_self_text_map_hash: i64,

    #[serde(rename = "EnterTextMapHash")]
    pub enter_text_map_hash: i64,

    #[serde(rename = "LeaveTextMapHash")]
    pub leave_text_map_hash: i64,

    #[serde(rename = "channel")]
    pub channel: Option<i64>,

    #[serde(rename = "IBGFCALEPDP")]
    pub ibgfcalepdp: Option<bool>,
}

pub fn load() -> Result<ChatExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ChatExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
