// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type GcgWorldLevelExcelConfigData = Vec<GcgWorldLevelExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GcgWorldLevelExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "npcId")]
    pub npc_id: i64,

    #[serde(rename = "levelId")]
    pub level_id: i64,

    #[serde(rename = "levelTitleTextMapHash")]
    pub level_title_text_map_hash: i64,

    #[serde(rename = "OMLGKBNCHEA")]
    pub omlgkbnchea: i64,

    #[serde(rename = "talkId")]
    pub talk_id: i64,

    #[serde(rename = "EOOFFECPACA")]
    pub eooffecpaca: Option<i64>,

    #[serde(rename = "unlockCond")]
    pub unlock_cond: Option<UnlockCond>,

    #[serde(rename = "GEPDGCLJHDF")]
    pub gepdgcljhdf: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum UnlockCond {
    #[serde(rename = "GCG_LEVEL_UNLOCK_QUEST")]
    GcgLevelUnlockQuest,
}

pub fn load() -> Result<GcgWorldLevelExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GCGWorldLevelExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
