// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type GroupLinksBundleExcelConfigData = Vec<GroupLinksBundleExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GroupLinksBundleExcelConfigDatum {
    #[serde(rename = "Id")]
    pub id: i64,

    #[serde(rename = "groupList")]
    pub group_list: Vec<i64>,

    #[serde(rename = "KEJIJAGKHHK")]
    pub kejijagkhhk: i64,

    #[serde(rename = "GAAHMGLGJFD")]
    pub gaahmglgjfd: Option<i64>,

    #[serde(rename = "rewardType")]
    pub reward_type: Option<RewardType>,

    #[serde(rename = "rewardId")]
    pub reward_id: Option<i64>,

    #[serde(rename = "reviseLevel")]
    pub revise_level: Option<i64>,

    #[serde(rename = "icon")]
    pub icon: String,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "AHLJCIAJGHF")]
    pub ahljciajghf: i64,

    #[serde(rename = "EAKLBGJDNKH")]
    pub eaklbgjdnkh: Option<i64>,

    #[serde(rename = "GGJGJDPNHHG")]
    pub ggjgjdpnhhg: Option<bool>,

    #[serde(rename = "HMFMGMGHIID")]
    pub hmfmgmghiid: Option<bool>,

    #[serde(rename = "DNBJOOPBHCB")]
    pub dnbjoopbhcb: Option<i64>,

    #[serde(rename = "playType")]
    pub play_type: Option<String>,

    #[serde(rename = "MOKHGFEGGEF")]
    pub mokhgfeggef: Option<bool>,

    #[serde(rename = "EEPHCPPBHEF")]
    pub eephcppbhef: Option<i64>,

    #[serde(rename = "OLEJJFOPGLP")]
    pub olejjfopglp: Option<bool>,

    #[serde(rename = "NBNIALBEFOE")]
    pub nbnialbefoe: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum RewardType {
    #[serde(rename = "FINISH")]
    Finish,
}

pub fn load() -> Result<GroupLinksBundleExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GroupLinksBundleExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
