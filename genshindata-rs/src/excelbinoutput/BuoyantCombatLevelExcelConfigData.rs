// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type BuoyantCombatLevelExcelConfigData = Vec<BuoyantCombatLevelExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct BuoyantCombatLevelExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "galleryId")]
    pub gallery_id: i64,

    #[serde(rename = "groupId")]
    pub group_id: i64,

    #[serde(rename = "dayIndex")]
    pub day_index: i64,

    #[serde(rename = "rewardPreview")]
    pub reward_preview: i64,

    #[serde(rename = "HEBCFCLDOAN")]
    pub hebcfcldoan: i64,

    #[serde(rename = "CBFCGKOENMH")]
    pub cbfcgkoenmh: i64,

    #[serde(rename = "MNCMLAMFHHJ")]
    pub mncmlamfhhj: Vec<i64>,

    #[serde(rename = "DCANJPOOONG")]
    pub dcanjpooong: Vec<i64>,

    #[serde(rename = "recommendLevel")]
    pub recommend_level: Vec<i64>,

    #[serde(rename = "GLFMPBKELPJ")]
    pub glfmpbkelpj: Vec<f64>,
}

pub fn load() -> Result<BuoyantCombatLevelExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "BuoyantCombatLevelExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
