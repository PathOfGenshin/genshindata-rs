// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type GeneralRewardExcelConfigData = Vec<GeneralRewardExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GeneralRewardExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "useCondenseResin")]
    pub use_condense_resin: Option<bool>,

    #[serde(rename = "titleTextMapHash")]
    pub title_text_map_hash: i64,

    #[serde(rename = "staminaEnoughTextMapHash")]
    pub stamina_enough_text_map_hash: i64,

    #[serde(rename = "staminaLessTextMapHash")]
    pub stamina_less_text_map_hash: i64,

    #[serde(rename = "condenseResinStaminaEnoughTextMapHash")]
    pub condense_resin_stamina_enough_text_map_hash: i64,

    #[serde(rename = "condenseResinStaminaLessTextMapHash")]
    pub condense_resin_stamina_less_text_map_hash: i64,

    #[serde(rename = "usingActivityCoinTextMapHash")]
    pub using_activity_coin_text_map_hash: i64,

    #[serde(rename = "usingActivityCoinButtonTextMapHash")]
    pub using_activity_coin_button_text_map_hash: i64,

    #[serde(rename = "confirmTextMapHash")]
    pub confirm_text_map_hash: i64,

    #[serde(rename = "resinMonthlyTextMapHash")]
    pub resin_monthly_text_map_hash: i64,

    #[serde(rename = "insufficientTextMapHash")]
    pub insufficient_text_map_hash: i64,

    #[serde(rename = "insufficientUseitemTextMapHash")]
    pub insufficient_useitem_text_map_hash: i64,

    #[serde(rename = "condenseResinTextMapHash")]
    pub condense_resin_text_map_hash: i64,

    #[serde(rename = "rewardSourceSystem")]
    pub reward_source_system: Option<String>,

    #[serde(rename = "rewardSourceSystemPara")]
    pub reward_source_system_para: Option<i64>,
}

pub fn load() -> Result<GeneralRewardExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GeneralRewardExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
