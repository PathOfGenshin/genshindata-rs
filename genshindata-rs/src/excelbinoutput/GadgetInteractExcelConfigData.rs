// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type GadgetInteractExcelConfigData = Vec<GadgetInteractExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GadgetInteractExcelConfigDatum {
    #[serde(rename = "interactId")]
    pub interact_id: i64,

    #[serde(rename = "actionType")]
    pub action_type: Option<ActionType>,

    #[serde(rename = "param1")]
    pub param1: Option<i64>,

    #[serde(rename = "FNKIDIBBNGL")]
    pub fnkidibbngl: Vec<Fnkidibbngl>,

    #[serde(rename = "costItems")]
    pub cost_items: Vec<CostItem>,

    #[serde(rename = "uiTitleTextMapHash")]
    pub ui_title_text_map_hash: i64,

    #[serde(rename = "uiDescTextMapHash")]
    pub ui_desc_text_map_hash: i64,

    #[serde(rename = "condList")]
    pub cond_list: Vec<CondList>,

    #[serde(rename = "consumeItemNum")]
    pub consume_item_num: Option<bool>,

    #[serde(rename = "consumeItemId")]
    pub consume_item_id: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct CondList {
    #[serde(rename = "param")]
    pub param: Vec<String>,

    #[serde(rename = "condType")]
    pub cond_type: Option<CondType>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct CostItem {
    #[serde(rename = "id")]
    pub id: Option<i64>,

    #[serde(rename = "count")]
    pub count: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Fnkidibbngl {
    #[serde(rename = "actionType")]
    pub action_type: Option<ActionType>,

    #[serde(rename = "param")]
    pub param: Vec<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum ActionType {
    #[serde(rename = "INTERACT_ACTION_CONSUME_REGIONAL_PLAY_VAR")]
    InteractActionConsumeRegionalPlayVar,

    #[serde(rename = "INTERACT_ACTION_SET_GADGET_CHAIN_BUFF")]
    InteractActionSetGadgetChainBuff,

    #[serde(rename = "INTERACT_ACTION_STATE")]
    InteractActionState,

    #[serde(rename = "INTERACT_ACTION_UNLOCK_SPECIAL_TRANSPORT_POINT")]
    InteractActionUnlockSpecialTransportPoint,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum CondType {
    #[serde(rename = "INTERACT_COND_OFFERING_LEVEL")]
    InteractCondOfferingLevel,

    #[serde(rename = "INTERACT_COND_REGIONAL_PLAY_VAR_GREATER_THAN")]
    InteractCondRegionalPlayVarGreaterThan,

    #[serde(rename = "INTERACT_COND_WIDGET_ON")]
    InteractCondWidgetOn,
}

pub fn load() -> Result<GadgetInteractExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "GadgetInteractExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
