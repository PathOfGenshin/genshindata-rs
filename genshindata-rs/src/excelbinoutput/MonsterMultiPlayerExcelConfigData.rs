// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type MonsterMultiPlayerExcelConfigData = Vec<MonsterMultiPlayerExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct MonsterMultiPlayerExcelConfigDatum {
    #[serde(rename = "Id")]
    pub id: i64,

    #[serde(rename = "PropPer")]
    pub prop_per: Vec<PropPer>,

    #[serde(rename = "EndureNum")]
    pub endure_num: Vec<i64>,

    #[serde(rename = "ElementShield")]
    pub element_shield: Vec<f64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PropPer {
    #[serde(rename = "PropType")]
    pub prop_type: PropType,

    #[serde(rename = "PropValue")]
    pub prop_value: Vec<f64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum PropType {
    #[serde(rename = "FIGHT_PROP_ATTACK_MP_PERCENT")]
    FightPropAttackMpPercent,

    #[serde(rename = "FIGHT_PROP_HP_MP_PERCENT")]
    FightPropHpMpPercent,
}

pub fn load() -> Result<MonsterMultiPlayerExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "MonsterMultiPlayerExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
