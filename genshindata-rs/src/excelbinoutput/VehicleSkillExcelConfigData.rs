// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type VehicleSkillExcelConfigData = Vec<VehicleSkillExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct VehicleSkillExcelConfigDatum {
    #[serde(rename = "ID")]
    pub id: i64,

    #[serde(rename = "NDIIIAEKONA")]
    pub ndiiiaekona: i64,

    #[serde(rename = "IFLGLLEHDNL")]
    pub iflgllehdnl: i64,

    #[serde(rename = "abilityName")]
    pub ability_name: String,

    #[serde(rename = "skillIcon")]
    pub skill_icon: String,

    #[serde(rename = "DEDHAIHBPLA")]
    pub dedhaihbpla: f64,

    #[serde(rename = "HCBCAOPONMA")]
    pub hcbcaoponma: i64,

    #[serde(rename = "lockShape")]
    pub lock_shape: LockShape,

    #[serde(rename = "lockWeightParams")]
    pub lock_weight_params: Vec<f64>,

    #[serde(rename = "globalValueKey")]
    pub global_value_key: GlobalValueKey,

    #[serde(rename = "EMOFOGKEOGI")]
    pub emofogkeogi: Option<i64>,

    #[serde(rename = "KCKIPHCDIFH")]
    pub kckiphcdifh: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum GlobalValueKey {
    #[serde(rename = "_ABILITY_LanV3BoatGame_Skill_Energy")]
    AbilityLanV3BoatGameSkillEnergy,

    #[serde(rename = "_ABILITY_Skiff_SprintValue")]
    AbilitySkiffSprintValue,

    #[serde(rename = "")]
    Empty,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum LockShape {
    #[serde(rename = "CircleLockEnemyR50H30HC")]
    CircleLockEnemyR50H30Hc,

    #[serde(rename = "CircleLockEnemyR5H6HC")]
    CircleLockEnemyR5H6Hc,
}

pub fn load() -> Result<VehicleSkillExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "VehicleSkillExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
