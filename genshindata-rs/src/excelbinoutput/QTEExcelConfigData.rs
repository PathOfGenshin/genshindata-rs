// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type QteExcelConfigData = Vec<QteExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct QteExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "NECMPMPPDBO")]
    pub necmpmppdbo: i64,

    #[serde(rename = "KNAMEBJGFOJ")]
    pub knamebjgfoj: String,

    #[serde(rename = "BCGABFGEDMI")]
    pub bcgabfgedmi: Vec<Bcgabfgedmi>,

    #[serde(rename = "NMMJNLKIGIM")]
    pub nmmjnlkigim: Vec<Nmmjnlkigim>,

    #[serde(rename = "OBDACALOFIF")]
    pub obdacalofif: Vec<Bcgabfgedmi>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Bcgabfgedmi {
    #[serde(rename = "param")]
    pub param: Vec<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Nmmjnlkigim {
    #[serde(rename = "type")]
    pub nmmjnlkigim_type: Option<String>,

    #[serde(rename = "param")]
    pub param: Vec<i64>,
}

pub fn load() -> Result<QteExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "QTEExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
