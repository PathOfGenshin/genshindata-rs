// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

use std::env;

extern crate serde_derive;

pub type BuffExcelConfigData = Vec<BuffExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct BuffExcelConfigDatum {
    #[serde(rename = "groupId")]
    pub group_id: Option<i64>,

    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "desc")]
    pub desc: String,

    #[serde(rename = "time")]
    pub time: Option<f64>,

    #[serde(rename = "isPersistent")]
    pub is_persistent: Option<bool>,

    #[serde(rename = "serverBuffId")]
    pub server_buff_id: i64,

    #[serde(rename = "serverBuffType")]
    pub server_buff_type: ServerBuffType,

    #[serde(rename = "abilityName")]
    pub ability_name: String,

    #[serde(rename = "modifierName")]
    pub modifier_name: String,

    #[serde(rename = "HGIDAJDJLKP")]
    pub hgidajdjlkp: Option<bool>,

    #[serde(rename = "stackType")]
    pub stack_type: Option<StackType>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum ServerBuffType {
    #[serde(rename = "SERVER_BUFF_AVATAR")]
    ServerBuffAvatar,

    #[serde(rename = "SERVER_BUFF_TEAM")]
    ServerBuffTeam,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum StackType {
    #[serde(rename = "BUFF_STACK")]
    BuffStack,
}

pub fn load() -> Result<BuffExcelConfigData, crate::json::JsonError> {
    let game_resources_path = env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "BuffExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
