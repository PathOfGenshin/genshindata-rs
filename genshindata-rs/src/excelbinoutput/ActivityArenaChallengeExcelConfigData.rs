// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

#[allow(unused_imports)]
use serde::{Serialize, Deserialize};

pub type ActivityArenaChallengeExcelConfigData = Vec<ActivityArenaChallengeExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivityArenaChallengeExcelConfigDatum {
    #[serde(rename = "ID")]
    pub id: i64,

    #[serde(rename = "scheduleId")]
    pub schedule_id: i64,

    #[serde(rename = "arenaChallengeId")]
    pub arena_challenge_id: i64,

    #[serde(rename = "arenaChallengeLevel")]
    pub arena_challenge_level: i64,

    #[serde(rename = "watcherId")]
    pub watcher_id: i64,

    #[serde(rename = "challengeTargetTextMapHash")]
    pub challenge_target_text_map_hash: i64,

    #[serde(rename = "challengeTarget1TextMapHash")]
    pub challenge_target1_text_map_hash: i64,

    #[serde(rename = "challengeTarget2TextMapHash")]
    pub challenge_target2_text_map_hash: i64,

    #[serde(rename = "OJJHNGLOGKG")]
    pub ojjhnglogkg: Ojjhnglogkg,

    #[serde(rename = "NHACPGNBGAB")]
    pub nhacpgnbgab: Nhacpgnbgab,

    #[serde(rename = "ECDFEGFNGCJ")]
    pub ecdfegfngcj: Ecdfegfngcj,

    #[serde(rename = "BIAHCMPFOMN")]
    pub biahcmpfomn: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Ecdfegfngcj {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "2010035;1")]
    The20100351,

    #[serde(rename = "2010035;12")]
    The201003512,

    #[serde(rename = "2010035;2")]
    The20100352,

    #[serde(rename = "2010035;3")]
    The20100353,

    #[serde(rename = "2010035;4")]
    The20100354,

    #[serde(rename = "2010035;6")]
    The20100356,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Nhacpgnbgab {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "2010038;6")]
    The20100386,

    #[serde(rename = "2010039;12")]
    The201003912,

    #[serde(rename = "2010040;20")]
    The201004020,

    #[serde(rename = "2010041;15")]
    The201004115,

    #[serde(rename = "2010042;15")]
    The201004215,

    #[serde(rename = "2010043;20")]
    The201004320,

    #[serde(rename = "2010044;15")]
    The201004415,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Ojjhnglogkg {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "2010036;180")]
    The2010036180,

    #[serde(rename = "2010069;150")]
    The2010069150,
}

pub fn load() -> Result<ActivityArenaChallengeExcelConfigData, crate::json::JsonError> {
    let game_resources_path = std::env::var("GAME_DATA_PATH").unwrap();
    let path: std::path::PathBuf = [
        game_resources_path.as_str(),
        "ExcelBinOutput",
        "ActivityArenaChallengeExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
