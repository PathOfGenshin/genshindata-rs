// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type RadarHintExcelConfigData = Vec<RadarHintExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct RadarHintExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "IOHBJKHBDNM")]
    pub iohbjkhbdnm: String,

    #[serde(rename = "name")]
    pub name: String,

    #[serde(rename = "radius")]
    pub radius: f64,

    #[serde(rename = "effectName")]
    pub effect_name: EffectName,

    #[serde(rename = "iconName")]
    pub icon_name: String,

    #[serde(rename = "audioName")]
    pub audio_name: AudioName,

    #[serde(rename = "offsetRadius")]
    pub offset_radius: Option<f64>,

    #[serde(rename = "areaRadius")]
    pub area_radius: Option<f64>,

    #[serde(rename = "JPHAFHECAKN")]
    pub jphafhecakn: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum AudioName {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "Play_ui_feedback_windCrystal_appear")]
    PlayUiFeedbackWindCrystalAppear,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum EffectName {
    #[serde(rename = "Eff_UI_Mark_WindCrystal")]
    EffUiMarkWindCrystal,

    #[serde(rename = "")]
    Empty,
}

pub fn load() -> Result<RadarHintExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "RadarHintExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
