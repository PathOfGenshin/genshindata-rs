// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type GlobalWatcherConfigData = Vec<GlobalWatcherConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct GlobalWatcherConfigDatum {
    #[serde(rename = "predicateConfigs")]
    pub predicate_configs: Vec<PredicateConfig>,

    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "triggerConfig")]
    pub trigger_config: TriggerConfig,

    #[serde(rename = "progress")]
    pub progress: i64,

    #[serde(rename = "isDisuse")]
    pub is_disuse: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PredicateConfig {
    #[serde(rename = "predicateType")]
    pub predicate_type: Option<PredicateType>,

    #[serde(rename = "paramList")]
    pub param_list: Vec<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct TriggerConfig {
    #[serde(rename = "triggerType")]
    pub trigger_type: String,

    #[serde(rename = "paramList")]
    pub param_list: Vec<String>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum PredicateType {
    #[serde(rename = "PREDICATE_CURRENT_AVATAR")]
    PredicateCurrentAvatar,

    #[serde(rename = "PREDICATE_QUEST_FINISH")]
    PredicateQuestFinish,
}

pub fn load() -> Result<GlobalWatcherConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "GlobalWatcherConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
