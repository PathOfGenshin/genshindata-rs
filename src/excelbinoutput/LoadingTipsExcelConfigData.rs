// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type LoadingTipsExcelConfigData = Vec<LoadingTipsExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct LoadingTipsExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "tipsTitleTextMapHash")]
    pub tips_title_text_map_hash: i64,

    #[serde(rename = "tipsDescTextMapHash")]
    pub tips_desc_text_map_hash: i64,

    #[serde(rename = "stageID")]
    pub stage_id: String,

    #[serde(rename = "startTime")]
    pub start_time: String,

    #[serde(rename = "endTime")]
    pub end_time: String,

    #[serde(rename = "limitOpenState")]
    pub limit_open_state: LimitOpenState,

    #[serde(rename = "preMainQuestIds")]
    pub pre_main_quest_ids: String,

    #[serde(rename = "OEGMFOHBAHC")]
    pub oegmfohbahc: Vec<i64>,

    #[serde(rename = "NFNEGJEAKBL")]
    pub nfnegjeakbl: Vec<i64>,

    #[serde(rename = "GFGPIGCAPFB")]
    pub gfgpigcapfb: Vec<Option<serde_json::Value>>,

    #[serde(rename = "weight")]
    pub weight: Option<i64>,

    #[serde(rename = "minLevel")]
    pub min_level: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum LimitOpenState {
    #[serde(rename = "")]
    Empty,

    #[serde(rename = "OPEN_STATE_COMBINE")]
    OpenStateCombine,

    #[serde(rename = "OPEN_STATE_GACHA")]
    OpenStateGacha,

    #[serde(rename = "OPEN_STATE_GUIDE_BLOSSOM")]
    OpenStateGuideBlossom,

    #[serde(rename = "OPEN_STATE_LOADINGTIPS_ENKANOMIYA")]
    OpenStateLoadingtipsEnkanomiya,
}

pub fn load() -> Result<LoadingTipsExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "LoadingTipsExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
