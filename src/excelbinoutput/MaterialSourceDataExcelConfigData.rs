// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type MaterialSourceDataExcelConfigData = Vec<MaterialSourceDataExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct MaterialSourceDataExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "dungeonList")]
    pub dungeon_list: Vec<i64>,

    #[serde(rename = "GJMLDACGHFJ")]
    pub gjmldacghfj: Vec<Gjmldacghfj>,

    #[serde(rename = "JCLGCACJMMK")]
    pub jclgcacjmmk: Vec<i64>,

    #[serde(rename = "CDCOJJJOADI")]
    pub cdcojjjoadi: Vec<Cdcojjjoadi>,

    #[serde(rename = "KFPOMCBFKHM")]
    pub kfpomcbfkhm: Vec<i64>,

    #[serde(rename = "jumpList")]
    pub jump_list: Vec<i64>,

    #[serde(rename = "textList")]
    pub text_list: Vec<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Gjmldacghfj {
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Cdcojjjoadi {
    #[serde(rename = "JUMP_INVESTIGATION")]
    JumpInvestigation,

    #[serde(rename = "JUMP_MALL")]
    JumpMall,
}

pub fn load() -> Result<MaterialSourceDataExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "MaterialSourceDataExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
