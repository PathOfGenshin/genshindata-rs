// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type EffigyLimitingConditionExcelConfigData = Vec<EffigyLimitingConditionExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct EffigyLimitingConditionExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "conditionType")]
    pub condition_type: ConditionType,

    #[serde(rename = "icon")]
    pub icon: String,

    #[serde(rename = "conditionParam1")]
    pub condition_param1: i64,

    #[serde(rename = "NGBCEMLKLJC")]
    pub ngbcemlkljc: Vec<i64>,

    #[serde(rename = "HGKDJMIAEBC")]
    pub hgkdjmiaebc: i64,

    #[serde(rename = "score")]
    pub score: i64,

    #[serde(rename = "exclusiveId")]
    pub exclusive_id: Option<i64>,

    #[serde(rename = "JFPFOFEGBOP")]
    pub jfpfofegbop: Option<bool>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum ConditionType {
    #[serde(rename = "EFFIGY_CONDITION_LEVEL_CONFIG")]
    EffigyConditionLevelConfig,

    #[serde(rename = "EFFIGY_CONDITION_MONSTER_CONFIG")]
    EffigyConditionMonsterConfig,

    #[serde(rename = "EFFIGY_CONDITION_TIME_LIMIT")]
    EffigyConditionTimeLimit,
}

pub fn load() -> Result<EffigyLimitingConditionExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "EffigyLimitingConditionExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
