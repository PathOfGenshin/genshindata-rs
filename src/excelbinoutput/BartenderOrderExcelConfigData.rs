// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type BartenderOrderExcelConfigData = Vec<BartenderOrderExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct BartenderOrderExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "JIALCLKNJBI")]
    pub jialclknjbi: i64,

    #[serde(rename = "MCLAHLELLLD")]
    pub mclahlellld: Vec<i64>,

    #[serde(rename = "iconName")]
    pub icon_name: String,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "BACPJBHFCHJ")]
    pub bacpjbhfchj: Option<Bacpjbhfchj>,

    #[serde(rename = "time")]
    pub time: Option<i64>,

    #[serde(rename = "score")]
    pub score: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Bacpjbhfchj {
    #[serde(rename = "BARTENDER_CUP_BIG")]
    BartenderCupBig,

    #[serde(rename = "BARTENDER_CUP_MEDIUM")]
    BartenderCupMedium,

    #[serde(rename = "BARTENDER_CUP_SMALL")]
    BartenderCupSmall,
}

pub fn load() -> Result<BartenderOrderExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "BartenderOrderExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
