// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type ReminderExcelConfigData = Vec<ReminderExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ReminderExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "speakerTextMapHash")]
    pub speaker_text_map_hash: i64,

    #[serde(rename = "contentTextMapHash")]
    pub content_text_map_hash: i64,

    #[serde(rename = "showTime")]
    pub show_time: Option<f64>,

    #[serde(rename = "nextReminderId")]
    pub next_reminder_id: Option<i64>,

    #[serde(rename = "soundEffect")]
    pub sound_effect: String,

    #[serde(rename = "hasAudio")]
    pub has_audio: Option<bool>,

    #[serde(rename = "delay")]
    pub delay: Option<f64>,

    #[serde(rename = "style")]
    pub style: Option<Style>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Style {
    #[serde(rename = "Banner")]
    Banner,

    #[serde(rename = "EventPromptDown")]
    EventPromptDown,

    #[serde(rename = "InfoTextDialog")]
    InfoTextDialog,

    #[serde(rename = "WhiteMessage")]
    WhiteMessage,
}

pub fn load() -> Result<ReminderExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "ReminderExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
