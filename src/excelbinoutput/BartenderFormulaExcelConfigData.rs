// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type BartenderFormulaExcelConfigData = Vec<BartenderFormulaExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct BartenderFormulaExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "LDGFABEMCDK")]
    pub ldgfabemcdk: Vec<Ialdnmdkabo>,

    #[serde(rename = "IALDNMDKABO")]
    pub ialdnmdkabo: Vec<Ialdnmdkabo>,

    #[serde(rename = "FIPEBBKFEIJ")]
    pub fipebbkfeij: Vec<i64>,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "MEHNNNCLHLI")]
    pub mehnnnclhli: Option<i64>,

    #[serde(rename = "MBPKCLOODNN")]
    pub mbpkcloodnn: Option<i64>,

    #[serde(rename = "IKJBFINLMDD")]
    pub ikjbfinlmdd: i64,

    #[serde(rename = "NPEPHCHEMCC")]
    pub npephchemcc: Option<Npephchemcc>,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct Ialdnmdkabo {
    #[serde(rename = "id")]
    pub id: Option<i64>,

    #[serde(rename = "count")]
    pub count: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Npephchemcc {
    #[serde(rename = "HEAVY")]
    Heavy,

    #[serde(rename = "MIDDLE")]
    Middle,
}

pub fn load() -> Result<BartenderFormulaExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "BartenderFormulaExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
