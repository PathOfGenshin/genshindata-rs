// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type ActivitySalesmanExcelConfigData = Vec<ActivitySalesmanExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct ActivitySalesmanExcelConfigDatum {
    #[serde(rename = "scheduleId")]
    pub schedule_id: i64,

    #[serde(rename = "dailyConfigIdList")]
    pub daily_config_id_list: Vec<i64>,

    #[serde(rename = "normalRewardIdList")]
    pub normal_reward_id_list: Vec<i64>,

    #[serde(rename = "specialRewardIdList")]
    pub special_reward_id_list: Vec<i64>,

    #[serde(rename = "specialProbList")]
    pub special_prob_list: Vec<f64>,

    #[serde(rename = "specialReward")]
    pub special_reward: SpecialReward,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct SpecialReward {
    #[serde(rename = "obtainParam")]
    pub obtain_param: String,

    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "rewardType")]
    pub reward_type: Option<String>,

    #[serde(rename = "obtainMethod")]
    pub obtain_method: Option<String>,

    #[serde(rename = "previewId")]
    pub preview_id: Option<i64>,
}

pub fn load() -> Result<ActivitySalesmanExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "ActivitySalesmanExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
