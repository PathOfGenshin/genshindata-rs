// This file was automatically generated by quicktype and a custom PowerShell script
// (see Sync-ExcelBinOutput.ps1 for more info).
// DO NOT manually edit this file!

extern crate serde_derive;

pub type CompoundExcelConfigData = Vec<CompoundExcelConfigDatum>;

#[derive(Debug, Serialize, Deserialize)]
pub struct CompoundExcelConfigDatum {
    #[serde(rename = "id")]
    pub id: i64,

    #[serde(rename = "groupID")]
    pub group_id: i64,

    #[serde(rename = "nameTextMapHash")]
    pub name_text_map_hash: i64,

    #[serde(rename = "rankLevel")]
    pub rank_level: i64,

    #[serde(rename = "type")]
    pub compound_excel_config_datum_type: Type,

    #[serde(rename = "isDefaultUnlocked")]
    pub is_default_unlocked: Option<bool>,

    #[serde(rename = "costTime")]
    pub cost_time: i64,

    #[serde(rename = "queueSize")]
    pub queue_size: i64,

    #[serde(rename = "inputVec")]
    pub input_vec: Vec<PutVec>,

    #[serde(rename = "outputVec")]
    pub output_vec: Vec<PutVec>,

    #[serde(rename = "icon")]
    pub icon: String,

    #[serde(rename = "descTextMapHash")]
    pub desc_text_map_hash: i64,

    #[serde(rename = "MMBLAPAKLIC")]
    pub mmblapaklic: i64,
}

#[derive(Debug, Serialize, Deserialize)]
pub struct PutVec {
    #[serde(rename = "id")]
    pub id: Option<i64>,

    #[serde(rename = "count")]
    pub count: Option<i64>,
}

#[derive(Debug, Serialize, Deserialize)]
pub enum Type {
    #[serde(rename = "COMPOUND_COOK")]
    CompoundCook,
}

pub fn load() -> Result<CompoundExcelConfigData, crate::json::JsonError> {
    let path: std::path::PathBuf = [
        "GenshinData",
        "ExcelBinOutput",
        "CompoundExcelConfigData.json",
    ]
    .iter()
    .collect();
    crate::json::load_json(path)
}
